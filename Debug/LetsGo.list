
LetsGo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000772c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007888  08007888  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007888  08007888  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007888  08007888  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000010  0800789c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800789c  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013786  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000347d  00000000  00000000  000337bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00036c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00037e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae80  00000000  00000000  00038ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014230  00000000  00000000  00053d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed37  00000000  00000000  00067fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6cdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a8  00000000  00000000  000f6d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08007820 	.word	0x08007820

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08007820 	.word	0x08007820

0800014c <_ZN8DFPlayerC1EP20__UART_HandleTypeDef>:
 *      Author: MeXaN
 */

#include "DFPlayer.h"

DFPlayer::DFPlayer(UART_HandleTypeDef *huart) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2200      	movs	r2, #0
 800015a:	701a      	strb	r2, [r3, #0]
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2200      	movs	r2, #0
 8000160:	605a      	str	r2, [r3, #4]
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	721a      	strb	r2, [r3, #8]
	huartDF = huart;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	683a      	ldr	r2, [r7, #0]
 800016c:	60da      	str	r2, [r3, #12]
	Send_cmd(0x3F, 0x00, Source);
 800016e:	2308      	movs	r3, #8
 8000170:	2200      	movs	r2, #0
 8000172:	213f      	movs	r1, #63	; 0x3f
 8000174:	6878      	ldr	r0, [r7, #4]
 8000176:	f000 f812 	bl	800019e <_ZN8DFPlayer8Send_cmdEhhh>
	HAL_Delay(200);
 800017a:	20c8      	movs	r0, #200	; 0xc8
 800017c:	f003 fb74 	bl	8003868 <HAL_Delay>
	Send_cmd(0x06, 0x00, 1);
 8000180:	2301      	movs	r3, #1
 8000182:	2200      	movs	r2, #0
 8000184:	2106      	movs	r1, #6
 8000186:	6878      	ldr	r0, [r7, #4]
 8000188:	f000 f809 	bl	800019e <_ZN8DFPlayer8Send_cmdEhhh>
	HAL_Delay(500);
 800018c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000190:	f003 fb6a 	bl	8003868 <HAL_Delay>
}
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	4618      	mov	r0, r3
 8000198:	3708      	adds	r7, #8
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}

0800019e <_ZN8DFPlayer8Send_cmdEhhh>:
void DFPlayer::Send_cmd(uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2) {
 800019e:	b580      	push	{r7, lr}
 80001a0:	b086      	sub	sp, #24
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	6078      	str	r0, [r7, #4]
 80001a6:	4608      	mov	r0, r1
 80001a8:	4611      	mov	r1, r2
 80001aa:	461a      	mov	r2, r3
 80001ac:	4603      	mov	r3, r0
 80001ae:	70fb      	strb	r3, [r7, #3]
 80001b0:	460b      	mov	r3, r1
 80001b2:	70bb      	strb	r3, [r7, #2]
 80001b4:	4613      	mov	r3, r2
 80001b6:	707b      	strb	r3, [r7, #1]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1
 80001b8:	78fb      	ldrb	r3, [r7, #3]
 80001ba:	b29a      	uxth	r2, r3
 80001bc:	78bb      	ldrb	r3, [r7, #2]
 80001be:	b29b      	uxth	r3, r3
 80001c0:	4413      	add	r3, r2
 80001c2:	b29a      	uxth	r2, r3
			+ Parameter2;
 80001c4:	787b      	ldrb	r3, [r7, #1]
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	4413      	add	r3, r2
 80001ca:	b29b      	uxth	r3, r3
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1
 80001cc:	f203 1305 	addw	r3, r3, #261	; 0x105
 80001d0:	82fb      	strh	r3, [r7, #22]
	Checksum = 0 - Checksum;
 80001d2:	8afb      	ldrh	r3, [r7, #22]
 80001d4:	425b      	negs	r3, r3
 80001d6:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback,
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	811a      	strh	r2, [r3, #8]
 80001e4:	237e      	movs	r3, #126	; 0x7e
 80001e6:	733b      	strb	r3, [r7, #12]
 80001e8:	23ff      	movs	r3, #255	; 0xff
 80001ea:	737b      	strb	r3, [r7, #13]
 80001ec:	2306      	movs	r3, #6
 80001ee:	73bb      	strb	r3, [r7, #14]
 80001f0:	23ef      	movs	r3, #239	; 0xef
 80001f2:	757b      	strb	r3, [r7, #21]
			Parameter1, Parameter2, (Checksum >> 8) & 0x00ff,
			(Checksum & 0x00ff), End_Byte };
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	78bb      	ldrb	r3, [r7, #2]
 80001fa:	747b      	strb	r3, [r7, #17]
 80001fc:	787b      	ldrb	r3, [r7, #1]
 80001fe:	74bb      	strb	r3, [r7, #18]
			Parameter1, Parameter2, (Checksum >> 8) & 0x00ff,
 8000200:	8afb      	ldrh	r3, [r7, #22]
 8000202:	0a1b      	lsrs	r3, r3, #8
 8000204:	b29b      	uxth	r3, r3
			(Checksum & 0x00ff), End_Byte };
 8000206:	b2db      	uxtb	r3, r3
 8000208:	74fb      	strb	r3, [r7, #19]
 800020a:	8afb      	ldrh	r3, [r7, #22]
 800020c:	b2db      	uxtb	r3, r3
 800020e:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(huartDF, CmdSequence, 10, HAL_MAX_DELAY);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	68d8      	ldr	r0, [r3, #12]
 8000214:	f107 010c 	add.w	r1, r7, #12
 8000218:	f04f 33ff 	mov.w	r3, #4294967295
 800021c:	220a      	movs	r2, #10
 800021e:	f006 fe49 	bl	8006eb4 <HAL_UART_Transmit>
	timer = HAL_GetTick();
 8000222:	f003 fb17 	bl	8003854 <HAL_GetTick>
 8000226:	4602      	mov	r2, r0
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	605a      	str	r2, [r3, #4]
}
 800022c:	bf00      	nop
 800022e:	3718      	adds	r7, #24
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <_ZN8DFPlayer5PauseEv>:

void DFPlayer::Next() {
	Send_cmd(0x01, 0x00, 0x00);
}
void DFPlayer::Pause() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	Send_cmd(0x0E, 0, 0);
 800023c:	2300      	movs	r3, #0
 800023e:	2200      	movs	r2, #0
 8000240:	210e      	movs	r1, #14
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f7ff ffab 	bl	800019e <_ZN8DFPlayer8Send_cmdEhhh>
}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <_ZN8DFPlayer12GetNowStatusEv>:

void DFPlayer::Reseting(){
	Send_cmd(0x0c, 0, 0);
}

PlayerStatus DFPlayer::GetNowStatus(){
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	return nowStatus;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	7a1b      	ldrb	r3, [r3, #8]
}
 800025c:	4618      	mov	r0, r3
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <_ZN8DFPlayer4PlayEv>:

void DFPlayer::Playback() {
	Send_cmd(0x18, 0, 0);
}

void DFPlayer::Play() {
 8000266:	b580      	push	{r7, lr}
 8000268:	b082      	sub	sp, #8
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
	Send_cmd(0x0D, 0, 0);
 800026e:	2300      	movs	r3, #0
 8000270:	2200      	movs	r2, #0
 8000272:	210d      	movs	r1, #13
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f7ff ff92 	bl	800019e <_ZN8DFPlayer8Send_cmdEhhh>
}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}

08000282 <_ZN8DFPlayer6VolumeEh>:

void DFPlayer::Volume(uint8_t volume) {
 8000282:	b580      	push	{r7, lr}
 8000284:	b082      	sub	sp, #8
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	460b      	mov	r3, r1
 800028c:	70fb      	strb	r3, [r7, #3]
	if(volume == volumeNow) return;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	789b      	ldrb	r3, [r3, #2]
 8000292:	78fa      	ldrb	r2, [r7, #3]
 8000294:	429a      	cmp	r2, r3
 8000296:	d00e      	beq.n	80002b6 <_ZN8DFPlayer6VolumeEh+0x34>
	if (volume > 30)
 8000298:	78fb      	ldrb	r3, [r7, #3]
 800029a:	2b1e      	cmp	r3, #30
 800029c:	d901      	bls.n	80002a2 <_ZN8DFPlayer6VolumeEh+0x20>
		volume = 30;
 800029e:	231e      	movs	r3, #30
 80002a0:	70fb      	strb	r3, [r7, #3]
	Send_cmd(0x06, 0x00, volume);
 80002a2:	78fb      	ldrb	r3, [r7, #3]
 80002a4:	2200      	movs	r2, #0
 80002a6:	2106      	movs	r1, #6
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f7ff ff78 	bl	800019e <_ZN8DFPlayer8Send_cmdEhhh>
	volumeNow = volume;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	78fa      	ldrb	r2, [r7, #3]
 80002b2:	709a      	strb	r2, [r3, #2]
 80002b4:	e000      	b.n	80002b8 <_ZN8DFPlayer6VolumeEh+0x36>
	if(volume == volumeNow) return;
 80002b6:	bf00      	nop
}
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}

080002be <_ZN8DFPlayer5ReadyEv>:

bool DFPlayer::Ready() {
 80002be:	b580      	push	{r7, lr}
 80002c0:	b082      	sub	sp, #8
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - timer >= delayDF) {
 80002c6:	f003 fac5 	bl	8003854 <HAL_GetTick>
 80002ca:	4602      	mov	r2, r0
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	2bf9      	cmp	r3, #249	; 0xf9
 80002d4:	bf8c      	ite	hi
 80002d6:	2301      	movhi	r3, #1
 80002d8:	2300      	movls	r3, #0
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <_ZN8DFPlayer5ReadyEv+0x26>
		return true;
 80002e0:	2301      	movs	r3, #1
 80002e2:	e000      	b.n	80002e6 <_ZN8DFPlayer5ReadyEv+0x28>
	} else
		return false;
 80002e4:	2300      	movs	r3, #0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <_ZN8DFPlayer9SetStatusEv>:

void DFPlayer::SetStatus() {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	if (nowStatus == status) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	7a1a      	ldrb	r2, [r3, #8]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	429a      	cmp	r2, r3
 8000302:	d022      	beq.n	800034a <_ZN8DFPlayer9SetStatusEv+0x5a>
		return;
	} else {
		switch (nowStatus) {
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7a1b      	ldrb	r3, [r3, #8]
 8000308:	2b03      	cmp	r3, #3
 800030a:	d820      	bhi.n	800034e <_ZN8DFPlayer9SetStatusEv+0x5e>
 800030c:	a201      	add	r2, pc, #4	; (adr r2, 8000314 <_ZN8DFPlayer9SetStatusEv+0x24>)
 800030e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000312:	bf00      	nop
 8000314:	08000325 	.word	0x08000325
 8000318:	0800032d 	.word	0x0800032d
 800031c:	08000335 	.word	0x08000335
 8000320:	08000343 	.word	0x08000343
		case PAUSE:
			Pause();
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f7ff ff85 	bl	8000234 <_ZN8DFPlayer5PauseEv>
			break;
 800032a:	e011      	b.n	8000350 <_ZN8DFPlayer9SetStatusEv+0x60>
		case PLAYING:
			Play();
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	f7ff ff9a 	bl	8000266 <_ZN8DFPlayer4PlayEv>
			break;
 8000332:	e00d      	b.n	8000350 <_ZN8DFPlayer9SetStatusEv+0x60>
		case VOLUME:
			Volume(volumeSet);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	785b      	ldrb	r3, [r3, #1]
 8000338:	4619      	mov	r1, r3
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f7ff ffa1 	bl	8000282 <_ZN8DFPlayer6VolumeEh>
			break;
 8000340:	e006      	b.n	8000350 <_ZN8DFPlayer9SetStatusEv+0x60>
		case RESETING:
			Pause();
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ff76 	bl	8000234 <_ZN8DFPlayer5PauseEv>
			break;
 8000348:	e002      	b.n	8000350 <_ZN8DFPlayer9SetStatusEv+0x60>
		return;
 800034a:	bf00      	nop
 800034c:	e000      	b.n	8000350 <_ZN8DFPlayer9SetStatusEv+0x60>
		default:
			break;
 800034e:	bf00      	nop
		}
	}
}
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop

08000358 <_Z11erase_flashv>:

extern CRC_HandleTypeDef hcrc;
extern uint32_t res_addr;

//////////////////////// ОЧИСТКА ПАМЯТИ /////////////////////////////
void erase_flash(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct; // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 800035e:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <_Z11erase_flashv+0x3c>)
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = STARTADDR;
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <_Z11erase_flashv+0x3c>)
 8000366:	4a0c      	ldr	r2, [pc, #48]	; (8000398 <_Z11erase_flashv+0x40>)
 8000368:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = PAGES;
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <_Z11erase_flashv+0x3c>)
 800036c:	2202      	movs	r2, #2
 800036e:	60da      	str	r2, [r3, #12]
	//EraseInitStruct.Banks = FLASH_BANK_1; // FLASH_BANK_2 - банк №2, FLASH_BANK_BOTH - оба банка
	uint32_t page_error = 0; // переменная, в которую запишется адрес страницы при неудачном стирании
 8000370:	2300      	movs	r3, #0
 8000372:	607b      	str	r3, [r7, #4]

	HAL_FLASH_Unlock(); // разблокировать флеш
 8000374:	f003 fed4 	bl	8004120 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK) {
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <_Z11erase_flashv+0x3c>)
 800037e:	f003 ffb7 	bl	80042f0 <HAL_FLASHEx_Erase>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
	}

	HAL_FLASH_Lock();
 8000386:	f003 fef1 	bl	800416c <HAL_FLASH_Lock>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000002c 	.word	0x2000002c
 8000398:	0801f800 	.word	0x0801f800

0800039c <_Z19flash_search_adressmt>:

//////////////////////// ПОИСК СВОБОДНЫХ ЯЧЕЕК /////////////////////////////
uint32_t flash_search_adress(uint32_t address, uint16_t cnt) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	807b      	strh	r3, [r7, #2]
	uint16_t count_byte = cnt;
 80003a8:	887b      	ldrh	r3, [r7, #2]
 80003aa:	81fb      	strh	r3, [r7, #14]

	while (count_byte) {
 80003ac:	89fb      	ldrh	r3, [r7, #14]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d018      	beq.n	80003e4 <_Z19flash_search_adressmt+0x48>
		if (0xFF == *(uint8_t*) address++)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	1c5a      	adds	r2, r3, #1
 80003b6:	607a      	str	r2, [r7, #4]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2bff      	cmp	r3, #255	; 0xff
 80003bc:	bf0c      	ite	eq
 80003be:	2301      	moveq	r3, #1
 80003c0:	2300      	movne	r3, #0
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d003      	beq.n	80003d0 <_Z19flash_search_adressmt+0x34>
			count_byte--;
 80003c8:	89fb      	ldrh	r3, [r7, #14]
 80003ca:	3b01      	subs	r3, #1
 80003cc:	81fb      	strh	r3, [r7, #14]
 80003ce:	e001      	b.n	80003d4 <_Z19flash_search_adressmt+0x38>
		else
			count_byte = cnt;
 80003d0:	887b      	ldrh	r3, [r7, #2]
 80003d2:	81fb      	strh	r3, [r7, #14]

		if (address == ENDMEMORY - 1) // если достигнут конец флеша
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <_Z19flash_search_adressmt+0x5c>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d1e7      	bne.n	80003ac <_Z19flash_search_adressmt+0x10>
				{
			erase_flash();        // тогда очищаем память
 80003dc:	f7ff ffbc 	bl	8000358 <_Z11erase_flashv>
			return STARTADDR;  // устанавливаем адрес для записи с самого начала
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <_Z19flash_search_adressmt+0x60>)
 80003e2:	e004      	b.n	80003ee <_Z19flash_search_adressmt+0x52>
		}
	}

	return address -= cnt;
 80003e4:	887b      	ldrh	r3, [r7, #2]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	0801ffff 	.word	0x0801ffff
 80003fc:	0801f800 	.word	0x0801f800

08000400 <_Z14write_to_flashPm>:

//////////////////////// ЗАПИСЬ ДАННЫХ /////////////////////////////
void write_to_flash(myBuf_t *buff) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	res_addr = flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8000408:	4b16      	ldr	r3, [pc, #88]	; (8000464 <_Z14write_to_flashPm+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	212c      	movs	r1, #44	; 0x2c
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ffc4 	bl	800039c <_Z19flash_search_adressmt>
 8000414:	4603      	mov	r3, r0
 8000416:	4a13      	ldr	r2, [pc, #76]	; (8000464 <_Z14write_to_flashPm+0x64>)
 8000418:	6013      	str	r3, [r2, #0]

	//////////////////////// ЗАПИСЬ ////////////////////////////
	HAL_FLASH_Unlock(); // разблокировать флеш
 800041a:	f003 fe81 	bl	8004120 <HAL_FLASH_Unlock>

	for (uint16_t i = 0; i < BUFFSIZE; i++) {
 800041e:	2300      	movs	r3, #0
 8000420:	81fb      	strh	r3, [r7, #14]
 8000422:	89fb      	ldrh	r3, [r7, #14]
 8000424:	2b0a      	cmp	r3, #10
 8000426:	d817      	bhi.n	8000458 <_Z14write_to_flashPm+0x58>
		if (HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK) {
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <_Z14write_to_flashPm+0x64>)
 800042a:	6819      	ldr	r1, [r3, #0]
 800042c:	89fb      	ldrh	r3, [r7, #14]
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	4413      	add	r3, r2
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	461a      	mov	r2, r3
 8000438:	f04f 0300 	mov.w	r3, #0
 800043c:	2002      	movs	r0, #2
 800043e:	f003 fdff 	bl	8004040 <HAL_FLASH_Program>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
		}

		res_addr = res_addr + DATAWIDTH;
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <_Z14write_to_flashPm+0x64>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	3304      	adds	r3, #4
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <_Z14write_to_flashPm+0x64>)
 800044e:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < BUFFSIZE; i++) {
 8000450:	89fb      	ldrh	r3, [r7, #14]
 8000452:	3301      	adds	r3, #1
 8000454:	81fb      	strh	r3, [r7, #14]
 8000456:	e7e4      	b.n	8000422 <_Z14write_to_flashPm+0x22>
	}

	HAL_FLASH_Lock(); // заблокировать флеш
 8000458:	f003 fe88 	bl	800416c <HAL_FLASH_Lock>

	//////////////////////// конец проверки записанного ////////////////////////

}
 800045c:	bf00      	nop
 800045e:	3710      	adds	r7, #16
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000058 	.word	0x20000058

08000468 <_Z23read_last_data_in_flashPm>:

//////////////////////// ЧТЕНИЕ ПОСЛЕДНИХ ДАННЫХ /////////////////////////////
void read_last_data_in_flash(myBuf_t *buff) {
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	if (res_addr == STARTADDR) {
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <_Z23read_last_data_in_flashPm+0x4c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a10      	ldr	r2, [pc, #64]	; (80004b8 <_Z23read_last_data_in_flashPm+0x50>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d016      	beq.n	80004a8 <_Z23read_last_data_in_flashPm+0x40>
		return;
	}

	uint32_t adr = res_addr - BUFFSIZE * DATAWIDTH; // сдвигаемся на начало последних данных
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <_Z23read_last_data_in_flashPm+0x4c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	3b2c      	subs	r3, #44	; 0x2c
 8000480:	60fb      	str	r3, [r7, #12]

	for (uint16_t i = 0; i < BUFFSIZE; i++) {
 8000482:	2300      	movs	r3, #0
 8000484:	817b      	strh	r3, [r7, #10]
 8000486:	897b      	ldrh	r3, [r7, #10]
 8000488:	2b0a      	cmp	r3, #10
 800048a:	d80e      	bhi.n	80004aa <_Z23read_last_data_in_flashPm+0x42>
		buff[i] = *(myBuf_t*) adr; // читаем
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	897b      	ldrh	r3, [r7, #10]
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	6879      	ldr	r1, [r7, #4]
 8000494:	440b      	add	r3, r1
 8000496:	6812      	ldr	r2, [r2, #0]
 8000498:	601a      	str	r2, [r3, #0]
		adr = adr + DATAWIDTH;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3304      	adds	r3, #4
 800049e:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < BUFFSIZE; i++) {
 80004a0:	897b      	ldrh	r3, [r7, #10]
 80004a2:	3301      	adds	r3, #1
 80004a4:	817b      	strh	r3, [r7, #10]
 80004a6:	e7ee      	b.n	8000486 <_Z23read_last_data_in_flashPm+0x1e>
		return;
 80004a8:	bf00      	nop
	}
}
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	20000058 	.word	0x20000058
 80004b8:	0801f800 	.word	0x0801f800

080004bc <_ZN9MexButtonC1EP12GPIO_TypeDeftbb>:
 *      Author: MeXaN
 */

#include "MexButton.h"

MexButton::MexButton(GPIO_TypeDef *Button_Port_Constr,
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	4611      	mov	r1, r2
 80004c8:	461a      	mov	r2, r3
 80004ca:	460b      	mov	r3, r1
 80004cc:	80fb      	strh	r3, [r7, #6]
 80004ce:	4613      	mov	r3, r2
 80004d0:	717b      	strb	r3, [r7, #5]
		uint16_t Button_Pin_Constr, bool type, bool dir) {
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	223c      	movs	r2, #60	; 0x3c
 80004d6:	815a      	strh	r2, [r3, #10]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004de:	819a      	strh	r2, [r3, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004e6:	81da      	strh	r2, [r3, #14]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80004ee:	821a      	strh	r2, [r3, #16]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2200      	movs	r2, #0
 80004f4:	749a      	strb	r2, [r3, #18]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2200      	movs	r2, #0
 80004fa:	74da      	strb	r2, [r3, #19]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	2200      	movs	r2, #0
 8000500:	751a      	strb	r2, [r3, #20]
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2200      	movs	r2, #0
 800050c:	771a      	strb	r2, [r3, #28]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2200      	movs	r2, #0
 8000512:	775a      	strb	r2, [r3, #29]
	if (NULL != Button_Port_Constr) {
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d00b      	beq.n	8000532 <_ZN9MexButtonC1EP12GPIO_TypeDeftbb+0x76>
		Button_Port = Button_Port_Constr;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	68ba      	ldr	r2, [r7, #8]
 800051e:	605a      	str	r2, [r3, #4]
		Button_Pin = Button_Pin_Constr;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	88fa      	ldrh	r2, [r7, #6]
 8000524:	811a      	strh	r2, [r3, #8]
		flags.noPin = 0;
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	7853      	ldrb	r3, [r2, #1]
 800052a:	f36f 1345 	bfc	r3, #5, #1
 800052e:	7053      	strb	r3, [r2, #1]
 8000530:	e004      	b.n	800053c <_ZN9MexButtonC1EP12GPIO_TypeDeftbb+0x80>
	} else {
		flags.noPin = 1;
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	7853      	ldrb	r3, [r2, #1]
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	7053      	strb	r3, [r2, #1]
	}
	setType(type);
 800053c:	797b      	ldrb	r3, [r7, #5]
 800053e:	4619      	mov	r1, r3
 8000540:	68f8      	ldr	r0, [r7, #12]
 8000542:	f000 f831 	bl	80005a8 <_ZN9MexButton7setTypeEb>
	flags.mode = 0;
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	7853      	ldrb	r3, [r2, #1]
 800054a:	f36f 0382 	bfc	r3, #2, #1
 800054e:	7053      	strb	r3, [r2, #1]
	flags.tickMode = 0;
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	7853      	ldrb	r3, [r2, #1]
 8000554:	f36f 1304 	bfc	r3, #4, #1
 8000558:	7053      	strb	r3, [r2, #1]
	flags.inv_state = dir;
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	7853      	ldrb	r3, [r2, #1]
 800055e:	7e39      	ldrb	r1, [r7, #24]
 8000560:	f361 0341 	bfi	r3, r1, #1, #1
 8000564:	7053      	strb	r3, [r2, #1]
}
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <_ZN9MexButton10setDebounsEt>:

void MexButton::setDebouns(uint16_t debounce) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
	_debounce = debounce;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	887a      	ldrh	r2, [r7, #2]
 8000580:	815a      	strh	r2, [r3, #10]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <_ZN9MexButton10setTimeoutEt>:
void MexButton::setTimeout(uint16_t new_timeout) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	807b      	strh	r3, [r7, #2]
	_timeout = new_timeout;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	887a      	ldrh	r2, [r7, #2]
 800059c:	819a      	strh	r2, [r3, #12]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <_ZN9MexButton7setTypeEb>:
	_click_timeout = new_timeout;
}
void MexButton::setStepTimeout(uint16_t step_timeout) {
	_step_timeout = step_timeout;
}
void MexButton::setType(bool type) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
	flags.type = type;
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7853      	ldrb	r3, [r2, #1]
 80005b8:	78f9      	ldrb	r1, [r7, #3]
 80005ba:	f361 03c3 	bfi	r3, r1, #3, #1
 80005be:	7053      	strb	r3, [r2, #1]
	if (!flags.noPin) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	785b      	ldrb	r3, [r3, #1]
 80005c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f083 0301 	eor.w	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d01b      	beq.n	800060c <_ZN9MexButton7setTypeEb+0x64>
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Pin = Button_Pin;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	891b      	ldrh	r3, [r3, #8]
 80005e6:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
		if (type) {
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <_ZN9MexButton7setTypeEb+0x50>
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	e001      	b.n	80005fc <_ZN9MexButton7setTypeEb+0x54>
		} else {
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
		}
		HAL_GPIO_Init(Button_Port, &GPIO_InitStruct);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f107 0208 	add.w	r2, r7, #8
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f003 ff1a 	bl	8004440 <HAL_GPIO_Init>
	}
}
 800060c:	bf00      	nop
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <_ZN9MexButton7isClickEv>:
		flags.isRelease_f = 0;
		return 1;
	} else
		return 0;
}
bool MexButton::isClick() {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if (flags.tickMode)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <_ZN9MexButton7isClickEv+0x1c>
		MexButton::tick();
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 f87d 	bl	800072a <_ZN9MexButton4tickEv>
	if (flags.isOne_f) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d006      	beq.n	800064c <_ZN9MexButton7isClickEv+0x38>
		flags.isOne_f = 0;
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	7853      	ldrb	r3, [r2, #1]
 8000642:	f36f 0300 	bfc	r3, #0, #1
 8000646:	7053      	strb	r3, [r2, #1]
		return 1;
 8000648:	2301      	movs	r3, #1
 800064a:	e000      	b.n	800064e <_ZN9MexButton7isClickEv+0x3a>
	} else
		return 0;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <_ZN9MexButton8isHoldedEv>:
bool MexButton::isHolded() {
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	if (flags.tickMode)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	785b      	ldrb	r3, [r3, #1]
 8000662:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <_ZN9MexButton8isHoldedEv+0x1c>
		MexButton::tick();
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f85c 	bl	800072a <_ZN9MexButton4tickEv>
	if (flags.isHolded_f) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d006      	beq.n	800068e <_ZN9MexButton8isHoldedEv+0x38>
		flags.isHolded_f = 0;
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	7813      	ldrb	r3, [r2, #0]
 8000684:	f36f 03c3 	bfc	r3, #3, #1
 8000688:	7013      	strb	r3, [r2, #0]
		return 1;
 800068a:	2301      	movs	r3, #1
 800068c:	e000      	b.n	8000690 <_ZN9MexButton8isHoldedEv+0x3a>
	} else
		return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <_ZN9MexButton6isHoldEv>:
bool MexButton::isHold() {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	if (flags.tickMode)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <_ZN9MexButton6isHoldEv+0x1c>
		MexButton::tick();
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f83b 	bl	800072a <_ZN9MexButton4tickEv>
	if (flags.step_flag) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <_ZN9MexButton6isHoldEv+0x2e>
		return 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <_ZN9MexButton6isHoldEv+0x30>
	} else
		return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_ZN9MexButton11resetStatesEv>:
		return 1;
	} else
		return 0;
}

void MexButton::resetStates() {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	flags.isPress_f = false;
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	7813      	ldrb	r3, [r2, #0]
 80006dc:	f36f 1345 	bfc	r3, #5, #1
 80006e0:	7013      	strb	r3, [r2, #0]
	flags.isRelease_f = false;
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	7813      	ldrb	r3, [r2, #0]
 80006e6:	f36f 1304 	bfc	r3, #4, #1
 80006ea:	7013      	strb	r3, [r2, #0]
	flags.isOne_f = false;
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	7853      	ldrb	r3, [r2, #1]
 80006f0:	f36f 0300 	bfc	r3, #0, #1
 80006f4:	7053      	strb	r3, [r2, #1]
	flags.isHolded_f = false;
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	7813      	ldrb	r3, [r2, #0]
 80006fa:	f36f 03c3 	bfc	r3, #3, #1
 80006fe:	7013      	strb	r3, [r2, #0]
	flags.step_flag = false;
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	7813      	ldrb	r3, [r2, #0]
 8000704:	f36f 1386 	bfc	r3, #6, #1
 8000708:	7013      	strb	r3, [r2, #0]
	flags.counter_flag = false;
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	7813      	ldrb	r3, [r2, #0]
 800070e:	f36f 0382 	bfc	r3, #2, #1
 8000712:	7013      	strb	r3, [r2, #0]
	last_hold_counter = 0;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	751a      	strb	r2, [r3, #20]
	last_counter = 0;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	74da      	strb	r2, [r3, #19]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <_ZN9MexButton4tickEv>:
	btn_state = state ^ flags.inv_state;
	MexButton::tick();
	flags.mode = 0;
}

void MexButton::tick() {
 800072a:	b580      	push	{r7, lr}
 800072c:	b084      	sub	sp, #16
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
	if (!flags.mode && !flags.noPin) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	785b      	ldrb	r3, [r3, #1]
 8000736:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f083 0301 	eor.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d02b      	beq.n	800079e <_ZN9MexButton4tickEv+0x74>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	785b      	ldrb	r3, [r3, #1]
 800074a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f083 0301 	eor.w	r3, r3, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d021      	beq.n	800079e <_ZN9MexButton4tickEv+0x74>
		btn_state = !_buttonRead() ^ (flags.inv_state ^ flags.type);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685a      	ldr	r2, [r3, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	891b      	ldrh	r3, [r3, #8]
 8000762:	4619      	mov	r1, r3
 8000764:	4610      	mov	r0, r2
 8000766:	f003 ffef 	bl	8004748 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	bf0c      	ite	eq
 8000770:	2301      	moveq	r3, #1
 8000772:	2300      	movne	r3, #0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4619      	mov	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	785b      	ldrb	r3, [r3, #1]
 800077c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000780:	b2da      	uxtb	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	785b      	ldrb	r3, [r3, #1]
 8000786:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4053      	eors	r3, r2
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4299      	cmp	r1, r3
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2da      	uxtb	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	771a      	strb	r2, [r3, #28]
	}
	uint32_t thisMls = HAL_GetTick();
 800079e:	f003 f859 	bl	8003854 <HAL_GetTick>
 80007a2:	60f8      	str	r0, [r7, #12]

	if (btn_state && !btn_flag) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7f1b      	ldrb	r3, [r3, #28]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d02f      	beq.n	800080c <_ZN9MexButton4tickEv+0xe2>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7f5b      	ldrb	r3, [r3, #29]
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d028      	beq.n	800080c <_ZN9MexButton4tickEv+0xe2>
		if (!flags.btn_deb) {
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f083 0301 	eor.w	r3, r3, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d008      	beq.n	80007e0 <_ZN9MexButton4tickEv+0xb6>
			flags.btn_deb = 1;
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	7813      	ldrb	r3, [r2, #0]
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	7013      	strb	r3, [r2, #0]
			btn_timer = thisMls;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	619a      	str	r2, [r3, #24]
		if (!flags.btn_deb) {
 80007de:	e01b      	b.n	8000818 <_ZN9MexButton4tickEv+0xee>
		} else {
			if (thisMls - btn_timer >= _debounce) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	8952      	ldrh	r2, [r2, #10]
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d313      	bcc.n	8000818 <_ZN9MexButton4tickEv+0xee>
				btn_flag = 1;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2201      	movs	r2, #1
 80007f4:	775a      	strb	r2, [r3, #29]
				flags.isPress_f = 1;
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7813      	ldrb	r3, [r2, #0]
 80007fa:	f043 0320 	orr.w	r3, r3, #32
 80007fe:	7013      	strb	r3, [r2, #0]
				flags.oneClick_f = 1;
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	7813      	ldrb	r3, [r2, #0]
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	7013      	strb	r3, [r2, #0]
		if (!flags.btn_deb) {
 800080a:	e005      	b.n	8000818 <_ZN9MexButton4tickEv+0xee>
			}
		}
	} else {
		flags.btn_deb = 0;
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	7813      	ldrb	r3, [r2, #0]
 8000810:	f36f 0300 	bfc	r3, #0, #1
 8000814:	7013      	strb	r3, [r2, #0]
 8000816:	e000      	b.n	800081a <_ZN9MexButton4tickEv+0xf0>
		if (!flags.btn_deb) {
 8000818:	bf00      	nop
	}
	if (!btn_state && btn_flag) {
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7f1b      	ldrb	r3, [r3, #28]
 800081e:	f083 0301 	eor.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d046      	beq.n	80008b6 <_ZN9MexButton4tickEv+0x18c>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7f5b      	ldrb	r3, [r3, #29]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d042      	beq.n	80008b6 <_ZN9MexButton4tickEv+0x18c>
		btn_flag = 0;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	775a      	strb	r2, [r3, #29]
		if (!flags.hold_flag)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f083 0301 	eor.w	r3, r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d005      	beq.n	8000856 <_ZN9MexButton4tickEv+0x12c>
			btn_counter++;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7c9b      	ldrb	r3, [r3, #18]
 800084e:	3301      	adds	r3, #1
 8000850:	b2da      	uxtb	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	749a      	strb	r2, [r3, #18]
		flags.hold_flag = 0;
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	7813      	ldrb	r3, [r2, #0]
 800085a:	f36f 0341 	bfc	r3, #1, #1
 800085e:	7013      	strb	r3, [r2, #0]
		flags.isRelease_f = 1;
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	7813      	ldrb	r3, [r2, #0]
 8000864:	f043 0310 	orr.w	r3, r3, #16
 8000868:	7013      	strb	r3, [r2, #0]
		btn_timer = thisMls;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	619a      	str	r2, [r3, #24]
		if (flags.step_flag) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00a      	beq.n	8000894 <_ZN9MexButton4tickEv+0x16a>
			last_counter = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	74da      	strb	r2, [r3, #19]
			btn_counter = 0;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	749a      	strb	r2, [r3, #18]
			flags.step_flag = 0;
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	7813      	ldrb	r3, [r2, #0]
 800088e:	f36f 1386 	bfc	r3, #6, #1
 8000892:	7013      	strb	r3, [r2, #0]
		}
		if (flags.oneClick_f) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d009      	beq.n	80008b6 <_ZN9MexButton4tickEv+0x18c>
			flags.oneClick_f = 0;
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	7813      	ldrb	r3, [r2, #0]
 80008a6:	f36f 13c7 	bfc	r3, #7, #1
 80008aa:	7013      	strb	r3, [r2, #0]
			flags.isOne_f = 1;
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	7853      	ldrb	r3, [r2, #1]
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	7053      	strb	r3, [r2, #1]
		}
	}
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7f5b      	ldrb	r3, [r3, #29]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d030      	beq.n	8000920 <_ZN9MexButton4tickEv+0x1f6>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	7f1b      	ldrb	r3, [r3, #28]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d02c      	beq.n	8000920 <_ZN9MexButton4tickEv+0x1f6>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	8992      	ldrh	r2, [r2, #12]
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d324      	bcc.n	8000920 <_ZN9MexButton4tickEv+0x1f6>
			&& !flags.hold_flag) {
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f083 0301 	eor.w	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d01a      	beq.n	8000920 <_ZN9MexButton4tickEv+0x1f6>
		flags.hold_flag = 1;
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	7813      	ldrb	r3, [r2, #0]
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	7013      	strb	r3, [r2, #0]
		last_hold_counter = btn_counter;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7c9a      	ldrb	r2, [r3, #18]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	751a      	strb	r2, [r3, #20]
		flags.isHolded_f = 1;
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	7813      	ldrb	r3, [r2, #0]
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	7013      	strb	r3, [r2, #0]
		flags.step_flag = 1;
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	7813      	ldrb	r3, [r2, #0]
 800090a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800090e:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = 0;
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	7813      	ldrb	r3, [r2, #0]
 8000914:	f36f 13c7 	bfc	r3, #7, #1
 8000918:	7013      	strb	r3, [r2, #0]
		btn_timer = thisMls;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	619a      	str	r2, [r3, #24]
	}
	if ((thisMls - btn_timer >= _click_timeout) && (btn_counter != 0)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	89d2      	ldrh	r2, [r2, #14]
 800092c:	4293      	cmp	r3, r2
 800092e:	d312      	bcc.n	8000956 <_ZN9MexButton4tickEv+0x22c>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7c9b      	ldrb	r3, [r3, #18]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00e      	beq.n	8000956 <_ZN9MexButton4tickEv+0x22c>
			&& !btn_state) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7f1b      	ldrb	r3, [r3, #28]
 800093c:	f083 0301 	eor.w	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d007      	beq.n	8000956 <_ZN9MexButton4tickEv+0x22c>
		btn_counter = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	749a      	strb	r2, [r3, #18]
		flags.counter_flag = 1;
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	7813      	ldrb	r3, [r2, #0]
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	7013      	strb	r3, [r2, #0]
	}
	if (flags.counter_reset) {
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00c      	beq.n	800097e <_ZN9MexButton4tickEv+0x254>
		last_counter = 0;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	74da      	strb	r2, [r3, #19]
		flags.counter_flag = 0;
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	7813      	ldrb	r3, [r2, #0]
 800096e:	f36f 0382 	bfc	r3, #2, #1
 8000972:	7013      	strb	r3, [r2, #0]
		flags.counter_reset = 0;
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	7853      	ldrb	r3, [r2, #1]
 8000978:	f36f 1386 	bfc	r3, #6, #1
 800097c:	7053      	strb	r3, [r2, #1]
	}
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <_ZN14TM1637_DisplayC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDef>:
 */
#include "TM1637Display.h"

const uint8_t digitHEX[12] = { 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07,
		0x7f, 0x6f, 0x00, 0x40 };
TM1637_Display::TM1637_Display(GPIO_TypeDef *GPIOx_DIO, uint16_t GPIO_DIO_Pin,
 8000986:	b580      	push	{r7, lr}
 8000988:	b084      	sub	sp, #16
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4613      	mov	r3, r2
 8000994:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef *GPIOx_CLK, uint16_t GPIO_CLK_Pin,
		TIM_HandleTypeDef *htim) {
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2200      	movs	r2, #0
 80009a0:	751a      	strb	r2, [r3, #20]
	_GPIOx_DIO = GPIOx_DIO;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	605a      	str	r2, [r3, #4]
	_GPIO_DIO_Pin = GPIO_DIO_Pin;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	88fa      	ldrh	r2, [r7, #6]
 80009ac:	819a      	strh	r2, [r3, #12]
	_GPIOx_CLK = GPIOx_CLK;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	609a      	str	r2, [r3, #8]
	_GPIO_CLK_Pin = GPIO_CLK_Pin;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	8b3a      	ldrh	r2, [r7, #24]
 80009b8:	81da      	strh	r2, [r3, #14]
	timer = htim->Instance;
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(htim);
 80009c2:	69f8      	ldr	r0, [r7, #28]
 80009c4:	f005 f988 	bl	8005cd8 <HAL_TIM_Base_Start>

}
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <_ZN14TM1637_Display7displayEPh>:
void TM1637_Display::display(uint8_t DispData[]) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
	uint8_t SegData[4];
	for (uint8_t i = 0; i < 4; i++) {
 80009de:	2300      	movs	r3, #0
 80009e0:	73fb      	strb	r3, [r7, #15]
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d820      	bhi.n	8000a2a <_ZN14TM1637_Display7displayEPh+0x56>
		lastData[i] = digitHEX[DispData[i]];
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_ZN14TM1637_Display7displayEPh+0x6c>)
 80009f6:	5c51      	ldrb	r1, [r2, r1]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	4413      	add	r3, r2
 80009fc:	460a      	mov	r2, r1
 80009fe:	741a      	strb	r2, [r3, #16]
		SegData[i] = digitHEX[DispData[i]] + PointData;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <_ZN14TM1637_Display7displayEPh+0x6c>)
 8000a0c:	5c99      	ldrb	r1, [r3, r2]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7d1a      	ldrb	r2, [r3, #20]
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	440a      	add	r2, r1
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	f107 0110 	add.w	r1, r7, #16
 8000a1c:	440b      	add	r3, r1
 8000a1e:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 4; i++) {
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	3301      	adds	r3, #1
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e7db      	b.n	80009e2 <_ZN14TM1637_Display7displayEPh+0xe>
	}
	sendArray(SegData);
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	4619      	mov	r1, r3
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fadd 	bl	8000ff0 <_ZN14TM1637_Display9sendArrayEPh>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	08007864 	.word	0x08007864

08000a44 <_ZN14TM1637_Display11displayByteEPh>:

void TM1637_Display::displayByte(uint8_t DispData[]) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
	uint8_t SegData[4];
	for (uint8_t i = 0; i < 4; i++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d81a      	bhi.n	8000a8e <_ZN14TM1637_Display11displayByteEPh+0x4a>
		lastData[i] = DispData[i];
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	441a      	add	r2, r3
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	7811      	ldrb	r1, [r2, #0]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	460a      	mov	r2, r1
 8000a68:	741a      	strb	r2, [r3, #16]
		SegData[i] = DispData[i] + PointData;
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	7819      	ldrb	r1, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7d1a      	ldrb	r2, [r3, #20]
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	440a      	add	r2, r1
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	f107 0110 	add.w	r1, r7, #16
 8000a80:	440b      	add	r3, r1
 8000a82:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 4; i++) {
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e7e1      	b.n	8000a52 <_ZN14TM1637_Display11displayByteEPh+0xe>
	}
	sendArray(SegData);
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	4619      	mov	r1, r3
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 faab 	bl	8000ff0 <_ZN14TM1637_Display9sendArrayEPh>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <_ZN14TM1637_Display7displayEhh>:

void TM1637_Display::display(uint8_t BitAddr, uint8_t DispData) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	70bb      	strb	r3, [r7, #2]
	uint8_t SegData;
	lastData[BitAddr] = digitHEX[DispData];
 8000ab4:	78ba      	ldrb	r2, [r7, #2]
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	490b      	ldr	r1, [pc, #44]	; (8000ae8 <_ZN14TM1637_Display7displayEhh+0x44>)
 8000aba:	5c89      	ldrb	r1, [r1, r2]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	741a      	strb	r2, [r3, #16]
	SegData = digitHEX[DispData] + PointData;
 8000ac4:	78bb      	ldrb	r3, [r7, #2]
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <_ZN14TM1637_Display7displayEhh+0x44>)
 8000ac8:	5cd2      	ldrb	r2, [r2, r3]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7d1b      	ldrb	r3, [r3, #20]
 8000ace:	4413      	add	r3, r2
 8000ad0:	73fb      	strb	r3, [r7, #15]
	sendByte(BitAddr, SegData);
 8000ad2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000ad6:	78fb      	ldrb	r3, [r7, #3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 fa53 	bl	8000f86 <_ZN14TM1637_Display8sendByteEha>
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	08007864 	.word	0x08007864

08000aec <_ZN14TM1637_Display7displayEhhhh>:
	uint8_t dispArray[4] = { bit0, bit1, bit2, bit3 };
	displayByte(dispArray);
}

void TM1637_Display::display(uint8_t bit0, uint8_t bit1, uint8_t bit2,
		uint8_t bit3) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4603      	mov	r3, r0
 8000afc:	70fb      	strb	r3, [r7, #3]
 8000afe:	460b      	mov	r3, r1
 8000b00:	70bb      	strb	r3, [r7, #2]
 8000b02:	4613      	mov	r3, r2
 8000b04:	707b      	strb	r3, [r7, #1]
	uint8_t dispArray[] = { bit0, bit1, bit2, bit3 };
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	733b      	strb	r3, [r7, #12]
 8000b0a:	78bb      	ldrb	r3, [r7, #2]
 8000b0c:	737b      	strb	r3, [r7, #13]
 8000b0e:	787b      	ldrb	r3, [r7, #1]
 8000b10:	73bb      	strb	r3, [r7, #14]
 8000b12:	7e3b      	ldrb	r3, [r7, #24]
 8000b14:	73fb      	strb	r3, [r7, #15]
	display(dispArray);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff59 	bl	80009d4 <_ZN14TM1637_Display7displayEPh>
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_ZN14TM1637_Display5clearEv>:

void TM1637_Display::clear(void) {
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	display(0x00, 0x7f);
 8000b32:	227f      	movs	r2, #127	; 0x7f
 8000b34:	2100      	movs	r1, #0
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffb4 	bl	8000aa4 <_ZN14TM1637_Display7displayEhh>
	display(0x01, 0x7f);
 8000b3c:	227f      	movs	r2, #127	; 0x7f
 8000b3e:	2101      	movs	r1, #1
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ffaf 	bl	8000aa4 <_ZN14TM1637_Display7displayEhh>
	display(0x02, 0x7f);
 8000b46:	227f      	movs	r2, #127	; 0x7f
 8000b48:	2102      	movs	r1, #2
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffaa 	bl	8000aa4 <_ZN14TM1637_Display7displayEhh>
	display(0x03, 0x7f);
 8000b50:	227f      	movs	r2, #127	; 0x7f
 8000b52:	2103      	movs	r1, #3
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ffa5 	bl	8000aa4 <_ZN14TM1637_Display7displayEhh>
	lastData[0] = 0x00;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	741a      	strb	r2, [r3, #16]
	lastData[1] = 0x00;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	745a      	strb	r2, [r3, #17]
	lastData[2] = 0x00;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	749a      	strb	r2, [r3, #18]
	lastData[3] = 0x00;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	74da      	strb	r2, [r3, #19]
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_ZN14TM1637_Display10brightnessEhhh>:

void TM1637_Display::brightness(uint8_t brightness, uint8_t SetData,
		uint8_t SetAddr) {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	4608      	mov	r0, r1
 8000b84:	4611      	mov	r1, r2
 8000b86:	461a      	mov	r2, r3
 8000b88:	4603      	mov	r3, r0
 8000b8a:	70fb      	strb	r3, [r7, #3]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70bb      	strb	r3, [r7, #2]
 8000b90:	4613      	mov	r3, r2
 8000b92:	707b      	strb	r3, [r7, #1]
	Cmd_SetData = 0x40;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2240      	movs	r2, #64	; 0x40
 8000b98:	755a      	strb	r2, [r3, #21]
	Cmd_SetAddr = 0xc0;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	22c0      	movs	r2, #192	; 0xc0
 8000b9e:	759a      	strb	r2, [r3, #22]
	Cmd_DispCtrl = 0x88 + brightness; //Set the brightness and it takes effect the next time it displays.
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	3b78      	subs	r3, #120	; 0x78
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	75da      	strb	r2, [r3, #23]
	update();
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 fa5c 	bl	8001068 <_ZN14TM1637_Display6updateEv>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZN14TM1637_Display5pointEb>:

void TM1637_Display::point(bool PointFlag) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
	if (PointFlag)
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <_ZN14TM1637_Display5pointEb+0x1a>
		PointData = 0x80;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	751a      	strb	r2, [r3, #20]
 8000bd0:	e002      	b.n	8000bd8 <_ZN14TM1637_Display5pointEb+0x20>
	else
		PointData = 0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	751a      	strb	r2, [r3, #20]
	update();
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fa45 	bl	8001068 <_ZN14TM1637_Display6updateEv>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <_ZN14TM1637_Display12displayClockEhh>:

void TM1637_Display::displayClock(uint8_t hrs, uint8_t mins) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	70bb      	strb	r3, [r7, #2]
	if (hrs > 99 || mins > 99)
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	2b63      	cmp	r3, #99	; 0x63
 8000bfc:	d835      	bhi.n	8000c6a <_ZN14TM1637_Display12displayClockEhh+0x82>
 8000bfe:	78bb      	ldrb	r3, [r7, #2]
 8000c00:	2b63      	cmp	r3, #99	; 0x63
 8000c02:	d832      	bhi.n	8000c6a <_ZN14TM1637_Display12displayClockEhh+0x82>
		return;
	uint8_t disp_time[4];
	if ((hrs / 10) == 0)
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	2b09      	cmp	r3, #9
 8000c08:	d802      	bhi.n	8000c10 <_ZN14TM1637_Display12displayClockEhh+0x28>
		disp_time[0] = 10;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	733b      	strb	r3, [r7, #12]
 8000c0e:	e006      	b.n	8000c1e <_ZN14TM1637_Display12displayClockEhh+0x36>
	else
		disp_time[0] = (hrs / 10);
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <_ZN14TM1637_Display12displayClockEhh+0x8c>)
 8000c14:	fba2 2303 	umull	r2, r3, r2, r3
 8000c18:	08db      	lsrs	r3, r3, #3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	733b      	strb	r3, [r7, #12]
	disp_time[1] = hrs % 10;
 8000c1e:	78fa      	ldrb	r2, [r7, #3]
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <_ZN14TM1637_Display12displayClockEhh+0x8c>)
 8000c22:	fba3 1302 	umull	r1, r3, r3, r2
 8000c26:	08d9      	lsrs	r1, r3, #3
 8000c28:	460b      	mov	r3, r1
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	737b      	strb	r3, [r7, #13]
	disp_time[2] = mins / 10;
 8000c36:	78bb      	ldrb	r3, [r7, #2]
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <_ZN14TM1637_Display12displayClockEhh+0x8c>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	08db      	lsrs	r3, r3, #3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	73bb      	strb	r3, [r7, #14]
	disp_time[3] = mins % 10;
 8000c44:	78ba      	ldrb	r2, [r7, #2]
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <_ZN14TM1637_Display12displayClockEhh+0x8c>)
 8000c48:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4c:	08d9      	lsrs	r1, r3, #3
 8000c4e:	460b      	mov	r3, r1
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	73fb      	strb	r3, [r7, #15]
	display(disp_time);
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff feb6 	bl	80009d4 <_ZN14TM1637_Display7displayEPh>
 8000c68:	e000      	b.n	8000c6c <_ZN14TM1637_Display12displayClockEhh+0x84>
		return;
 8000c6a:	bf00      	nop
}
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	cccccccd 	.word	0xcccccccd

08000c78 <_ZN14TM1637_Display10displayIntEs>:

void TM1637_Display::displayInt(int16_t value) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
	if (value > 9999 || value < -999)
 8000c84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c88:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	f300 80ae 	bgt.w	8000dee <_ZN14TM1637_Display10displayIntEs+0x176>
 8000c92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c96:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000c9a:	f340 80a8 	ble.w	8000dee <_ZN14TM1637_Display10displayIntEs+0x176>
		return;
	bool negative = false;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	75fb      	strb	r3, [r7, #23]
	uint8_t digits[4];
	if (value < 0) {
 8000ca2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	da05      	bge.n	8000cb6 <_ZN14TM1637_Display10displayIntEs+0x3e>
		negative = true;
 8000caa:	2301      	movs	r3, #1
 8000cac:	75fb      	strb	r3, [r7, #23]
		value = -value;
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	425b      	negs	r3, r3
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	807b      	strh	r3, [r7, #2]
	}
	digits[0] = (int) value / 1000;
 8000cb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cba:	4a4f      	ldr	r2, [pc, #316]	; (8000df8 <_ZN14TM1637_Display10displayIntEs+0x180>)
 8000cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc0:	1192      	asrs	r2, r2, #6
 8000cc2:	17db      	asrs	r3, r3, #31
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	733b      	strb	r3, [r7, #12]
	uint16_t b = (int) digits[0] * 1000;
 8000ccc:	7b3b      	ldrb	r3, [r7, #12]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	0152      	lsls	r2, r2, #5
 8000cd4:	1ad2      	subs	r2, r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	827b      	strh	r3, [r7, #18]
	digits[1] = ((int) value - b) / 100;
 8000cde:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ce2:	8a7b      	ldrh	r3, [r7, #18]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	4a45      	ldr	r2, [pc, #276]	; (8000dfc <_ZN14TM1637_Display10displayIntEs+0x184>)
 8000ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cec:	1152      	asrs	r2, r2, #5
 8000cee:	17db      	asrs	r3, r3, #31
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	737b      	strb	r3, [r7, #13]
	b += digits[1] * 100;
 8000cf6:	7b7b      	ldrb	r3, [r7, #13]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	461a      	mov	r2, r3
 8000d02:	0091      	lsls	r1, r2, #2
 8000d04:	461a      	mov	r2, r3
 8000d06:	460b      	mov	r3, r1
 8000d08:	4413      	add	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	8a7b      	ldrh	r3, [r7, #18]
 8000d10:	4413      	add	r3, r2
 8000d12:	827b      	strh	r3, [r7, #18]
	digits[2] = (int) (value - b) / 10;
 8000d14:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d18:	8a7b      	ldrh	r3, [r7, #18]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	4a38      	ldr	r2, [pc, #224]	; (8000e00 <_ZN14TM1637_Display10displayIntEs+0x188>)
 8000d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d22:	1092      	asrs	r2, r2, #2
 8000d24:	17db      	asrs	r3, r3, #31
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	73bb      	strb	r3, [r7, #14]
	b += digits[2] * 10;
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	8a7b      	ldrh	r3, [r7, #18]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	827b      	strh	r3, [r7, #18]
	digits[3] = value - b;
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	8a7b      	ldrh	r3, [r7, #18]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	73fb      	strb	r3, [r7, #15]
	if (!negative) {
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	f083 0301 	eor.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d017      	beq.n	8000d8a <_ZN14TM1637_Display10displayIntEs+0x112>
		for (uint8_t i = 0; i < 3; i++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	75bb      	strb	r3, [r7, #22]
 8000d5e:	7dbb      	ldrb	r3, [r7, #22]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d83d      	bhi.n	8000de0 <_ZN14TM1637_Display10displayIntEs+0x168>
			if (digits[i] == 0)
 8000d64:	7dbb      	ldrb	r3, [r7, #22]
 8000d66:	f107 0218 	add.w	r2, r7, #24
 8000d6a:	4413      	add	r3, r2
 8000d6c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d134      	bne.n	8000dde <_ZN14TM1637_Display10displayIntEs+0x166>
				digits[i] = 10;
 8000d74:	7dbb      	ldrb	r3, [r7, #22]
 8000d76:	f107 0218 	add.w	r2, r7, #24
 8000d7a:	4413      	add	r3, r2
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for (uint8_t i = 0; i < 3; i++) {
 8000d82:	7dbb      	ldrb	r3, [r7, #22]
 8000d84:	3301      	adds	r3, #1
 8000d86:	75bb      	strb	r3, [r7, #22]
 8000d88:	e7e9      	b.n	8000d5e <_ZN14TM1637_Display10displayIntEs+0xe6>
			else
				break;
		}
	} else {
		for (uint8_t i = 0; i < 3; i++) {
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	757b      	strb	r3, [r7, #21]
 8000d8e:	7d7b      	ldrb	r3, [r7, #21]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d825      	bhi.n	8000de0 <_ZN14TM1637_Display10displayIntEs+0x168>
			if (digits[i] == 0) {
 8000d94:	7d7b      	ldrb	r3, [r7, #21]
 8000d96:	f107 0218 	add.w	r2, r7, #24
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d118      	bne.n	8000dd6 <_ZN14TM1637_Display10displayIntEs+0x15e>
				if (digits[i + 1] == 0) {
 8000da4:	7d7b      	ldrb	r3, [r7, #21]
 8000da6:	3301      	adds	r3, #1
 8000da8:	f107 0218 	add.w	r2, r7, #24
 8000dac:	4413      	add	r3, r2
 8000dae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d107      	bne.n	8000dc6 <_ZN14TM1637_Display10displayIntEs+0x14e>
					digits[i] = 10;
 8000db6:	7d7b      	ldrb	r3, [r7, #21]
 8000db8:	f107 0218 	add.w	r2, r7, #24
 8000dbc:	4413      	add	r3, r2
 8000dbe:	220a      	movs	r2, #10
 8000dc0:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000dc4:	e007      	b.n	8000dd6 <_ZN14TM1637_Display10displayIntEs+0x15e>
				} else {
					digits[i] = 11;
 8000dc6:	7d7b      	ldrb	r3, [r7, #21]
 8000dc8:	f107 0218 	add.w	r2, r7, #24
 8000dcc:	4413      	add	r3, r2
 8000dce:	220b      	movs	r2, #11
 8000dd0:	f803 2c0c 	strb.w	r2, [r3, #-12]
					break;
 8000dd4:	e004      	b.n	8000de0 <_ZN14TM1637_Display10displayIntEs+0x168>
		for (uint8_t i = 0; i < 3; i++) {
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	757b      	strb	r3, [r7, #21]
 8000ddc:	e7d7      	b.n	8000d8e <_ZN14TM1637_Display10displayIntEs+0x116>
				break;
 8000dde:	bf00      	nop
				}
			}
		}
	}
	display(digits);
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4619      	mov	r1, r3
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fdf4 	bl	80009d4 <_ZN14TM1637_Display7displayEPh>
 8000dec:	e000      	b.n	8000df0 <_ZN14TM1637_Display10displayIntEs+0x178>
		return;
 8000dee:	bf00      	nop

}
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	10624dd3 	.word	0x10624dd3
 8000dfc:	51eb851f 	.word	0x51eb851f
 8000e00:	66666667 	.word	0x66666667

08000e04 <_ZN14TM1637_Display9writeByteEh>:

bool TM1637_Display::writeByte(uint8_t wr_data) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e1a:	2b07      	cmp	r3, #7
 8000e1c:	d82e      	bhi.n	8000e7c <_ZN14TM1637_Display9writeByteEh+0x78>
		HAL_GPIO_WritePin(_GPIOx_CLK, _GPIO_CLK_Pin, GPIO_PIN_RESET);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6898      	ldr	r0, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	89db      	ldrh	r3, [r3, #14]
 8000e26:	2200      	movs	r2, #0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f003 fca4 	bl	8004776 <HAL_GPIO_WritePin>

		if (wr_data & 0x01)
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d008      	beq.n	8000e4a <_ZN14TM1637_Display9writeByteEh+0x46>
			HAL_GPIO_WritePin(_GPIOx_DIO, _GPIO_DIO_Pin, GPIO_PIN_SET);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6858      	ldr	r0, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	899b      	ldrh	r3, [r3, #12]
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	f003 fc97 	bl	8004776 <HAL_GPIO_WritePin>
 8000e48:	e007      	b.n	8000e5a <_ZN14TM1637_Display9writeByteEh+0x56>
		else
			HAL_GPIO_WritePin(_GPIOx_DIO, _GPIO_DIO_Pin, GPIO_PIN_RESET);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6858      	ldr	r0, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	899b      	ldrh	r3, [r3, #12]
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	f003 fc8e 	bl	8004776 <HAL_GPIO_WritePin>

		wr_data >>= 1;
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	105b      	asrs	r3, r3, #1
 8000e5e:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(_GPIOx_CLK, _GPIO_CLK_Pin, GPIO_PIN_SET);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6898      	ldr	r0, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	89db      	ldrh	r3, [r3, #14]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f003 fc83 	bl	8004776 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8000e70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e74:	3301      	adds	r3, #1
 8000e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e7a:	e7cc      	b.n	8000e16 <_ZN14TM1637_Display9writeByteEh+0x12>

	}
	HAL_GPIO_WritePin(_GPIOx_CLK, _GPIO_CLK_Pin, GPIO_PIN_RESET);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6898      	ldr	r0, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	89db      	ldrh	r3, [r3, #14]
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	f003 fc75 	bl	8004776 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(_GPIOx_DIO, _GPIO_DIO_Pin, GPIO_PIN_SET);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6858      	ldr	r0, [r3, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	899b      	ldrh	r3, [r3, #12]
 8000e94:	2201      	movs	r2, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	f003 fc6d 	bl	8004776 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(_GPIOx_CLK, _GPIO_CLK_Pin, GPIO_PIN_SET);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6898      	ldr	r0, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	89db      	ldrh	r3, [r3, #14]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f003 fc65 	bl	8004776 <HAL_GPIO_WritePin>

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = _GPIO_DIO_Pin;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	899b      	ldrh	r3, [r3, #12]
 8000ebe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(_GPIOx_DIO, &GPIO_InitStruct);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f107 021c 	add.w	r2, r7, #28
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fab4 	bl	8004440 <HAL_GPIO_Init>
	timer->CNT = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
	while (timer->CNT < 50) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	2b31      	cmp	r3, #49	; 0x31
 8000ee8:	bf94      	ite	ls
 8000eea:	2301      	movls	r3, #1
 8000eec:	2300      	movhi	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d000      	beq.n	8000ef6 <_ZN14TM1637_Display9writeByteEh+0xf2>
 8000ef4:	e7f4      	b.n	8000ee0 <_ZN14TM1637_Display9writeByteEh+0xdc>
	}
	bool ack = HAL_GPIO_ReadPin(_GPIOx_DIO, _GPIO_DIO_Pin);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	899b      	ldrh	r3, [r3, #12]
 8000efe:	4619      	mov	r1, r3
 8000f00:	4610      	mov	r0, r2
 8000f02:	f003 fc21 	bl	8004748 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf14      	ite	ne
 8000f0c:	2301      	movne	r3, #1
 8000f0e:	2300      	moveq	r3, #0
 8000f10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (ack == 0) {
 8000f14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d12e      	bne.n	8000f7a <_ZN14TM1637_Display9writeByteEh+0x176>
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Pin = _GPIO_DIO_Pin;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	899b      	ldrh	r3, [r3, #12]
 8000f2e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(_GPIOx_DIO, &GPIO_InitStruct);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f107 020c 	add.w	r2, r7, #12
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fa7a 	bl	8004440 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(_GPIOx_DIO, _GPIO_DIO_Pin, GPIO_PIN_RESET);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6858      	ldr	r0, [r3, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	899b      	ldrh	r3, [r3, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	f003 fc0d 	bl	8004776 <HAL_GPIO_WritePin>
		timer->CNT = 0;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
		while (timer->CNT < 50) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	2b31      	cmp	r3, #49	; 0x31
 8000f6c:	bf94      	ite	ls
 8000f6e:	2301      	movls	r3, #1
 8000f70:	2300      	movhi	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d000      	beq.n	8000f7a <_ZN14TM1637_Display9writeByteEh+0x176>
 8000f78:	e7f4      	b.n	8000f64 <_ZN14TM1637_Display9writeByteEh+0x160>
		}
	}

	return ack;
 8000f7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3730      	adds	r7, #48	; 0x30
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_ZN14TM1637_Display8sendByteEha>:

void TM1637_Display::sendByte(uint8_t BitAddr, int8_t sendData) {
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	70fb      	strb	r3, [r7, #3]
 8000f92:	4613      	mov	r3, r2
 8000f94:	70bb      	strb	r3, [r7, #2]
	start();
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f874 	bl	8001084 <_ZN14TM1637_Display5startEv>
	writeByte(ADDR_FIXED);
 8000f9c:	2144      	movs	r1, #68	; 0x44
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff30 	bl	8000e04 <_ZN14TM1637_Display9writeByteEh>
	stop();
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f895 	bl	80010d4 <_ZN14TM1637_Display4stopEv>
	start();
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f86a 	bl	8001084 <_ZN14TM1637_Display5startEv>
	writeByte(BitAddr | 0xc0);
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff22 	bl	8000e04 <_ZN14TM1637_Display9writeByteEh>
	writeByte(sendData);
 8000fc0:	78bb      	ldrb	r3, [r7, #2]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff1d 	bl	8000e04 <_ZN14TM1637_Display9writeByteEh>
	stop();
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f882 	bl	80010d4 <_ZN14TM1637_Display4stopEv>
	start();
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f857 	bl	8001084 <_ZN14TM1637_Display5startEv>
	writeByte (Cmd_DispCtrl);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7ddb      	ldrb	r3, [r3, #23]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff11 	bl	8000e04 <_ZN14TM1637_Display9writeByteEh>
	stop();
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f876 	bl	80010d4 <_ZN14TM1637_Display4stopEv>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_ZN14TM1637_Display9sendArrayEPh>:

void TM1637_Display::sendArray(uint8_t sendData[]) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	start();          //start signal sent to GyverTM1637 from MCU
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f842 	bl	8001084 <_ZN14TM1637_Display5startEv>
	writeByte(ADDR_AUTO);          //
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fefe 	bl	8000e04 <_ZN14TM1637_Display9writeByteEh>
	stop();           //
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f863 	bl	80010d4 <_ZN14TM1637_Display4stopEv>
	start();          //
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f838 	bl	8001084 <_ZN14TM1637_Display5startEv>
	writeByte (Cmd_SetAddr);          //
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7d9b      	ldrb	r3, [r3, #22]
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fef2 	bl	8000e04 <_ZN14TM1637_Display9writeByteEh>
	for (uint8_t i = 0; i < 4; i++) {
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d80b      	bhi.n	8001042 <_ZN14TM1637_Display9sendArrayEPh+0x52>
		writeByte(sendData[i]);        //
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fee5 	bl	8000e04 <_ZN14TM1637_Display9writeByteEh>
	for (uint8_t i = 0; i < 4; i++) {
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	3301      	adds	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e7f0      	b.n	8001024 <_ZN14TM1637_Display9sendArrayEPh+0x34>
	}
	stop();           //
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f846 	bl	80010d4 <_ZN14TM1637_Display4stopEv>
	start();          //
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f81b 	bl	8001084 <_ZN14TM1637_Display5startEv>
	writeByte (Cmd_DispCtrl);          //
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7ddb      	ldrb	r3, [r3, #23]
 8001052:	4619      	mov	r1, r3
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fed5 	bl	8000e04 <_ZN14TM1637_Display9writeByteEh>
	stop();
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f83a 	bl	80010d4 <_ZN14TM1637_Display4stopEv>
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <_ZN14TM1637_Display6updateEv>:

void TM1637_Display::update(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	displayByte (lastData);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3310      	adds	r3, #16
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fce4 	bl	8000a44 <_ZN14TM1637_Display11displayByteEPh>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_ZN14TM1637_Display5startEv>:

void TM1637_Display::start(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_GPIOx_CLK, _GPIO_CLK_Pin, GPIO_PIN_SET);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6898      	ldr	r0, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	89db      	ldrh	r3, [r3, #14]
 8001094:	2201      	movs	r2, #1
 8001096:	4619      	mov	r1, r3
 8001098:	f003 fb6d 	bl	8004776 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(_GPIOx_DIO, _GPIO_DIO_Pin, GPIO_PIN_SET);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6858      	ldr	r0, [r3, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	899b      	ldrh	r3, [r3, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4619      	mov	r1, r3
 80010a8:	f003 fb65 	bl	8004776 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(_GPIOx_DIO, _GPIO_DIO_Pin, GPIO_PIN_RESET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6858      	ldr	r0, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	899b      	ldrh	r3, [r3, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	f003 fb5d 	bl	8004776 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(_GPIOx_CLK, _GPIO_CLK_Pin, GPIO_PIN_RESET);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6898      	ldr	r0, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	89db      	ldrh	r3, [r3, #14]
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	f003 fb55 	bl	8004776 <HAL_GPIO_WritePin>

}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN14TM1637_Display4stopEv>:

void TM1637_Display::stop(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_GPIOx_CLK, _GPIO_CLK_Pin, GPIO_PIN_RESET);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6898      	ldr	r0, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	89db      	ldrh	r3, [r3, #14]
 80010e4:	2200      	movs	r2, #0
 80010e6:	4619      	mov	r1, r3
 80010e8:	f003 fb45 	bl	8004776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_GPIOx_DIO, _GPIO_DIO_Pin, GPIO_PIN_RESET);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6858      	ldr	r0, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	899b      	ldrh	r3, [r3, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	f003 fb3d 	bl	8004776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_GPIOx_CLK, _GPIO_CLK_Pin, GPIO_PIN_SET);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6898      	ldr	r0, [r3, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	89db      	ldrh	r3, [r3, #14]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f003 fb35 	bl	8004776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_GPIOx_DIO, _GPIO_DIO_Pin, GPIO_PIN_SET);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6858      	ldr	r0, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	899b      	ldrh	r3, [r3, #12]
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f003 fb2d 	bl	8004776 <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	b0d5      	sub	sp, #340	; 0x154
 8001128:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800112a:	f002 fb3b 	bl	80037a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800112e:	f001 fb0d 	bl	800274c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001132:	f001 fd79 	bl	8002c28 <_ZL12MX_GPIO_Initv>
	MX_RTC_Init();
 8001136:	f001 fb89 	bl	800284c <_ZL11MX_RTC_Initv>
	MX_TIM4_Init();
 800113a:	f001 fccd 	bl	8002ad8 <_ZL12MX_TIM4_Initv>
	MX_USART1_UART_Init();
 800113e:	f001 fd27 	bl	8002b90 <_ZL19MX_USART1_UART_Initv>
	MX_TIM2_Init();
 8001142:	f001 fc61 	bl	8002a08 <_ZL12MX_TIM2_Initv>
	MX_DMA_Init();
 8001146:	f001 fd51 	bl	8002bec <_ZL11MX_DMA_Initv>
	MX_TIM1_Init();
 800114a:	f001 fb9f 	bl	800288c <_ZL12MX_TIM1_Initv>
	MX_CRC_Init();
 800114e:	f001 fb65 	bl	800281c <_ZL11MX_CRC_Initv>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	myBuf_t wdata[BUFFSIZE];
	for (uint8_t i = 0; i < BUFFSIZE; i++) {
 8001152:	2300      	movs	r3, #0
 8001154:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8001158:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800115c:	2b0a      	cmp	r3, #10
 800115e:	d80e      	bhi.n	800117e <main+0x5a>
		wdata[i] = 0;
 8001160:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800116a:	4413      	add	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	f843 2c7c 	str.w	r2, [r3, #-124]
	for (uint8_t i = 0; i < BUFFSIZE; i++) {
 8001172:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001176:	3301      	adds	r3, #1
 8001178:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800117c:	e7ec      	b.n	8001158 <main+0x34>
	}
	res_addr = flash_search_adress(STARTADDR, BUFFSIZE * DATAWIDTH);
 800117e:	212c      	movs	r1, #44	; 0x2c
 8001180:	48b7      	ldr	r0, [pc, #732]	; (8001460 <main+0x33c>)
 8001182:	f7ff f90b 	bl	800039c <_Z19flash_search_adressmt>
 8001186:	4603      	mov	r3, r0
 8001188:	4ab6      	ldr	r2, [pc, #728]	; (8001464 <main+0x340>)
 800118a:	6013      	str	r3, [r2, #0]
	myBuf_t rdata[BUFFSIZE];
	read_last_data_in_flash(rdata);
 800118c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f969 	bl	8000468 <_Z23read_last_data_in_flashPm>
	for (uint8_t i = 0; i < BUFFSIZE - (BUFFSIZE - NUMBER_ALARMS); i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 800119c:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d855      	bhi.n	8001250 <main+0x12c>
		alarms[i].Hours = rdata[i] >> 16;
 80011a4:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80011ae:	4413      	add	r3, r2
 80011b0:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80011b4:	0c1b      	lsrs	r3, r3, #16
 80011b6:	f897 2146 	ldrb.w	r2, [r7, #326]	; 0x146
 80011ba:	b2d8      	uxtb	r0, r3
 80011bc:	49aa      	ldr	r1, [pc, #680]	; (8001468 <main+0x344>)
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	4602      	mov	r2, r0
 80011c8:	701a      	strb	r2, [r3, #0]
		alarms[i].Minutes = rdata[i] >> 8;
 80011ca:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80011d4:	4413      	add	r3, r2
 80011d6:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	f897 2146 	ldrb.w	r2, [r7, #326]	; 0x146
 80011e0:	b2d8      	uxtb	r0, r3
 80011e2:	49a1      	ldr	r1, [pc, #644]	; (8001468 <main+0x344>)
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	3301      	adds	r3, #1
 80011ee:	4602      	mov	r2, r0
 80011f0:	701a      	strb	r2, [r3, #0]
		if (alarms[i].Seconds >= 60) {
 80011f2:	f897 2146 	ldrb.w	r2, [r7, #326]	; 0x146
 80011f6:	499c      	ldr	r1, [pc, #624]	; (8001468 <main+0x344>)
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	440b      	add	r3, r1
 8001200:	3302      	adds	r3, #2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b3b      	cmp	r3, #59	; 0x3b
 8001206:	d90a      	bls.n	800121e <main+0xfa>
			alarms[i].Seconds = 0;
 8001208:	f897 2146 	ldrb.w	r2, [r7, #326]	; 0x146
 800120c:	4996      	ldr	r1, [pc, #600]	; (8001468 <main+0x344>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	440b      	add	r3, r1
 8001216:	3302      	adds	r3, #2
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e012      	b.n	8001244 <main+0x120>
		} else {
			alarms[i].Seconds = rdata[i];
 800121e:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001228:	4413      	add	r3, r2
 800122a:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 800122e:	f897 2146 	ldrb.w	r2, [r7, #326]	; 0x146
 8001232:	b2d8      	uxtb	r0, r3
 8001234:	498c      	ldr	r1, [pc, #560]	; (8001468 <main+0x344>)
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	440b      	add	r3, r1
 800123e:	3302      	adds	r3, #2
 8001240:	4602      	mov	r2, r0
 8001242:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < BUFFSIZE - (BUFFSIZE - NUMBER_ALARMS); i++) {
 8001244:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001248:	3301      	adds	r3, #1
 800124a:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 800124e:	e7a5      	b.n	800119c <main+0x78>
	 * uint8_t mode = 0;
	 * 1 - setting up an alarm clock
	 * 2 - setting up the clock
	 * 3 - setting an alarm
	 */
	uint32_t setTimer = HAL_GetTick();
 8001250:	f002 fb00 	bl	8003854 <HAL_GetTick>
 8001254:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
	uint32_t scrollTimer = HAL_GetTick();
 8001258:	f002 fafc 	bl	8003854 <HAL_GetTick>
 800125c:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	uint8_t sets, setsM, setsH, setsDelay, setingAlarm, ready, numberNowAlarm =
			(uint8_t) rdata[BUFFSIZE - 2];
 8001260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
	uint8_t sets, setsM, setsH, setsDelay, setingAlarm, ready, numberNowAlarm =
 8001264:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
	bool on, blink = 0, plaing = 0, excited = (uint8_t) (rdata[BUFFSIZE - 2]
 8001268:	2300      	movs	r3, #0
 800126a:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8001274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
			>> 16);
 8001278:	0c1b      	lsrs	r3, r3, #16
 800127a:	b2db      	uxtb	r3, r3
	bool on, blink = 0, plaing = 0, excited = (uint8_t) (rdata[BUFFSIZE - 2]
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
	Mode mode = NORMAL;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
	//bool alarmed = (uint8_t) (rdata[BUFFSIZE - 2] >> 8);
	bool alarmed = false;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
	bool changes = false;
 8001294:	2300      	movs	r3, #0
 8001296:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	uint32_t timer = HAL_GetTick();
 800129a:	f002 fadb 	bl	8003854 <HAL_GetTick>
 800129e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	RTC_TimeTypeDef nowTime = { 0 };
 80012a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a6:	2100      	movs	r1, #0
 80012a8:	460a      	mov	r2, r1
 80012aa:	801a      	strh	r2, [r3, #0]
 80012ac:	460a      	mov	r2, r1
 80012ae:	709a      	strb	r2, [r3, #2]
	RTC_TimeTypeDef nowAlarm = alarms[numberNowAlarm], timeToAlarm;
 80012b0:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 80012b4:	496c      	ldr	r1, [pc, #432]	; (8001468 <main+0x344>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	18ca      	adds	r2, r1, r3
 80012be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012c2:	8811      	ldrh	r1, [r2, #0]
 80012c4:	7892      	ldrb	r2, [r2, #2]
 80012c6:	8019      	strh	r1, [r3, #0]
 80012c8:	709a      	strb	r2, [r3, #2]
	 * nowAlarm - time structure for the alarm clock currently set
	 * timeToAlarm - remaining time until the alarm clock
	 */
	TM1637_Display display(Display_DIO_GPIO_Port,
	Display_DIO_Pin,
	Display_CLK_GPIO_Port, Display_CLK_Pin, &htim4);
 80012ca:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <main+0x348>)
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2302      	movs	r3, #2
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	4b66      	ldr	r3, [pc, #408]	; (8001470 <main+0x34c>)
 80012d8:	2201      	movs	r2, #1
 80012da:	4965      	ldr	r1, [pc, #404]	; (8001470 <main+0x34c>)
 80012dc:	f7ff fb53 	bl	8000986 <_ZN14TM1637_DisplayC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDef>
	DFPlayer player(&huart1);
 80012e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012e4:	4963      	ldr	r1, [pc, #396]	; (8001474 <main+0x350>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff30 	bl	800014c <_ZN8DFPlayerC1EP20__UART_HandleTypeDef>
	MexButton BT_Plus(Button_3_GPIO_Port, Button_3_Pin);
 80012ec:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80012f0:	2300      	movs	r3, #0
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	2240      	movs	r2, #64	; 0x40
 80012f8:	495d      	ldr	r1, [pc, #372]	; (8001470 <main+0x34c>)
 80012fa:	f7ff f8df 	bl	80004bc <_ZN9MexButtonC1EP12GPIO_TypeDeftbb>
	MexButton BT_Set(Button_2_GPIO_Port, Button_2_Pin);
 80012fe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001302:	2300      	movs	r3, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2300      	movs	r3, #0
 8001308:	2220      	movs	r2, #32
 800130a:	4959      	ldr	r1, [pc, #356]	; (8001470 <main+0x34c>)
 800130c:	f7ff f8d6 	bl	80004bc <_ZN9MexButtonC1EP12GPIO_TypeDeftbb>
	MexButton BT_Minus(Button_1_GPIO_Port, Button_1_Pin);
 8001310:	f107 000c 	add.w	r0, r7, #12
 8001314:	2300      	movs	r3, #0
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	2210      	movs	r2, #16
 800131c:	4954      	ldr	r1, [pc, #336]	; (8001470 <main+0x34c>)
 800131e:	f7ff f8cd 	bl	80004bc <_ZN9MexButtonC1EP12GPIO_TypeDeftbb>
	BT_Set.setTimeout(1200);
 8001322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001326:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f92e 	bl	800058c <_ZN9MexButton10setTimeoutEt>
	BT_Plus.setDebouns(60);
 8001330:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001334:	213c      	movs	r1, #60	; 0x3c
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f91a 	bl	8000570 <_ZN9MexButton10setDebounsEt>
	BT_Minus.setDebouns(60);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	213c      	movs	r1, #60	; 0x3c
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f914 	bl	8000570 <_ZN9MexButton10setDebounsEt>
	BT_Set.setDebouns(60);
 8001348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134c:	213c      	movs	r1, #60	; 0x3c
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f90e 	bl	8000570 <_ZN9MexButton10setDebounsEt>
	display.clear();
 8001354:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fbe6 	bl	8000b2a <_ZN14TM1637_Display5clearEv>
	display.brightness(2);
 800135e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001362:	23c0      	movs	r3, #192	; 0xc0
 8001364:	2240      	movs	r2, #64	; 0x40
 8001366:	2102      	movs	r1, #2
 8001368:	f7ff fc07 	bl	8000b7a <_ZN14TM1637_Display10brightnessEhhh>
	player.Volume(0);
 800136c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f7fe ff85 	bl	8000282 <_ZN8DFPlayer6VolumeEh>
	player.status = PAUSE;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	HAL_GPIO_WritePin(LED_Alarm_GPIO_Port, LED_Alarm_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001384:	483c      	ldr	r0, [pc, #240]	; (8001478 <main+0x354>)
 8001386:	f003 f9f6 	bl	8004776 <HAL_GPIO_WritePin>
	led_set_all_RGB((RGB_t ) { 0, 30, 5 });
 800138a:	4a3c      	ldr	r2, [pc, #240]	; (800147c <main+0x358>)
 800138c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	4611      	mov	r1, r2
 8001394:	8019      	strh	r1, [r3, #0]
 8001396:	3302      	adds	r3, #2
 8001398:	0c12      	lsrs	r2, r2, #16
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80013a0:	f001 fe40 	bl	8003024 <_Z15led_set_all_RGB5RGB_t>
	led_render();
 80013a4:	f001 fe56 	bl	8003054 <_Z10led_renderv>
	HAL_Delay(400);
 80013a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013ac:	f002 fa5c 	bl	8003868 <HAL_Delay>
	led_set_all_RGB((RGB_t ) { 0, 0, 0 });
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
 80013c2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80013c6:	f001 fe2d 	bl	8003024 <_Z15led_set_all_RGB5RGB_t>
	led_render();
 80013ca:	f001 fe43 	bl	8003054 <_Z10led_renderv>
	while (true) {

		if (player.Ready()) {
 80013ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe ff73 	bl	80002be <_ZN8DFPlayer5ReadyEv>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d024      	beq.n	8001428 <main+0x304>
			player.SetStatus();
 80013de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe ff84 	bl	80002f0 <_ZN8DFPlayer9SetStatusEv>
			if (player.GetNowStatus() == PLAYING) {
 80013e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7fe ff2f 	bl	8000250 <_ZN8DFPlayer12GetNowStatusEv>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <main+0x2e4>
				plaing = true;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
			}
			if (player.GetNowStatus() == PAUSE) {
 8001408:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe ff1f 	bl	8000250 <_ZN8DFPlayer12GetNowStatusEv>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <main+0x304>
				plaing = false;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
			}
		}

		if (HAL_GetTick() >= LAUNCH_TIME) {
 8001428:	f002 fa14 	bl	8003854 <HAL_GetTick>
 800142c:	4603      	mov	r3, r0
 800142e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001432:	4293      	cmp	r3, r2
 8001434:	bf8c      	ite	hi
 8001436:	2301      	movhi	r3, #1
 8001438:	2300      	movls	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d01f      	beq.n	8001480 <main+0x35c>
			BT_Plus.tick();
 8001440:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f970 	bl	800072a <_ZN9MexButton4tickEv>
			BT_Set.tick();
 800144a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f96b 	bl	800072a <_ZN9MexButton4tickEv>
			BT_Minus.tick();
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f966 	bl	800072a <_ZN9MexButton4tickEv>
 800145e:	e01e      	b.n	800149e <main+0x37a>
 8001460:	0801f800 	.word	0x0801f800
 8001464:	20000058 	.word	0x20000058
 8001468:	2000003c 	.word	0x2000003c
 800146c:	20000108 	.word	0x20000108
 8001470:	40010c00 	.word	0x40010c00
 8001474:	20000194 	.word	0x20000194
 8001478:	40011000 	.word	0x40011000
 800147c:	08007838 	.word	0x08007838
		} else {
			BT_Plus.resetStates();
 8001480:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f923 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
			BT_Set.resetStates();
 800148a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f91e 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
			BT_Minus.resetStates();
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f919 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
		}
		if (nowTime.Seconds % 15 >= 14) {
 800149e:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 80014a2:	4bd5      	ldr	r3, [pc, #852]	; (80017f8 <main+0x6d4>)
 80014a4:	fba3 1302 	umull	r1, r3, r3, r2
 80014a8:	08d9      	lsrs	r1, r3, #3
 80014aa:	460b      	mov	r3, r1
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	1a5b      	subs	r3, r3, r1
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b0d      	cmp	r3, #13
 80014b6:	d913      	bls.n	80014e0 <main+0x3bc>
			timeToAlarm = remainingTime(&nowAlarm, &nowTime);
 80014b8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80014bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 fc1e 	bl	8002d04 <_Z13remainingTimeP15RTC_TimeTypeDefS0_>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	f887 2094 	strb.w	r2, [r7, #148]	; 0x94
 80014d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80014d4:	f887 2095 	strb.w	r2, [r7, #149]	; 0x95
 80014d8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80014dc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		}

		if (timeToAlarm.Hours == 0 && timeToAlarm.Minutes <= nowAlarm.Seconds
 80014e0:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f040 80c4 	bne.w	8001672 <main+0x54e>
 80014ea:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80014ee:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80014f2:	429a      	cmp	r2, r3
 80014f4:	f200 80bd 	bhi.w	8001672 <main+0x54e>
				&& excited) {
 80014f8:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80b8 	beq.w	8001672 <main+0x54e>
			ready = 16
					- ((uint16_t) (timeToAlarm.Minutes * 60 - nowTime.Seconds)
 8001502:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001506:	b29b      	uxth	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	b29a      	uxth	r2, r3
 8001512:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001516:	b29b      	uxth	r3, r3
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b29b      	uxth	r3, r3
							* 4) / (uint16_t) (nowAlarm.Seconds * 15);
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8001522:	b292      	uxth	r2, r2
 8001524:	4611      	mov	r1, r2
 8001526:	0109      	lsls	r1, r1, #4
 8001528:	1a8a      	subs	r2, r1, r2
 800152a:	b292      	uxth	r2, r2
 800152c:	fb93 f3f2 	sdiv	r3, r3, r2
					- ((uint16_t) (timeToAlarm.Minutes * 60 - nowTime.Seconds)
 8001530:	b2db      	uxtb	r3, r3
			ready = 16
 8001532:	f1c3 0310 	rsb	r3, r3, #16
 8001536:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			if (!plaing) {
 800153a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800153e:	f083 0301 	eor.w	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <main+0x42c>
				player.status = PLAYING;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 800154e:	e008      	b.n	8001562 <main+0x43e>
			} else {
				player.volumeSet = ready + 10;
 8001550:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8001554:	330a      	adds	r3, #10
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				player.status = VOLUME;
 800155c:	2302      	movs	r3, #2
 800155e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
			}
			for (int i = 0; i < NUM_PIXELS / 2; i++) {
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001568:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800156c:	2b1d      	cmp	r3, #29
 800156e:	dc7e      	bgt.n	800166e <main+0x54a>
				HSV_t a;
				a.h = i / 5;
 8001570:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001574:	4aa1      	ldr	r2, [pc, #644]	; (80017fc <main+0x6d8>)
 8001576:	fb82 1203 	smull	r1, r2, r2, r3
 800157a:	1052      	asrs	r2, r2, #1
 800157c:	17db      	asrs	r3, r3, #31
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	b2da      	uxtb	r2, r3
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	701a      	strb	r2, [r3, #0]
				a.s = 15;
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	220f      	movs	r2, #15
 800158e:	705a      	strb	r2, [r3, #1]
				a.v = ready;
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	f897 2122 	ldrb.w	r2, [r7, #290]	; 0x122
 8001598:	709a      	strb	r2, [r3, #2]
				if (i < ready * 2 && ready / 3 != 0) {
 800159a:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015a4:	429a      	cmp	r2, r3
 80015a6:	da39      	bge.n	800161c <main+0x4f8>
 80015a8:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d935      	bls.n	800161c <main+0x4f8>
					led_set_RGB(i, hsv2rgb(a));
 80015b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015b4:	b2dc      	uxtb	r4, r3
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	f001 fc19 	bl	8002df2 <_Z7hsv2rgb5HSV_t>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	f887 2100 	strb.w	r2, [r7, #256]	; 0x100
 80015c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80015cc:	f887 2101 	strb.w	r2, [r7, #257]	; 0x101
 80015d0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80015d4:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 80015d8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80015dc:	4620      	mov	r0, r4
 80015de:	f001 fcf3 	bl	8002fc8 <_Z11led_set_RGBh5RGB_t>
					led_set_RGB(NUM_PIXELS - i - 1, hsv2rgb(a));
 80015e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f1c3 033b 	rsb	r3, r3, #59	; 0x3b
 80015ec:	b2dc      	uxtb	r4, r3
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f001 fbfd 	bl	8002df2 <_Z7hsv2rgb5HSV_t>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 8001600:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001604:	f887 2105 	strb.w	r2, [r7, #261]	; 0x105
 8001608:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800160c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8001610:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001614:	4620      	mov	r0, r4
 8001616:	f001 fcd7 	bl	8002fc8 <_Z11led_set_RGBh5RGB_t>
 800161a:	e022      	b.n	8001662 <main+0x53e>
				} else {
					led_set_RGB(i, (RGB_t ) { 3, 0, 2 });
 800161c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001620:	b2d8      	uxtb	r0, r3
 8001622:	4a77      	ldr	r2, [pc, #476]	; (8001800 <main+0x6dc>)
 8001624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	4611      	mov	r1, r2
 800162c:	8019      	strh	r1, [r3, #0]
 800162e:	3302      	adds	r3, #2
 8001630:	0c12      	lsrs	r2, r2, #16
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8001638:	f001 fcc6 	bl	8002fc8 <_Z11led_set_RGBh5RGB_t>
					led_set_RGB(NUM_PIXELS - i - 1, (RGB_t ) { 3, 0, 2 });
 800163c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f1c3 033b 	rsb	r3, r3, #59	; 0x3b
 8001646:	b2d8      	uxtb	r0, r3
 8001648:	4a6d      	ldr	r2, [pc, #436]	; (8001800 <main+0x6dc>)
 800164a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	4611      	mov	r1, r2
 8001652:	8019      	strh	r1, [r3, #0]
 8001654:	3302      	adds	r3, #2
 8001656:	0c12      	lsrs	r2, r2, #16
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800165e:	f001 fcb3 	bl	8002fc8 <_Z11led_set_RGBh5RGB_t>
			for (int i = 0; i < NUM_PIXELS / 2; i++) {
 8001662:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001666:	3301      	adds	r3, #1
 8001668:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800166c:	e77c      	b.n	8001568 <main+0x444>
				}
			}
			led_render();
 800166e:	f001 fcf1 	bl	8003054 <_Z10led_renderv>
		}

		HAL_RTC_GetTime(&hrtc, &nowTime, RTC_FORMAT_BIN);
 8001672:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	4862      	ldr	r0, [pc, #392]	; (8001804 <main+0x6e0>)
 800167c:	f003 ff62 	bl	8005544 <HAL_RTC_GetTime>
		display.displayClock(nowTime.Hours, nowTime.Minutes);
 8001680:	f897 109c 	ldrb.w	r1, [r7, #156]	; 0x9c
 8001684:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8001688:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff faab 	bl	8000be8 <_ZN14TM1637_Display12displayClockEhh>
		if (nowTime.Seconds % 2) {
 8001692:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <main+0x588>
			display.point(1);
 800169e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016a2:	2101      	movs	r1, #1
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fa87 	bl	8000bb8 <_ZN14TM1637_Display5pointEb>
 80016aa:	e005      	b.n	80016b8 <main+0x594>
		} else {
			display.point(0);
 80016ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fa80 	bl	8000bb8 <_ZN14TM1637_Display5pointEb>
		}

		if (BT_Set.isHolded()) {
 80016b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ffca 	bl	8000656 <_ZN9MexButton8isHoldedEv>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d014      	beq.n	80016f2 <main+0x5ce>
			mode = SET_CLOCK;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
			setsM = nowTime.Minutes;
 80016ce:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80016d2:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
			setsH = nowTime.Hours;
 80016d6:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 80016da:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
			sets = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
			on = true;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
			timer = HAL_GetTick();
 80016ea:	f002 f8b3 	bl	8003854 <HAL_GetTick>
 80016ee:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		}
		if ((BT_Plus.isHolded() || BT_Minus.isHolded()) && !alarmed) {
 80016f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ffad 	bl	8000656 <_ZN9MexButton8isHoldedEv>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d107      	bne.n	8001712 <main+0x5ee>
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ffa5 	bl	8000656 <_ZN9MexButton8isHoldedEv>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <main+0x600>
 8001712:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8001716:	f083 0301 	eor.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <main+0x600>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <main+0x602>
 8001724:	2300      	movs	r3, #0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d012      	beq.n	8001750 <main+0x62c>
			mode = SET_ALARM;
 800172a:	2302      	movs	r3, #2
 800172c:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
			setingAlarm = 1;
 8001730:	2301      	movs	r3, #1
 8001732:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			timer = HAL_GetTick();
 8001736:	f002 f88d 	bl	8003854 <HAL_GetTick>
 800173a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
			setsH = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
			setsM = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
			setsDelay = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
		}
		if (BT_Set.isClick()) {
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe ff5d 	bl	8000614 <_ZN9MexButton7isClickEv>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d009      	beq.n	8001774 <main+0x650>
			mode = CHOOSING_ALARM;
 8001760:	2303      	movs	r3, #3
 8001762:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
			setingAlarm = 1;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			timer = HAL_GetTick();
 800176c:	f002 f872 	bl	8003854 <HAL_GetTick>
 8001770:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		}
		if (excited && nowTime.Hours == nowAlarm.Hours
 8001774:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01e      	beq.n	80017ba <main+0x696>
 800177c:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 8001780:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8001784:	429a      	cmp	r2, r3
 8001786:	d118      	bne.n	80017ba <main+0x696>
				&& nowTime.Minutes == nowAlarm.Minutes && !alarmed) {
 8001788:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 800178c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001790:	429a      	cmp	r2, r3
 8001792:	d112      	bne.n	80017ba <main+0x696>
 8001794:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8001798:	f083 0301 	eor.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <main+0x696>
			alarmed = true;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
			excited = false;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
			player.status = PAUSE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
			player.volumeSet = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		}
		if (alarmed
				&& (BT_Set.isClick() || BT_Plus.isClick() || BT_Minus.isClick())) {
 80017ba:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d022      	beq.n	8001808 <main+0x6e4>
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe ff24 	bl	8000614 <_ZN9MexButton7isClickEv>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10f      	bne.n	80017f2 <main+0x6ce>
 80017d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe ff1c 	bl	8000614 <_ZN9MexButton7isClickEv>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d107      	bne.n	80017f2 <main+0x6ce>
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe ff14 	bl	8000614 <_ZN9MexButton7isClickEv>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00a      	beq.n	8001808 <main+0x6e4>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e009      	b.n	800180a <main+0x6e6>
 80017f6:	bf00      	nop
 80017f8:	88888889 	.word	0x88888889
 80017fc:	66666667 	.word	0x66666667
 8001800:	0800783c 	.word	0x0800783c
 8001804:	20000064 	.word	0x20000064
 8001808:	2300      	movs	r3, #0
		if (alarmed
 800180a:	2b00      	cmp	r3, #0
 800180c:	d026      	beq.n	800185c <main+0x738>
			alarmed = false;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
			excited = false;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
			led_set_all_RGB((RGB_t ) { 0, 0, 0 });
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
 800182c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001830:	f001 fbf8 	bl	8003024 <_Z15led_set_all_RGB5RGB_t>
			led_render();
 8001834:	f001 fc0e 	bl	8003054 <_Z10led_renderv>
			BT_Plus.resetStates();
 8001838:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe ff47 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
			BT_Set.resetStates();
 8001842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe ff42 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
			BT_Minus.resetStates();
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe ff3d 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
			changes = true;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		}

		if (alarmed && HAL_GetTick() - timer >= BLINK_TIMER) {
 800185c:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00a      	beq.n	800187a <main+0x756>
 8001864:	f001 fff6 	bl	8003854 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001874:	d301      	bcc.n	800187a <main+0x756>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <main+0x758>
 800187a:	2300      	movs	r3, #0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d02a      	beq.n	80018d6 <main+0x7b2>
			if (blink) {
 8001880:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <main+0x786>
				led_set_all_RGB((RGB_t ) { 255, 255, 255 });
 8001888:	4ac4      	ldr	r2, [pc, #784]	; (8001b9c <main+0xa78>)
 800188a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4611      	mov	r1, r2
 8001892:	8019      	strh	r1, [r3, #0]
 8001894:	3302      	adds	r3, #2
 8001896:	0c12      	lsrs	r2, r2, #16
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800189e:	f001 fbc1 	bl	8003024 <_Z15led_set_all_RGB5RGB_t>
				blink = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
 80018a8:	e00f      	b.n	80018ca <main+0x7a6>
			} else {
				led_set_all_RGB((RGB_t ) { 0, 0, 0 });
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 80018bc:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80018c0:	f001 fbb0 	bl	8003024 <_Z15led_set_all_RGB5RGB_t>
				blink = 1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
			}
			timer = HAL_GetTick();
 80018ca:	f001 ffc3 	bl	8003854 <HAL_GetTick>
 80018ce:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
			led_render();
 80018d2:	f001 fbbf 	bl	8003054 <_Z10led_renderv>
		}

		if (changes) {
 80018d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d058      	beq.n	8001990 <main+0x86c>
			changes = false;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			for (uint8_t i = 0; i < BUFFSIZE - (BUFFSIZE - NUMBER_ALARMS);
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 80018ea:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d82b      	bhi.n	800194a <main+0x826>
					i++) {
				wdata[i] = (alarms[i].Hours << 16) + (alarms[i].Minutes << 8)
 80018f2:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80018f6:	49aa      	ldr	r1, [pc, #680]	; (8001ba0 <main+0xa7c>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	440b      	add	r3, r1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	0419      	lsls	r1, r3, #16
 8001904:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 8001908:	48a5      	ldr	r0, [pc, #660]	; (8001ba0 <main+0xa7c>)
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	4403      	add	r3, r0
 8001912:	3301      	adds	r3, #1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	4419      	add	r1, r3
						+ alarms[i].Seconds;
 800191a:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 800191e:	48a0      	ldr	r0, [pc, #640]	; (8001ba0 <main+0xa7c>)
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	4403      	add	r3, r0
 8001928:	3302      	adds	r3, #2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	18ca      	adds	r2, r1, r3
				wdata[i] = (alarms[i].Hours << 16) + (alarms[i].Minutes << 8)
 800192e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001938:	440b      	add	r3, r1
 800193a:	f843 2c7c 	str.w	r2, [r3, #-124]
			for (uint8_t i = 0; i < BUFFSIZE - (BUFFSIZE - NUMBER_ALARMS);
 800193e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8001942:	3301      	adds	r3, #1
 8001944:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 8001948:	e7cf      	b.n	80018ea <main+0x7c6>
			}
			wdata[BUFFSIZE - 2] = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (excited) {
 8001950:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <main+0x840>
				wdata[BUFFSIZE - 2] += (1 << 16);
 8001958:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800195c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001960:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			}
			if (alarmed) {
 8001964:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <main+0x854>
				wdata[BUFFSIZE - 2] += (1 << 8);
 800196c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001970:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001974:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			}
			wdata[BUFFSIZE - 2] += numberNowAlarm;
 8001978:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800197c:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8001980:	4413      	add	r3, r2
 8001982:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			write_to_flash(wdata);
 8001986:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fd38 	bl	8000400 <_Z14write_to_flashPm>
		}

		while (mode == CHOOSING_ALARM) {
 8001990:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8001994:	2b03      	cmp	r3, #3
 8001996:	f040 80bf 	bne.w	8001b18 <main+0x9f4>
			BT_Plus.tick();
 800199a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fec3 	bl	800072a <_ZN9MexButton4tickEv>
			BT_Set.tick();
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe febe 	bl	800072a <_ZN9MexButton4tickEv>
			BT_Minus.tick();
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe feb9 	bl	800072a <_ZN9MexButton4tickEv>
			display.point(0);
 80019b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f8fa 	bl	8000bb8 <_ZN14TM1637_Display5pointEb>
			display.displayInt(setingAlarm);
 80019c4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f951 	bl	8000c78 <_ZN14TM1637_Display10displayIntEs>
			if (BT_Plus.isClick()) {
 80019d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fe1a 	bl	8000614 <_ZN9MexButton7isClickEv>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d010      	beq.n	8001a08 <main+0x8e4>
				timer = HAL_GetTick();
 80019e6:	f001 ff35 	bl	8003854 <HAL_GetTick>
 80019ea:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
				if (setingAlarm >= NUMBER_ALARMS)
 80019ee:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d903      	bls.n	80019fe <main+0x8da>
					setingAlarm = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80019fc:	e004      	b.n	8001a08 <main+0x8e4>
				else
					setingAlarm++;
 80019fe:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001a02:	3301      	adds	r3, #1
 8001a04:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			}
			if (BT_Minus.isClick()) {
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fe01 	bl	8000614 <_ZN9MexButton7isClickEv>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <main+0x916>
				timer = HAL_GetTick();
 8001a18:	f001 ff1c 	bl	8003854 <HAL_GetTick>
 8001a1c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
				if (setingAlarm <= 0)
 8001a20:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <main+0x90c>
					setingAlarm = NUMBER_ALARMS;
 8001a28:	2309      	movs	r3, #9
 8001a2a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8001a2e:	e004      	b.n	8001a3a <main+0x916>
				else
					setingAlarm--;
 8001a30:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001a34:	3b01      	subs	r3, #1
 8001a36:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			}
			if (BT_Set.isClick()) {
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fde8 	bl	8000614 <_ZN9MexButton7isClickEv>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d052      	beq.n	8001af0 <main+0x9cc>
				if (0 == setingAlarm) {
 8001a4a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d123      	bne.n	8001a9a <main+0x976>
					excited = false;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
					alarmed = false;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
					changes = true;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
					player.Volume(0);
 8001a64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fc09 	bl	8000282 <_ZN8DFPlayer6VolumeEh>
					player.Pause();
 8001a70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fbdd 	bl	8000234 <_ZN8DFPlayer5PauseEv>
					led_set_all_RGB((RGB_t ) { 0, 0, 0 });
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001a8c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001a90:	f001 fac8 	bl	8003024 <_Z15led_set_all_RGB5RGB_t>
					led_render();
 8001a94:	f001 fade 	bl	8003054 <_Z10led_renderv>
 8001a98:	e018      	b.n	8001acc <main+0x9a8>
				} else {
					nowAlarm = alarms[setingAlarm - 1];
 8001a9a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001a9e:	1e5a      	subs	r2, r3, #1
 8001aa0:	493f      	ldr	r1, [pc, #252]	; (8001ba0 <main+0xa7c>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	18ca      	adds	r2, r1, r3
 8001aaa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001aae:	8811      	ldrh	r1, [r2, #0]
 8001ab0:	7892      	ldrb	r2, [r2, #2]
 8001ab2:	8019      	strh	r1, [r3, #0]
 8001ab4:	709a      	strb	r2, [r3, #2]
					numberNowAlarm = setingAlarm - 1;
 8001ab6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
					excited = true;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
					changes = true;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				}
				mode = NORMAL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
				BT_Plus.resetStates();
 8001ad2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fdfa 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
				BT_Set.resetStates();
 8001adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fdf5 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
				BT_Minus.resetStates();
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fdf0 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
			}
			if (HAL_GetTick() - timer >= USER_INACTIVITY_TIME) {
 8001af0:	f001 feb0 	bl	8003854 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b00:	4293      	cmp	r3, r2
 8001b02:	bf8c      	ite	hi
 8001b04:	2301      	movhi	r3, #1
 8001b06:	2300      	movls	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f43f af40 	beq.w	8001990 <main+0x86c>
				mode = NORMAL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
		while (mode == CHOOSING_ALARM) {
 8001b16:	e73b      	b.n	8001990 <main+0x86c>
			}
		}

		while (mode == SET_ALARM) {
 8001b18:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	f040 83e4 	bne.w	80022ea <main+0x11c6>
			BT_Plus.tick();
 8001b22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fdff 	bl	800072a <_ZN9MexButton4tickEv>
			BT_Set.tick();
 8001b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fdfa 	bl	800072a <_ZN9MexButton4tickEv>
			BT_Minus.tick();
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fdf5 	bl	800072a <_ZN9MexButton4tickEv>
			if (BT_Plus.isClick()) {
 8001b40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fd65 	bl	8000614 <_ZN9MexButton7isClickEv>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d010      	beq.n	8001b72 <main+0xa4e>
				timer = HAL_GetTick();
 8001b50:	f001 fe80 	bl	8003854 <HAL_GetTick>
 8001b54:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
				if (setingAlarm >= NUMBER_ALARMS)
 8001b58:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d903      	bls.n	8001b68 <main+0xa44>
					setingAlarm = 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8001b66:	e004      	b.n	8001b72 <main+0xa4e>
				else
					setingAlarm++;
 8001b68:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			}
			if (BT_Minus.isClick()) {
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fd4c 	bl	8000614 <_ZN9MexButton7isClickEv>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d015      	beq.n	8001bae <main+0xa8a>
				timer = HAL_GetTick();
 8001b82:	f001 fe67 	bl	8003854 <HAL_GetTick>
 8001b86:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
				if (setingAlarm <= 1)
 8001b8a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d808      	bhi.n	8001ba4 <main+0xa80>
					setingAlarm = NUMBER_ALARMS;
 8001b92:	2309      	movs	r3, #9
 8001b94:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8001b98:	e009      	b.n	8001bae <main+0xa8a>
 8001b9a:	bf00      	nop
 8001b9c:	08007840 	.word	0x08007840
 8001ba0:	2000003c 	.word	0x2000003c
				else
					setingAlarm--;
 8001ba4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			}
			display.point(0);
 8001bae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe ffff 	bl	8000bb8 <_ZN14TM1637_Display5pointEb>
			display.displayInt(setingAlarm);
 8001bba:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f856 	bl	8000c78 <_ZN14TM1637_Display10displayIntEs>
			if (BT_Set.isClick()) {
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fd1f 	bl	8000614 <_ZN9MexButton7isClickEv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d09d      	beq.n	8001b18 <main+0x9f4>
				sets = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
				setsH = alarms[setingAlarm - 1].Hours;
 8001be2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	49dc      	ldr	r1, [pc, #880]	; (8001f5c <main+0xe38>)
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
				setsM = alarms[setingAlarm - 1].Minutes;
 8001bf8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	49d7      	ldr	r1, [pc, #860]	; (8001f5c <main+0xe38>)
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	440b      	add	r3, r1
 8001c08:	3301      	adds	r3, #1
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
				timer = HAL_GetTick();
 8001c10:	f001 fe20 	bl	8003854 <HAL_GetTick>
 8001c14:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
				while (true) {
					BT_Plus.tick();
 8001c18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fd84 	bl	800072a <_ZN9MexButton4tickEv>
					BT_Set.tick();
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fd7f 	bl	800072a <_ZN9MexButton4tickEv>
					BT_Minus.tick();
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fd7a 	bl	800072a <_ZN9MexButton4tickEv>
					display.point(1);
 8001c36:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe ffbb 	bl	8000bb8 <_ZN14TM1637_Display5pointEb>
					if (!on && HAL_GetTick() - setTimer >= 100) {
 8001c42:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <main+0xb40>
 8001c50:	f001 fe00 	bl	8003854 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b63      	cmp	r3, #99	; 0x63
 8001c5e:	d901      	bls.n	8001c64 <main+0xb40>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <main+0xb42>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <main+0xb54>
						on = 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
						setTimer = HAL_GetTick();
 8001c70:	f001 fdf0 	bl	8003854 <HAL_GetTick>
 8001c74:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
					}
					if (on && HAL_GetTick() - setTimer >= 500) {
 8001c78:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <main+0xb72>
 8001c80:	f001 fde8 	bl	8003854 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c90:	d301      	bcc.n	8001c96 <main+0xb72>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <main+0xb74>
 8001c96:	2300      	movs	r3, #0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <main+0xb86>
						on = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
						setTimer = HAL_GetTick();
 8001ca2:	f001 fdd7 	bl	8003854 <HAL_GetTick>
 8001ca6:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
					}
					if (on) {
 8001caa:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d02e      	beq.n	8001d10 <main+0xbec>
						display.display(setsH / 10, setsH % 10, setsM / 10,
 8001cb2:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001cb6:	4aaa      	ldr	r2, [pc, #680]	; (8001f60 <main+0xe3c>)
 8001cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	b2dc      	uxtb	r4, r3
 8001cc0:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 8001cc4:	4ba6      	ldr	r3, [pc, #664]	; (8001f60 <main+0xe3c>)
 8001cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cca:	08d9      	lsrs	r1, r3, #3
 8001ccc:	460b      	mov	r3, r1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	b2dd      	uxtb	r5, r3
 8001cd8:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001cdc:	4aa0      	ldr	r2, [pc, #640]	; (8001f60 <main+0xe3c>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	b2de      	uxtb	r6, r3
 8001ce6:	f897 213a 	ldrb.w	r2, [r7, #314]	; 0x13a
 8001cea:	4b9d      	ldr	r3, [pc, #628]	; (8001f60 <main+0xe3c>)
 8001cec:	fba3 1302 	umull	r1, r3, r3, r2
 8001cf0:	08d9      	lsrs	r1, r3, #3
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4633      	mov	r3, r6
 8001d06:	462a      	mov	r2, r5
 8001d08:	4621      	mov	r1, r4
 8001d0a:	f7fe feef 	bl	8000aec <_ZN14TM1637_Display7displayEhhhh>
 8001d0e:	e03d      	b.n	8001d8c <main+0xc68>
								setsM % 10);
					} else {
						if (sets == 0) {
 8001d10:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d11a      	bne.n	8001d4e <main+0xc2a>
							display.display(10, 10, setsM / 10, setsM % 10);
 8001d18:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001d1c:	4a90      	ldr	r2, [pc, #576]	; (8001f60 <main+0xe3c>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	08db      	lsrs	r3, r3, #3
 8001d24:	b2dc      	uxtb	r4, r3
 8001d26:	f897 213a 	ldrb.w	r2, [r7, #314]	; 0x13a
 8001d2a:	4b8d      	ldr	r3, [pc, #564]	; (8001f60 <main+0xe3c>)
 8001d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d30:	08d9      	lsrs	r1, r3, #3
 8001d32:	460b      	mov	r3, r1
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4623      	mov	r3, r4
 8001d46:	220a      	movs	r2, #10
 8001d48:	210a      	movs	r1, #10
 8001d4a:	f7fe fecf 	bl	8000aec <_ZN14TM1637_Display7displayEhhhh>
						}
						if (sets == 1) {
 8001d4e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d11a      	bne.n	8001d8c <main+0xc68>
							display.display(setsH / 10, setsH % 10, 10, 10);
 8001d56:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001d5a:	4a81      	ldr	r2, [pc, #516]	; (8001f60 <main+0xe3c>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	08db      	lsrs	r3, r3, #3
 8001d62:	b2dc      	uxtb	r4, r3
 8001d64:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 8001d68:	4b7d      	ldr	r3, [pc, #500]	; (8001f60 <main+0xe3c>)
 8001d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d6e:	08d9      	lsrs	r1, r3, #3
 8001d70:	460b      	mov	r3, r1
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001d80:	230a      	movs	r3, #10
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	230a      	movs	r3, #10
 8001d86:	4621      	mov	r1, r4
 8001d88:	f7fe feb0 	bl	8000aec <_ZN14TM1637_Display7displayEhhhh>
						}
					}
					if (sets == 0) {
 8001d8c:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f040 8086 	bne.w	8001ea2 <main+0xd7e>
						if (BT_Plus.isClick()) {
 8001d96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fc3a 	bl	8000614 <_ZN9MexButton7isClickEv>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d010      	beq.n	8001dc8 <main+0xca4>
							timer = HAL_GetTick();
 8001da6:	f001 fd55 	bl	8003854 <HAL_GetTick>
 8001daa:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
							if (setsH >= 23)
 8001dae:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001db2:	2b16      	cmp	r3, #22
 8001db4:	d903      	bls.n	8001dbe <main+0xc9a>
								setsH = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 8001dbc:	e004      	b.n	8001dc8 <main+0xca4>
							else
								setsH++;
 8001dbe:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
						}
						if (BT_Plus.isHold()
 8001dc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fc63 	bl	8000698 <_ZN9MexButton6isHoldEv>
 8001dd2:	4603      	mov	r3, r0
								&& HAL_GetTick() - scrollTimer >= 50) {
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d009      	beq.n	8001dec <main+0xcc8>
 8001dd8:	f001 fd3c 	bl	8003854 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b31      	cmp	r3, #49	; 0x31
 8001de6:	d901      	bls.n	8001dec <main+0xcc8>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <main+0xcca>
 8001dec:	2300      	movs	r3, #0
						if (BT_Plus.isHold()
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d014      	beq.n	8001e1c <main+0xcf8>
							timer = HAL_GetTick();
 8001df2:	f001 fd2f 	bl	8003854 <HAL_GetTick>
 8001df6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
							scrollTimer = HAL_GetTick();
 8001dfa:	f001 fd2b 	bl	8003854 <HAL_GetTick>
 8001dfe:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
							if (setsH >= 23)
 8001e02:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001e06:	2b16      	cmp	r3, #22
 8001e08:	d903      	bls.n	8001e12 <main+0xcee>
								setsH = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 8001e10:	e004      	b.n	8001e1c <main+0xcf8>
							else
								setsH++;
 8001e12:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001e16:	3301      	adds	r3, #1
 8001e18:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
						}
						if (BT_Minus.isClick()) {
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fbf7 	bl	8000614 <_ZN9MexButton7isClickEv>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <main+0xd2a>
							timer = HAL_GetTick();
 8001e2c:	f001 fd12 	bl	8003854 <HAL_GetTick>
 8001e30:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
							if (setsH <= 0)
 8001e34:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d103      	bne.n	8001e44 <main+0xd20>
								setsH = 23;
 8001e3c:	2317      	movs	r3, #23
 8001e3e:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 8001e42:	e004      	b.n	8001e4e <main+0xd2a>
							else
								setsH--;
 8001e44:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
						}
						if (BT_Minus.isHold()
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fc20 	bl	8000698 <_ZN9MexButton6isHoldEv>
 8001e58:	4603      	mov	r3, r0
								&& HAL_GetTick() - scrollTimer >= 50) {
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <main+0xd4e>
 8001e5e:	f001 fcf9 	bl	8003854 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b31      	cmp	r3, #49	; 0x31
 8001e6c:	d901      	bls.n	8001e72 <main+0xd4e>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <main+0xd50>
 8001e72:	2300      	movs	r3, #0
						if (BT_Minus.isHold()
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d014      	beq.n	8001ea2 <main+0xd7e>
							timer = HAL_GetTick();
 8001e78:	f001 fcec 	bl	8003854 <HAL_GetTick>
 8001e7c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
							scrollTimer = HAL_GetTick();
 8001e80:	f001 fce8 	bl	8003854 <HAL_GetTick>
 8001e84:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
							if (setsH <= 0)
 8001e88:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d103      	bne.n	8001e98 <main+0xd74>
								setsH = 23;
 8001e90:	2317      	movs	r3, #23
 8001e92:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 8001e96:	e004      	b.n	8001ea2 <main+0xd7e>
							else
								setsH--;
 8001e98:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
						}
					}
					if (sets == 1) {
 8001ea2:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	f040 808b 	bne.w	8001fc2 <main+0xe9e>
						if (BT_Plus.isClick()) {
 8001eac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fbaf 	bl	8000614 <_ZN9MexButton7isClickEv>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <main+0xdba>
							timer = HAL_GetTick();
 8001ebc:	f001 fcca 	bl	8003854 <HAL_GetTick>
 8001ec0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
							if (setsM >= 59)
 8001ec4:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001ec8:	2b3a      	cmp	r3, #58	; 0x3a
 8001eca:	d903      	bls.n	8001ed4 <main+0xdb0>
								setsM = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 8001ed2:	e004      	b.n	8001ede <main+0xdba>
							else
								setsM++;
 8001ed4:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
						}
						if (BT_Plus.isHold()
 8001ede:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fbd8 	bl	8000698 <_ZN9MexButton6isHoldEv>
 8001ee8:	4603      	mov	r3, r0
								&& HAL_GetTick() - scrollTimer >= 100) {
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <main+0xdde>
 8001eee:	f001 fcb1 	bl	8003854 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b63      	cmp	r3, #99	; 0x63
 8001efc:	d901      	bls.n	8001f02 <main+0xdde>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <main+0xde0>
 8001f02:	2300      	movs	r3, #0
						if (BT_Plus.isHold()
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d014      	beq.n	8001f32 <main+0xe0e>
							timer = HAL_GetTick();
 8001f08:	f001 fca4 	bl	8003854 <HAL_GetTick>
 8001f0c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
							scrollTimer = HAL_GetTick();
 8001f10:	f001 fca0 	bl	8003854 <HAL_GetTick>
 8001f14:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
							if (setsM >= 59)
 8001f18:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001f1c:	2b3a      	cmp	r3, #58	; 0x3a
 8001f1e:	d903      	bls.n	8001f28 <main+0xe04>
								setsM = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 8001f26:	e004      	b.n	8001f32 <main+0xe0e>
							else
								setsM++;
 8001f28:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
						}
						if (BT_Minus.isClick()) {
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb6c 	bl	8000614 <_ZN9MexButton7isClickEv>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d015      	beq.n	8001f6e <main+0xe4a>
							timer = HAL_GetTick();
 8001f42:	f001 fc87 	bl	8003854 <HAL_GetTick>
 8001f46:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
							if (setsM <= 0)
 8001f4a:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d108      	bne.n	8001f64 <main+0xe40>
								setsM = 59;
 8001f52:	233b      	movs	r3, #59	; 0x3b
 8001f54:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 8001f58:	e009      	b.n	8001f6e <main+0xe4a>
 8001f5a:	bf00      	nop
 8001f5c:	2000003c 	.word	0x2000003c
 8001f60:	cccccccd 	.word	0xcccccccd
							else
								setsM--;
 8001f64:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
						}
						if (BT_Minus.isHold()
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fb90 	bl	8000698 <_ZN9MexButton6isHoldEv>
 8001f78:	4603      	mov	r3, r0
								&& HAL_GetTick() - scrollTimer >= 100) {
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <main+0xe6e>
 8001f7e:	f001 fc69 	bl	8003854 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b63      	cmp	r3, #99	; 0x63
 8001f8c:	d901      	bls.n	8001f92 <main+0xe6e>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <main+0xe70>
 8001f92:	2300      	movs	r3, #0
						if (BT_Minus.isHold()
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d014      	beq.n	8001fc2 <main+0xe9e>
							timer = HAL_GetTick();
 8001f98:	f001 fc5c 	bl	8003854 <HAL_GetTick>
 8001f9c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
							scrollTimer = HAL_GetTick();
 8001fa0:	f001 fc58 	bl	8003854 <HAL_GetTick>
 8001fa4:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
							if (setsM <= 0)
 8001fa8:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d103      	bne.n	8001fb8 <main+0xe94>
								setsM = 59;
 8001fb0:	233b      	movs	r3, #59	; 0x3b
 8001fb2:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 8001fb6:	e004      	b.n	8001fc2 <main+0xe9e>
							else
								setsM--;
 8001fb8:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
						}
					}
					if (sets == 2) {
 8001fc2:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	f040 80f0 	bne.w	80021ac <main+0x1088>
						setsDelay = alarms[setingAlarm - 1].Seconds;
 8001fcc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	49db      	ldr	r1, [pc, #876]	; (8002340 <main+0x121c>)
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3302      	adds	r3, #2
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
						while (true) {
							BT_Plus.tick();
 8001fe4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fb9e 	bl	800072a <_ZN9MexButton4tickEv>
							BT_Set.tick();
 8001fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fb99 	bl	800072a <_ZN9MexButton4tickEv>
							BT_Minus.tick();
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fb94 	bl	800072a <_ZN9MexButton4tickEv>
							display.point(0);
 8002002:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fdd5 	bl	8000bb8 <_ZN14TM1637_Display5pointEb>
							if (BT_Plus.isClick()) {
 800200e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fafe 	bl	8000614 <_ZN9MexButton7isClickEv>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <main+0xf1c>
								timer = HAL_GetTick();
 800201e:	f001 fc19 	bl	8003854 <HAL_GetTick>
 8002022:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
								if (setsDelay >= 59) {
 8002026:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800202a:	2b3a      	cmp	r3, #58	; 0x3a
 800202c:	d903      	bls.n	8002036 <main+0xf12>
									setsDelay = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 8002034:	e004      	b.n	8002040 <main+0xf1c>
								} else {
									setsDelay++;
 8002036:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800203a:	3301      	adds	r3, #1
 800203c:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
								}
							}
							if (BT_Plus.isHold()
 8002040:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fb27 	bl	8000698 <_ZN9MexButton6isHoldEv>
 800204a:	4603      	mov	r3, r0
									&& HAL_GetTick() - scrollTimer >= 50) {
 800204c:	2b00      	cmp	r3, #0
 800204e:	d009      	beq.n	8002064 <main+0xf40>
 8002050:	f001 fc00 	bl	8003854 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b31      	cmp	r3, #49	; 0x31
 800205e:	d901      	bls.n	8002064 <main+0xf40>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <main+0xf42>
 8002064:	2300      	movs	r3, #0
							if (BT_Plus.isHold()
 8002066:	2b00      	cmp	r3, #0
 8002068:	d014      	beq.n	8002094 <main+0xf70>
								timer = HAL_GetTick();
 800206a:	f001 fbf3 	bl	8003854 <HAL_GetTick>
 800206e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
								scrollTimer = HAL_GetTick();
 8002072:	f001 fbef 	bl	8003854 <HAL_GetTick>
 8002076:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
								if (setsDelay >= 59) {
 800207a:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800207e:	2b3a      	cmp	r3, #58	; 0x3a
 8002080:	d903      	bls.n	800208a <main+0xf66>
									setsDelay = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 8002088:	e004      	b.n	8002094 <main+0xf70>
								} else {
									setsDelay++;
 800208a:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800208e:	3301      	adds	r3, #1
 8002090:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
								}
							}
							if (BT_Minus.isClick()) {
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fabb 	bl	8000614 <_ZN9MexButton7isClickEv>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d010      	beq.n	80020c6 <main+0xfa2>
								timer = HAL_GetTick();
 80020a4:	f001 fbd6 	bl	8003854 <HAL_GetTick>
 80020a8:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
								if (setsDelay <= 0) {
 80020ac:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d103      	bne.n	80020bc <main+0xf98>
									setsDelay = 59;
 80020b4:	233b      	movs	r3, #59	; 0x3b
 80020b6:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 80020ba:	e004      	b.n	80020c6 <main+0xfa2>
								} else {
									setsDelay--;
 80020bc:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80020c0:	3b01      	subs	r3, #1
 80020c2:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
								}
							}
							if (BT_Minus.isHold()
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fae4 	bl	8000698 <_ZN9MexButton6isHoldEv>
 80020d0:	4603      	mov	r3, r0
									&& HAL_GetTick() - scrollTimer >= 50) {
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <main+0xfc6>
 80020d6:	f001 fbbd 	bl	8003854 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b31      	cmp	r3, #49	; 0x31
 80020e4:	d901      	bls.n	80020ea <main+0xfc6>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <main+0xfc8>
 80020ea:	2300      	movs	r3, #0
							if (BT_Minus.isHold()
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d014      	beq.n	800211a <main+0xff6>
								timer = HAL_GetTick();
 80020f0:	f001 fbb0 	bl	8003854 <HAL_GetTick>
 80020f4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
								scrollTimer = HAL_GetTick();
 80020f8:	f001 fbac 	bl	8003854 <HAL_GetTick>
 80020fc:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
								if (setsDelay <= 0) {
 8002100:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <main+0xfec>
									setsDelay = 59;
 8002108:	233b      	movs	r3, #59	; 0x3b
 800210a:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 800210e:	e004      	b.n	800211a <main+0xff6>
								} else {
									setsDelay--;
 8002110:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8002114:	3b01      	subs	r3, #1
 8002116:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
								}
							}
							if (BT_Set.isClick()) {
 800211a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa78 	bl	8000614 <_ZN9MexButton7isClickEv>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d026      	beq.n	8002178 <main+0x1054>
								timer = HAL_GetTick();
 800212a:	f001 fb93 	bl	8003854 <HAL_GetTick>
 800212e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
								if (alarms[setingAlarm - 1].Seconds
 8002132:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	4981      	ldr	r1, [pc, #516]	; (8002340 <main+0x121c>)
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	440b      	add	r3, r1
 8002142:	3302      	adds	r3, #2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	f897 2138 	ldrb.w	r2, [r7, #312]	; 0x138
 800214a:	429a      	cmp	r2, r3
 800214c:	d00e      	beq.n	800216c <main+0x1048>
										!= setsDelay) {
									alarms[setingAlarm - 1].Seconds = setsDelay;
 800214e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002152:	1e5a      	subs	r2, r3, #1
 8002154:	497a      	ldr	r1, [pc, #488]	; (8002340 <main+0x121c>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	440b      	add	r3, r1
 800215e:	3302      	adds	r3, #2
 8002160:	f897 2138 	ldrb.w	r2, [r7, #312]	; 0x138
 8002164:	701a      	strb	r2, [r3, #0]
									changes = true;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
								}
								sets++;
 800216c:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8002170:	3301      	adds	r3, #1
 8002172:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
								break;
 8002176:	e019      	b.n	80021ac <main+0x1088>
							}
							if (HAL_GetTick() - timer >= USER_INACTIVITY_TIME) {
 8002178:	f001 fb6c 	bl	8003854 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f242 720f 	movw	r2, #9999	; 0x270f
 8002188:	4293      	cmp	r3, r2
 800218a:	bf8c      	ite	hi
 800218c:	2301      	movhi	r3, #1
 800218e:	2300      	movls	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <main+0x1086>
								break;
							}
							display.displayInt(setsDelay);
 8002196:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800219a:	b21a      	sxth	r2, r3
 800219c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fd68 	bl	8000c78 <_ZN14TM1637_Display10displayIntEs>
							BT_Plus.tick();
 80021a8:	e71c      	b.n	8001fe4 <main+0xec0>
								break;
 80021aa:	bf00      	nop

						}
					}
					if (BT_Set.isHold() && sets < 2) {
 80021ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fa71 	bl	8000698 <_ZN9MexButton6isHoldEv>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <main+0x10a4>
 80021bc:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d801      	bhi.n	80021c8 <main+0x10a4>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <main+0x10a6>
 80021c8:	2300      	movs	r3, #0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <main+0x10ba>
						setsM = nowTime.Minutes;
 80021ce:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80021d2:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
						setsH = nowTime.Hours;
 80021d6:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 80021da:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
					}
					if (BT_Set.isClick()) {
 80021de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fa16 	bl	8000614 <_ZN9MexButton7isClickEv>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <main+0x10dc>
						timer = HAL_GetTick();
 80021ee:	f001 fb31 	bl	8003854 <HAL_GetTick>
 80021f2:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
						sets++;
 80021f6:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80021fa:	3301      	adds	r3, #1
 80021fc:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
					}

					if (sets >= 3) {
 8002200:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8002204:	2b02      	cmp	r3, #2
 8002206:	d95c      	bls.n	80022c2 <main+0x119e>
						if (alarms[setingAlarm - 1].Hours != setsH
 8002208:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	494c      	ldr	r1, [pc, #304]	; (8002340 <main+0x121c>)
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	440b      	add	r3, r1
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 800221e:	429a      	cmp	r2, r3
 8002220:	d10d      	bne.n	800223e <main+0x111a>
								|| alarms[setingAlarm - 1].Minutes != setsM) {
 8002222:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002226:	1e5a      	subs	r2, r3, #1
 8002228:	4945      	ldr	r1, [pc, #276]	; (8002340 <main+0x121c>)
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	440b      	add	r3, r1
 8002232:	3301      	adds	r3, #1
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	f897 213a 	ldrb.w	r2, [r7, #314]	; 0x13a
 800223a:	429a      	cmp	r2, r3
 800223c:	d02e      	beq.n	800229c <main+0x1178>
							alarms[setingAlarm - 1].Hours = setsH;
 800223e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	493e      	ldr	r1, [pc, #248]	; (8002340 <main+0x121c>)
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	440b      	add	r3, r1
 800224e:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 8002252:	701a      	strb	r2, [r3, #0]
							alarms[setingAlarm - 1].Minutes = setsM;
 8002254:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	4939      	ldr	r1, [pc, #228]	; (8002340 <main+0x121c>)
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	440b      	add	r3, r1
 8002264:	3301      	adds	r3, #1
 8002266:	f897 213a 	ldrb.w	r2, [r7, #314]	; 0x13a
 800226a:	701a      	strb	r2, [r3, #0]
							if (setingAlarm - 1 == numberNowAlarm) {
 800226c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8002276:	429a      	cmp	r2, r3
 8002278:	d10d      	bne.n	8002296 <main+0x1172>
								nowAlarm = alarms[setingAlarm - 1];
 800227a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	492f      	ldr	r1, [pc, #188]	; (8002340 <main+0x121c>)
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	18ca      	adds	r2, r1, r3
 800228a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800228e:	8811      	ldrh	r1, [r2, #0]
 8002290:	7892      	ldrb	r2, [r2, #2]
 8002292:	8019      	strh	r1, [r3, #0]
 8002294:	709a      	strb	r2, [r3, #2]
							}
							changes = true;
 8002296:	2301      	movs	r3, #1
 8002298:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						}
						BT_Plus.resetStates();
 800229c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fa15 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
						BT_Set.resetStates();
 80022a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fa10 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
						BT_Minus.resetStates();
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fa0b 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
						mode = NORMAL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
						break;
 80022c0:	e012      	b.n	80022e8 <main+0x11c4>
					}
					if (HAL_GetTick() - timer >= USER_INACTIVITY_TIME) {
 80022c2:	f001 fac7 	bl	8003854 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80022d2:	4293      	cmp	r3, r2
 80022d4:	bf8c      	ite	hi
 80022d6:	2301      	movhi	r3, #1
 80022d8:	2300      	movls	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f43f ac9b 	beq.w	8001c18 <main+0xaf4>
						mode = NORMAL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
		while (mode == SET_ALARM) {
 80022e8:	e416      	b.n	8001b18 <main+0x9f4>

				}
			}
		}

		while (mode == SET_CLOCK) {
 80022ea:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	f47f a86d 	bne.w	80013ce <main+0x2aa>
			BT_Plus.tick();
 80022f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fa16 	bl	800072a <_ZN9MexButton4tickEv>
			BT_Set.tick();
 80022fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fa11 	bl	800072a <_ZN9MexButton4tickEv>
			BT_Minus.tick();
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fa0c 	bl	800072a <_ZN9MexButton4tickEv>
			display.point(1);
 8002312:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fc4d 	bl	8000bb8 <_ZN14TM1637_Display5pointEb>
			if (!on && HAL_GetTick() - setTimer >= 100) {
 800231e:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <main+0x1220>
 800232c:	f001 fa92 	bl	8003854 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b63      	cmp	r3, #99	; 0x63
 800233a:	d903      	bls.n	8002344 <main+0x1220>
 800233c:	2301      	movs	r3, #1
 800233e:	e002      	b.n	8002346 <main+0x1222>
 8002340:	2000003c 	.word	0x2000003c
 8002344:	2300      	movs	r3, #0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <main+0x1234>
				on = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
				setTimer = HAL_GetTick();
 8002350:	f001 fa80 	bl	8003854 <HAL_GetTick>
 8002354:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
			}
			if (on && HAL_GetTick() - setTimer >= 500) {
 8002358:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <main+0x1252>
 8002360:	f001 fa78 	bl	8003854 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002370:	d301      	bcc.n	8002376 <main+0x1252>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <main+0x1254>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <main+0x1266>
				on = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
				setTimer = HAL_GetTick();
 8002382:	f001 fa67 	bl	8003854 <HAL_GetTick>
 8002386:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
			}
			if (on) {
 800238a:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02e      	beq.n	80023f0 <main+0x12cc>
				display.display(setsH / 10, setsH % 10, setsM / 10, setsM % 10);
 8002392:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8002396:	4abe      	ldr	r2, [pc, #760]	; (8002690 <main+0x156c>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	b2dc      	uxtb	r4, r3
 80023a0:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 80023a4:	4bba      	ldr	r3, [pc, #744]	; (8002690 <main+0x156c>)
 80023a6:	fba3 1302 	umull	r1, r3, r3, r2
 80023aa:	08d9      	lsrs	r1, r3, #3
 80023ac:	460b      	mov	r3, r1
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	b2dd      	uxtb	r5, r3
 80023b8:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80023bc:	4ab4      	ldr	r2, [pc, #720]	; (8002690 <main+0x156c>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	b2de      	uxtb	r6, r3
 80023c6:	f897 213a 	ldrb.w	r2, [r7, #314]	; 0x13a
 80023ca:	4bb1      	ldr	r3, [pc, #708]	; (8002690 <main+0x156c>)
 80023cc:	fba3 1302 	umull	r1, r3, r3, r2
 80023d0:	08d9      	lsrs	r1, r3, #3
 80023d2:	460b      	mov	r3, r1
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4633      	mov	r3, r6
 80023e6:	462a      	mov	r2, r5
 80023e8:	4621      	mov	r1, r4
 80023ea:	f7fe fb7f 	bl	8000aec <_ZN14TM1637_Display7displayEhhhh>
 80023ee:	e03d      	b.n	800246c <main+0x1348>
			} else {
				if (sets == 0) {
 80023f0:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d11a      	bne.n	800242e <main+0x130a>
					display.display(10, 10, setsM / 10, setsM % 10);
 80023f8:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80023fc:	4aa4      	ldr	r2, [pc, #656]	; (8002690 <main+0x156c>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	08db      	lsrs	r3, r3, #3
 8002404:	b2dc      	uxtb	r4, r3
 8002406:	f897 213a 	ldrb.w	r2, [r7, #314]	; 0x13a
 800240a:	4ba1      	ldr	r3, [pc, #644]	; (8002690 <main+0x156c>)
 800240c:	fba3 1302 	umull	r1, r3, r3, r2
 8002410:	08d9      	lsrs	r1, r3, #3
 8002412:	460b      	mov	r3, r1
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4623      	mov	r3, r4
 8002426:	220a      	movs	r2, #10
 8002428:	210a      	movs	r1, #10
 800242a:	f7fe fb5f 	bl	8000aec <_ZN14TM1637_Display7displayEhhhh>
				}
				if (sets == 1) {
 800242e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8002432:	2b01      	cmp	r3, #1
 8002434:	d11a      	bne.n	800246c <main+0x1348>
					display.display(setsH / 10, setsH % 10, 10, 10);
 8002436:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800243a:	4a95      	ldr	r2, [pc, #596]	; (8002690 <main+0x156c>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	08db      	lsrs	r3, r3, #3
 8002442:	b2dc      	uxtb	r4, r3
 8002444:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 8002448:	4b91      	ldr	r3, [pc, #580]	; (8002690 <main+0x156c>)
 800244a:	fba3 1302 	umull	r1, r3, r3, r2
 800244e:	08d9      	lsrs	r1, r3, #3
 8002450:	460b      	mov	r3, r1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	b2da      	uxtb	r2, r3
 800245c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8002460:	230a      	movs	r3, #10
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	230a      	movs	r3, #10
 8002466:	4621      	mov	r1, r4
 8002468:	f7fe fb40 	bl	8000aec <_ZN14TM1637_Display7displayEhhhh>
				}
			}
			if (sets == 0) {
 800246c:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 8086 	bne.w	8002582 <main+0x145e>
				if (BT_Plus.isClick()) {
 8002476:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe f8ca 	bl	8000614 <_ZN9MexButton7isClickEv>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <main+0x1384>
					timer = HAL_GetTick();
 8002486:	f001 f9e5 	bl	8003854 <HAL_GetTick>
 800248a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
					if (setsH >= 23)
 800248e:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8002492:	2b16      	cmp	r3, #22
 8002494:	d903      	bls.n	800249e <main+0x137a>
						setsH = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 800249c:	e004      	b.n	80024a8 <main+0x1384>
					else
						setsH++;
 800249e:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 80024a2:	3301      	adds	r3, #1
 80024a4:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
				}
				if (BT_Plus.isHold() && HAL_GetTick() - scrollTimer >= 50) {
 80024a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f8f3 	bl	8000698 <_ZN9MexButton6isHoldEv>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <main+0x13a8>
 80024b8:	f001 f9cc 	bl	8003854 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b31      	cmp	r3, #49	; 0x31
 80024c6:	d901      	bls.n	80024cc <main+0x13a8>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <main+0x13aa>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d014      	beq.n	80024fc <main+0x13d8>
					timer = HAL_GetTick();
 80024d2:	f001 f9bf 	bl	8003854 <HAL_GetTick>
 80024d6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
					scrollTimer = HAL_GetTick();
 80024da:	f001 f9bb 	bl	8003854 <HAL_GetTick>
 80024de:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
					if (setsH >= 23)
 80024e2:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 80024e6:	2b16      	cmp	r3, #22
 80024e8:	d903      	bls.n	80024f2 <main+0x13ce>
						setsH = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 80024f0:	e004      	b.n	80024fc <main+0x13d8>
					else
						setsH++;
 80024f2:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 80024f6:	3301      	adds	r3, #1
 80024f8:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
				}
				if (BT_Minus.isClick()) {
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f887 	bl	8000614 <_ZN9MexButton7isClickEv>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d010      	beq.n	800252e <main+0x140a>
					timer = HAL_GetTick();
 800250c:	f001 f9a2 	bl	8003854 <HAL_GetTick>
 8002510:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
					if (setsH <= 0)
 8002514:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <main+0x1400>
						setsH = 23;
 800251c:	2317      	movs	r3, #23
 800251e:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 8002522:	e004      	b.n	800252e <main+0x140a>
					else
						setsH--;
 8002524:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8002528:	3b01      	subs	r3, #1
 800252a:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
				}
				if (BT_Minus.isHold() && HAL_GetTick() - scrollTimer >= 50) {
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe f8b0 	bl	8000698 <_ZN9MexButton6isHoldEv>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <main+0x142e>
 800253e:	f001 f989 	bl	8003854 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b31      	cmp	r3, #49	; 0x31
 800254c:	d901      	bls.n	8002552 <main+0x142e>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <main+0x1430>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d014      	beq.n	8002582 <main+0x145e>
					timer = HAL_GetTick();
 8002558:	f001 f97c 	bl	8003854 <HAL_GetTick>
 800255c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
					scrollTimer = HAL_GetTick();
 8002560:	f001 f978 	bl	8003854 <HAL_GetTick>
 8002564:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
					if (setsH <= 0)
 8002568:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <main+0x1454>
						setsH = 23;
 8002570:	2317      	movs	r3, #23
 8002572:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 8002576:	e004      	b.n	8002582 <main+0x145e>
					else
						setsH--;
 8002578:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800257c:	3b01      	subs	r3, #1
 800257e:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
				}
			}
			if (sets == 1) {
 8002582:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8002586:	2b01      	cmp	r3, #1
 8002588:	f040 8089 	bne.w	800269e <main+0x157a>
				if (BT_Plus.isClick()) {
 800258c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe f83f 	bl	8000614 <_ZN9MexButton7isClickEv>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d010      	beq.n	80025be <main+0x149a>
					timer = HAL_GetTick();
 800259c:	f001 f95a 	bl	8003854 <HAL_GetTick>
 80025a0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
					if (setsM >= 59)
 80025a4:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80025a8:	2b3a      	cmp	r3, #58	; 0x3a
 80025aa:	d903      	bls.n	80025b4 <main+0x1490>
						setsM = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 80025b2:	e004      	b.n	80025be <main+0x149a>
					else
						setsM++;
 80025b4:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80025b8:	3301      	adds	r3, #1
 80025ba:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
				}
				if (BT_Plus.isHold() && HAL_GetTick() - scrollTimer >= 100) {
 80025be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe f868 	bl	8000698 <_ZN9MexButton6isHoldEv>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <main+0x14be>
 80025ce:	f001 f941 	bl	8003854 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b63      	cmp	r3, #99	; 0x63
 80025dc:	d901      	bls.n	80025e2 <main+0x14be>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <main+0x14c0>
 80025e2:	2300      	movs	r3, #0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d014      	beq.n	8002612 <main+0x14ee>
					timer = HAL_GetTick();
 80025e8:	f001 f934 	bl	8003854 <HAL_GetTick>
 80025ec:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
					scrollTimer = HAL_GetTick();
 80025f0:	f001 f930 	bl	8003854 <HAL_GetTick>
 80025f4:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
					if (setsM >= 59)
 80025f8:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80025fc:	2b3a      	cmp	r3, #58	; 0x3a
 80025fe:	d903      	bls.n	8002608 <main+0x14e4>
						setsM = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 8002606:	e004      	b.n	8002612 <main+0x14ee>
					else
						setsM++;
 8002608:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800260c:	3301      	adds	r3, #1
 800260e:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
				}
				if (BT_Minus.isClick()) {
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd fffc 	bl	8000614 <_ZN9MexButton7isClickEv>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d010      	beq.n	8002644 <main+0x1520>
					timer = HAL_GetTick();
 8002622:	f001 f917 	bl	8003854 <HAL_GetTick>
 8002626:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
					if (setsM <= 0)
 800262a:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <main+0x1516>
						setsM = 59;
 8002632:	233b      	movs	r3, #59	; 0x3b
 8002634:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 8002638:	e004      	b.n	8002644 <main+0x1520>
					else
						setsM--;
 800263a:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800263e:	3b01      	subs	r3, #1
 8002640:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
				}
				if (BT_Minus.isHold() && HAL_GetTick() - scrollTimer >= 100) {
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe f825 	bl	8000698 <_ZN9MexButton6isHoldEv>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <main+0x1544>
 8002654:	f001 f8fe 	bl	8003854 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b63      	cmp	r3, #99	; 0x63
 8002662:	d901      	bls.n	8002668 <main+0x1544>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <main+0x1546>
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d017      	beq.n	800269e <main+0x157a>
					timer = HAL_GetTick();
 800266e:	f001 f8f1 	bl	8003854 <HAL_GetTick>
 8002672:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
					scrollTimer = HAL_GetTick();
 8002676:	f001 f8ed 	bl	8003854 <HAL_GetTick>
 800267a:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
					if (setsM <= 0)
 800267e:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <main+0x1570>
						setsM = 59;
 8002686:	233b      	movs	r3, #59	; 0x3b
 8002688:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 800268c:	e007      	b.n	800269e <main+0x157a>
 800268e:	bf00      	nop
 8002690:	cccccccd 	.word	0xcccccccd
					else
						setsM--;
 8002694:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8002698:	3b01      	subs	r3, #1
 800269a:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
				}
			}
			if (BT_Set.isClick()) {
 800269e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ffb6 	bl	8000614 <_ZN9MexButton7isClickEv>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <main+0x159c>
				timer = HAL_GetTick();
 80026ae:	f001 f8d1 	bl	8003854 <HAL_GetTick>
 80026b2:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
				sets++;
 80026b6:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80026ba:	3301      	adds	r3, #1
 80026bc:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
			}
			if (sets >= 2) {
 80026c0:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d928      	bls.n	800271a <main+0x15f6>
				RTC_TimeTypeDef setingTime = { 0 };
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	2100      	movs	r1, #0
 80026cc:	460a      	mov	r2, r1
 80026ce:	801a      	strh	r2, [r3, #0]
 80026d0:	460a      	mov	r2, r1
 80026d2:	709a      	strb	r2, [r3, #2]
				setingTime.Hours = setsH;
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 80026da:	701a      	strb	r2, [r3, #0]
				setingTime.Minutes = setsM;
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	f897 213a 	ldrb.w	r2, [r7, #314]	; 0x13a
 80026e2:	705a      	strb	r2, [r3, #1]
				setingTime.Seconds = 0;
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	709a      	strb	r2, [r3, #2]
				HAL_RTC_SetTime(&hrtc, &setingTime, RTC_FORMAT_BIN);
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	4619      	mov	r1, r3
 80026f0:	4815      	ldr	r0, [pc, #84]	; (8002748 <main+0x1624>)
 80026f2:	f002 fe8f 	bl	8005414 <HAL_RTC_SetTime>
				BT_Plus.resetStates();
 80026f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd ffe8 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
				BT_Set.resetStates();
 8002700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ffe3 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
				BT_Minus.resetStates();
 800270a:	f107 030c 	add.w	r3, r7, #12
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ffde 	bl	80006d0 <_ZN9MexButton11resetStatesEv>
				mode = NORMAL;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
			}
			if (HAL_GetTick() - timer >= USER_INACTIVITY_TIME) {
 800271a:	f001 f89b 	bl	8003854 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f242 720f 	movw	r2, #9999	; 0x270f
 800272a:	4293      	cmp	r3, r2
 800272c:	bf8c      	ite	hi
 800272e:	2301      	movhi	r3, #1
 8002730:	2300      	movls	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	f43f add8 	beq.w	80022ea <main+0x11c6>
				mode = NORMAL;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
				break;
 8002740:	bf00      	nop
		}

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
 8002742:	f7fe be44 	b.w	80013ce <main+0x2aa>
 8002746:	bf00      	nop
 8002748:	20000064 	.word	0x20000064

0800274c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b094      	sub	sp, #80	; 0x50
 8002750:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002756:	2228      	movs	r2, #40	; 0x28
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f005 f858 	bl	8007810 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800277c:	2306      	movs	r3, #6
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002780:	2301      	movs	r3, #1
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002784:	2301      	movs	r3, #1
 8002786:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002788:	2310      	movs	r3, #16
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800278c:	2302      	movs	r3, #2
 800278e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002790:	2300      	movs	r3, #0
 8002792:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002794:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002798:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800279a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 f80e 	bl	80047c0 <HAL_RCC_OscConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <_Z18SystemClock_Configv+0x6c>
		Error_Handler();
 80027b4:	f000 fafa 	bl	8002dac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80027b8:	230f      	movs	r3, #15
 80027ba:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027bc:	2302      	movs	r3, #2
 80027be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c8:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	2101      	movs	r1, #1
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 fa73 	bl	8004cc0 <HAL_RCC_ClockConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 80027ea:	f000 fadf 	bl	8002dac <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027ee:	2301      	movs	r3, #1
 80027f0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f6:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 fbfa 	bl	8004ff4 <HAL_RCCEx_PeriphCLKConfig>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <_Z18SystemClock_Configv+0xc8>
		Error_Handler();
 8002810:	f000 facc 	bl	8002dac <Error_Handler>
	}
}
 8002814:	bf00      	nop
 8002816:	3750      	adds	r7, #80	; 0x50
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_ZL11MX_CRC_Initv>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_ZL11MX_CRC_Initv+0x28>)
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <_ZL11MX_CRC_Initv+0x2c>)
 8002824:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8002826:	4807      	ldr	r0, [pc, #28]	; (8002844 <_ZL11MX_CRC_Initv+0x28>)
 8002828:	f001 f94f 	bl	8003aca <HAL_CRC_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	bf14      	ite	ne
 8002832:	2301      	movne	r3, #1
 8002834:	2300      	moveq	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <_ZL11MX_CRC_Initv+0x24>
		Error_Handler();
 800283c:	f000 fab6 	bl	8002dac <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	2000005c 	.word	0x2000005c
 8002848:	40023000 	.word	0x40023000

0800284c <_ZL11MX_RTC_Initv>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <_ZL11MX_RTC_Initv+0x38>)
 8002852:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <_ZL11MX_RTC_Initv+0x3c>)
 8002854:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <_ZL11MX_RTC_Initv+0x38>)
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <_ZL11MX_RTC_Initv+0x38>)
 8002860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002864:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8002866:	4807      	ldr	r0, [pc, #28]	; (8002884 <_ZL11MX_RTC_Initv+0x38>)
 8002868:	f002 fd3e 	bl	80052e8 <HAL_RTC_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf14      	ite	ne
 8002872:	2301      	movne	r3, #1
 8002874:	2300      	moveq	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <_ZL11MX_RTC_Initv+0x34>
		Error_Handler();
 800287c:	f000 fa96 	bl	8002dac <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000064 	.word	0x20000064
 8002888:	40002800 	.word	0x40002800

0800288c <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b096      	sub	sp, #88	; 0x58
 8002890:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002892:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80028a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80028aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	615a      	str	r2, [r3, #20]
 80028bc:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2220      	movs	r2, #32
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 ffa3 	bl	8007810 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80028ca:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 80028cc:	4a4d      	ldr	r2, [pc, #308]	; (8002a04 <_ZL12MX_TIM1_Initv+0x178>)
 80028ce:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80028d0:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d6:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 60 - 1;
 80028dc:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 80028de:	223b      	movs	r2, #59	; 0x3b
 80028e0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80028e8:	4b45      	ldr	r3, [pc, #276]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ee:	4b44      	ldr	r3, [pc, #272]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80028f4:	4842      	ldr	r0, [pc, #264]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 80028f6:	f003 f99f 	bl	8005c38 <HAL_TIM_Base_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <_ZL12MX_TIM1_Initv+0x82>
		Error_Handler();
 800290a:	f000 fa4f 	bl	8002dac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800290e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002912:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002914:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002918:	4619      	mov	r1, r3
 800291a:	4839      	ldr	r0, [pc, #228]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 800291c:	f003 fd8c 	bl	8006438 <HAL_TIM_ConfigClockSource>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <_ZL12MX_TIM1_Initv+0xa8>
		Error_Handler();
 8002930:	f000 fa3c 	bl	8002dac <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002934:	4832      	ldr	r0, [pc, #200]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 8002936:	f003 fa19 	bl	8005d6c <HAL_TIM_PWM_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <_ZL12MX_TIM1_Initv+0xc2>
		Error_Handler();
 800294a:	f000 fa2f 	bl	8002dac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002956:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800295a:	4619      	mov	r1, r3
 800295c:	4828      	ldr	r0, [pc, #160]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 800295e:	f004 f9ad 	bl	8006cbc <HAL_TIMEx_MasterConfigSynchronization>
 8002962:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <_ZL12MX_TIM1_Initv+0xea>
		Error_Handler();
 8002972:	f000 fa1b 	bl	8002dac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002976:	2360      	movs	r3, #96	; 0x60
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800297e:	2300      	movs	r3, #0
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002982:	2300      	movs	r3, #0
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002996:	2200      	movs	r2, #0
 8002998:	4619      	mov	r1, r3
 800299a:	4819      	ldr	r0, [pc, #100]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 800299c:	f003 fc8e 	bl	80062bc <HAL_TIM_PWM_ConfigChannel>
 80029a0:	4603      	mov	r3, r0
			!= HAL_OK) {
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf14      	ite	ne
 80029a6:	2301      	movne	r3, #1
 80029a8:	2300      	moveq	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <_ZL12MX_TIM1_Initv+0x128>
		Error_Handler();
 80029b0:	f000 f9fc 	bl	8002dac <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029cc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	4619      	mov	r1, r3
 80029d6:	480a      	ldr	r0, [pc, #40]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 80029d8:	f004 f9ce 	bl	8006d78 <HAL_TIMEx_ConfigBreakDeadTime>
 80029dc:	4603      	mov	r3, r0
			!= HAL_OK) {
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <_ZL12MX_TIM1_Initv+0x164>
		Error_Handler();
 80029ec:	f000 f9de 	bl	8002dac <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <_ZL12MX_TIM1_Initv+0x174>)
 80029f2:	f000 fdc9 	bl	8003588 <HAL_TIM_MspPostInit>

}
 80029f6:	bf00      	nop
 80029f8:	3758      	adds	r7, #88	; 0x58
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000078 	.word	0x20000078
 8002a04:	40012c00 	.word	0x40012c00

08002a08 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002a0e:	f107 0320 	add.w	r3, r7, #32
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	611a      	str	r2, [r3, #16]
 8002a26:	615a      	str	r2, [r3, #20]
 8002a28:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <_ZL12MX_TIM2_Initv+0xcc>)
 8002a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a30:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <_ZL12MX_TIM2_Initv+0xcc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <_ZL12MX_TIM2_Initv+0xcc>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 6000;
 8002a3e:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <_ZL12MX_TIM2_Initv+0xcc>)
 8002a40:	f241 7270 	movw	r2, #6000	; 0x1770
 8002a44:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a46:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <_ZL12MX_TIM2_Initv+0xcc>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4c:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <_ZL12MX_TIM2_Initv+0xcc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002a52:	4820      	ldr	r0, [pc, #128]	; (8002ad4 <_ZL12MX_TIM2_Initv+0xcc>)
 8002a54:	f003 f98a 	bl	8005d6c <HAL_TIM_PWM_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	bf14      	ite	ne
 8002a5e:	2301      	movne	r3, #1
 8002a60:	2300      	moveq	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <_ZL12MX_TIM2_Initv+0x64>
		Error_Handler();
 8002a68:	f000 f9a0 	bl	8002dac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002a74:	f107 0320 	add.w	r3, r7, #32
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4816      	ldr	r0, [pc, #88]	; (8002ad4 <_ZL12MX_TIM2_Initv+0xcc>)
 8002a7c:	f004 f91e 	bl	8006cbc <HAL_TIMEx_MasterConfigSynchronization>
 8002a80:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf14      	ite	ne
 8002a86:	2301      	movne	r3, #1
 8002a88:	2300      	moveq	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <_ZL12MX_TIM2_Initv+0x8c>
		Error_Handler();
 8002a90:	f000 f98c 	bl	8002dac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a94:	2360      	movs	r3, #96	; 0x60
 8002a96:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 4000;
 8002a98:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002a9c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <_ZL12MX_TIM2_Initv+0xcc>)
 8002aae:	f003 fc05 	bl	80062bc <HAL_TIM_PWM_ConfigChannel>
 8002ab2:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <_ZL12MX_TIM2_Initv+0xbe>
		Error_Handler();
 8002ac2:	f000 f973 	bl	8002dac <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002ac6:	4803      	ldr	r0, [pc, #12]	; (8002ad4 <_ZL12MX_TIM2_Initv+0xcc>)
 8002ac8:	f000 fd5e 	bl	8003588 <HAL_TIM_MspPostInit>

}
 8002acc:	bf00      	nop
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200000c0 	.word	0x200000c0

08002ad8 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002aec:	463b      	mov	r3, r7
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002af4:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002af6:	4a25      	ldr	r2, [pc, #148]	; (8002b8c <_ZL12MX_TIM4_Initv+0xb4>)
 8002af8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 71;
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002afc:	2247      	movs	r2, #71	; 0x47
 8002afe:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b0c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002b1a:	481b      	ldr	r0, [pc, #108]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b1c:	f003 f88c 	bl	8005c38 <HAL_TIM_Base_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <_ZL12MX_TIM4_Initv+0x5c>
		Error_Handler();
 8002b30:	f000 f93c 	bl	8002dac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b38:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002b3a:	f107 0308 	add.w	r3, r7, #8
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4811      	ldr	r0, [pc, #68]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b42:	f003 fc79 	bl	8006438 <HAL_TIM_ConfigClockSource>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <_ZL12MX_TIM4_Initv+0x82>
		Error_Handler();
 8002b56:	f000 f929 	bl	8002dac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002b62:	463b      	mov	r3, r7
 8002b64:	4619      	mov	r1, r3
 8002b66:	4808      	ldr	r0, [pc, #32]	; (8002b88 <_ZL12MX_TIM4_Initv+0xb0>)
 8002b68:	f004 f8a8 	bl	8006cbc <HAL_TIMEx_MasterConfigSynchronization>
 8002b6c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <_ZL12MX_TIM4_Initv+0xa8>
		Error_Handler();
 8002b7c:	f000 f916 	bl	8002dac <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000108 	.word	0x20000108
 8002b8c:	40000800 	.word	0x40000800

08002b90 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002b96:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002b98:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002b9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ba0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002bc6:	4807      	ldr	r0, [pc, #28]	; (8002be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002bc8:	f004 f927 	bl	8006e1a <HAL_UART_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8002bdc:	f000 f8e6 	bl	8002dac <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000194 	.word	0x20000194
 8002be8:	40013800 	.word	0x40013800

08002bec <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <_ZL11MX_DMA_Initv+0x38>)
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <_ZL11MX_DMA_Initv+0x38>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6153      	str	r3, [r2, #20]
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <_ZL11MX_DMA_Initv+0x38>)
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	200c      	movs	r0, #12
 8002c10:	f000 ff25 	bl	8003a5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002c14:	200c      	movs	r0, #12
 8002c16:	f000 ff3e 	bl	8003a96 <HAL_NVIC_EnableIRQ>

}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000

08002c28 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c2e:	f107 0310 	add.w	r3, r7, #16
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3c:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <_ZL12MX_GPIO_Initv+0xd0>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	4a2d      	ldr	r2, [pc, #180]	; (8002cf8 <_ZL12MX_GPIO_Initv+0xd0>)
 8002c42:	f043 0310 	orr.w	r3, r3, #16
 8002c46:	6193      	str	r3, [r2, #24]
 8002c48:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <_ZL12MX_GPIO_Initv+0xd0>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c54:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <_ZL12MX_GPIO_Initv+0xd0>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <_ZL12MX_GPIO_Initv+0xd0>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6193      	str	r3, [r2, #24]
 8002c60:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <_ZL12MX_GPIO_Initv+0xd0>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6c:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <_ZL12MX_GPIO_Initv+0xd0>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <_ZL12MX_GPIO_Initv+0xd0>)
 8002c72:	f043 0308 	orr.w	r3, r3, #8
 8002c76:	6193      	str	r3, [r2, #24]
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <_ZL12MX_GPIO_Initv+0xd0>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_Alarm_GPIO_Port, LED_Alarm_Pin, GPIO_PIN_RESET);
 8002c84:	2200      	movs	r2, #0
 8002c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c8a:	481c      	ldr	r0, [pc, #112]	; (8002cfc <_ZL12MX_GPIO_Initv+0xd4>)
 8002c8c:	f001 fd73 	bl	8004776 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002c90:	2200      	movs	r2, #0
 8002c92:	f248 0103 	movw	r1, #32771	; 0x8003
 8002c96:	481a      	ldr	r0, [pc, #104]	; (8002d00 <_ZL12MX_GPIO_Initv+0xd8>)
 8002c98:	f001 fd6d 	bl	8004776 <HAL_GPIO_WritePin>
	Display_DIO_Pin | Display_CLK_Pin | Check_Speed_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_Alarm_Pin */
	GPIO_InitStruct.Pin = LED_Alarm_Pin;
 8002c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ca0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2302      	movs	r3, #2
 8002cac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_Alarm_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4811      	ldr	r0, [pc, #68]	; (8002cfc <_ZL12MX_GPIO_Initv+0xd4>)
 8002cb6:	f001 fbc3 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : Display_DIO_Pin Display_CLK_Pin Check_Speed_Pin */
	GPIO_InitStruct.Pin = Display_DIO_Pin | Display_CLK_Pin | Check_Speed_Pin;
 8002cba:	f248 0303 	movw	r3, #32771	; 0x8003
 8002cbe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ccc:	f107 0310 	add.w	r3, r7, #16
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	480b      	ldr	r0, [pc, #44]	; (8002d00 <_ZL12MX_GPIO_Initv+0xd8>)
 8002cd4:	f001 fbb4 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
	GPIO_InitStruct.Pin = Button_1_Pin | Button_2_Pin | Button_3_Pin;
 8002cd8:	2370      	movs	r3, #112	; 0x70
 8002cda:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce4:	f107 0310 	add.w	r3, r7, #16
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <_ZL12MX_GPIO_Initv+0xd8>)
 8002cec:	f001 fba8 	bl	8004440 <HAL_GPIO_Init>

}
 8002cf0:	bf00      	nop
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40010c00 	.word	0x40010c00

08002d04 <_Z13remainingTimeP15RTC_TimeTypeDefS0_>:

/* USER CODE BEGIN 4 */
RTC_TimeTypeDef remainingTime(RTC_TimeTypeDef *a, RTC_TimeTypeDef *b) {
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef out;
	uint16_t seconds;
	seconds = (a->Hours * 60 + a->Minutes) - (b->Hours * 60 + b->Minutes);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4619      	mov	r1, r3
 8002d30:	0109      	lsls	r1, r1, #4
 8002d32:	1acb      	subs	r3, r1, r3
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	b299      	uxth	r1, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	785b      	ldrb	r3, [r3, #1]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	440b      	add	r3, r1
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	82fb      	strh	r3, [r7, #22]
	out.Hours = seconds / 60;
 8002d46:	8afb      	ldrh	r3, [r7, #22]
 8002d48:	4a17      	ldr	r2, [pc, #92]	; (8002da8 <_Z13remainingTimeP15RTC_TimeTypeDefS0_+0xa4>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	733b      	strb	r3, [r7, #12]
	out.Minutes = seconds % 60;
 8002d56:	8afa      	ldrh	r2, [r7, #22]
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <_Z13remainingTimeP15RTC_TimeTypeDefS0_+0xa4>)
 8002d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d5e:	0959      	lsrs	r1, r3, #5
 8002d60:	460b      	mov	r3, r1
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a5b      	subs	r3, r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	737b      	strb	r3, [r7, #13]
	out.Seconds = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73bb      	strb	r3, [r7, #14]
	return out;
 8002d74:	f107 0310 	add.w	r3, r7, #16
 8002d78:	f107 020c 	add.w	r2, r7, #12
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	8019      	strh	r1, [r3, #0]
 8002d82:	3302      	adds	r3, #2
 8002d84:	0c12      	lsrs	r2, r2, #16
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	7c3a      	ldrb	r2, [r7, #16]
 8002d8c:	f362 0307 	bfi	r3, r2, #0, #8
 8002d90:	7c7a      	ldrb	r2, [r7, #17]
 8002d92:	f362 230f 	bfi	r3, r2, #8, #8
 8002d96:	7cba      	ldrb	r2, [r7, #18]
 8002d98:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	88888889 	.word	0x88888889

08002dac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002db0:	b672      	cpsid	i
}
 8002db2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002db4:	e7fe      	b.n	8002db4 <Error_Handler+0x8>

08002db6 <_Z3rgbhhh>:
const uint8_t half_hue = sixth_hue * 3;
const uint8_t two_thirds_hue = sixth_hue * 4;
const uint8_t five_sixths_hue = sixth_hue * 5;
const uint8_t full_hue = sixth_hue * 6;

inline RGB_t rgb(uint8_t r, uint8_t g, uint8_t b) {
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	71fb      	strb	r3, [r7, #7]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	71bb      	strb	r3, [r7, #6]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	717b      	strb	r3, [r7, #5]
    return (RGB_t) {r, g, b};
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	733b      	strb	r3, [r7, #12]
 8002dcc:	79bb      	ldrb	r3, [r7, #6]
 8002dce:	737b      	strb	r3, [r7, #13]
 8002dd0:	797b      	ldrb	r3, [r7, #5]
 8002dd2:	73bb      	strb	r3, [r7, #14]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	7b3a      	ldrb	r2, [r7, #12]
 8002dd8:	f362 0307 	bfi	r3, r2, #0, #8
 8002ddc:	7b7a      	ldrb	r2, [r7, #13]
 8002dde:	f362 230f 	bfi	r3, r2, #8, #8
 8002de2:	7bba      	ldrb	r2, [r7, #14]
 8002de4:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <_Z7hsv2rgb5HSV_t>:
    return (HSV_t) {h, s, v};
}

const RGB_t black = {0, 0, 0};

RGB_t hsv2rgb(HSV_t hsv) {
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
    if (hsv.v == 0) return black;
 8002dfa:	79bb      	ldrb	r3, [r7, #6]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <_Z7hsv2rgb5HSV_t+0x1c>
 8002e00:	2300      	movs	r3, #0
 8002e02:	733b      	strb	r3, [r7, #12]
 8002e04:	2300      	movs	r3, #0
 8002e06:	737b      	strb	r3, [r7, #13]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73bb      	strb	r3, [r7, #14]
 8002e0c:	e0ba      	b.n	8002f84 <_Z7hsv2rgb5HSV_t+0x192>

    uint8_t high = hsv.v * max_whiteness;//channel with max value
 8002e0e:	79bb      	ldrb	r3, [r7, #6]
 8002e10:	461a      	mov	r2, r3
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	753b      	strb	r3, [r7, #20]
    if (hsv.s == 0) return rgb(high, high, high);
 8002e18:	797b      	ldrb	r3, [r7, #5]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10f      	bne.n	8002e3e <_Z7hsv2rgb5HSV_t+0x4c>
 8002e1e:	7d3a      	ldrb	r2, [r7, #20]
 8002e20:	7d39      	ldrb	r1, [r7, #20]
 8002e22:	7d3b      	ldrb	r3, [r7, #20]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ffc6 	bl	8002db6 <_Z3rgbhhh>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	733a      	strb	r2, [r7, #12]
 8002e30:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002e34:	737a      	strb	r2, [r7, #13]
 8002e36:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002e3a:	73bb      	strb	r3, [r7, #14]
 8002e3c:	e0a2      	b.n	8002f84 <_Z7hsv2rgb5HSV_t+0x192>

    uint8_t W = max_whiteness - hsv.s;
 8002e3e:	797b      	ldrb	r3, [r7, #5]
 8002e40:	f1c3 030f 	rsb	r3, r3, #15
 8002e44:	74fb      	strb	r3, [r7, #19]
    uint8_t low = hsv.v * W;//channel with min value
 8002e46:	79bb      	ldrb	r3, [r7, #6]
 8002e48:	7cfa      	ldrb	r2, [r7, #19]
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	74bb      	strb	r3, [r7, #18]
    uint8_t rising = low;
 8002e50:	7cbb      	ldrb	r3, [r7, #18]
 8002e52:	75fb      	strb	r3, [r7, #23]
    uint8_t falling = high;
 8002e54:	7d3b      	ldrb	r3, [r7, #20]
 8002e56:	75bb      	strb	r3, [r7, #22]

    uint8_t h_after_sixth = hsv.h % sixth_hue;
 8002e58:	793b      	ldrb	r3, [r7, #4]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	747b      	strb	r3, [r7, #17]
    if (h_after_sixth > 0) {//not at primary color? ok, h_after_sixth = 1..sixth_hue - 1
 8002e60:	7c7b      	ldrb	r3, [r7, #17]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d017      	beq.n	8002e96 <_Z7hsv2rgb5HSV_t+0xa4>
        uint8_t z = hsv.s * uint8_t(hsv.v * h_after_sixth) / sixth_hue;
 8002e66:	797b      	ldrb	r3, [r7, #5]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	79bb      	ldrb	r3, [r7, #6]
 8002e6c:	7c7a      	ldrb	r2, [r7, #17]
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	fb03 f301 	mul.w	r3, r3, r1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	da00      	bge.n	8002e7e <_Z7hsv2rgb5HSV_t+0x8c>
 8002e7c:	330f      	adds	r3, #15
 8002e7e:	111b      	asrs	r3, r3, #4
 8002e80:	743b      	strb	r3, [r7, #16]
        rising += z;
 8002e82:	7dfa      	ldrb	r2, [r7, #23]
 8002e84:	7c3b      	ldrb	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	75fb      	strb	r3, [r7, #23]
        falling -= z + 1;//it's never 255, so ok
 8002e8a:	7dba      	ldrb	r2, [r7, #22]
 8002e8c:	7c3b      	ldrb	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	75bb      	strb	r3, [r7, #22]
    }

    uint8_t H = hsv.h;
 8002e96:	793b      	ldrb	r3, [r7, #4]
 8002e98:	757b      	strb	r3, [r7, #21]
    while (H >= full_hue) H -= full_hue;
 8002e9a:	7d7b      	ldrb	r3, [r7, #21]
 8002e9c:	2b5f      	cmp	r3, #95	; 0x5f
 8002e9e:	d903      	bls.n	8002ea8 <_Z7hsv2rgb5HSV_t+0xb6>
 8002ea0:	7d7b      	ldrb	r3, [r7, #21]
 8002ea2:	3b60      	subs	r3, #96	; 0x60
 8002ea4:	757b      	strb	r3, [r7, #21]
 8002ea6:	e7f8      	b.n	8002e9a <_Z7hsv2rgb5HSV_t+0xa8>

    if (H < sixth_hue) return rgb(high, rising, low);
 8002ea8:	7d7b      	ldrb	r3, [r7, #21]
 8002eaa:	2b0f      	cmp	r3, #15
 8002eac:	d80f      	bhi.n	8002ece <_Z7hsv2rgb5HSV_t+0xdc>
 8002eae:	7cba      	ldrb	r2, [r7, #18]
 8002eb0:	7df9      	ldrb	r1, [r7, #23]
 8002eb2:	7d3b      	ldrb	r3, [r7, #20]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff7e 	bl	8002db6 <_Z3rgbhhh>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	733a      	strb	r2, [r7, #12]
 8002ec0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002ec4:	737a      	strb	r2, [r7, #13]
 8002ec6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002eca:	73bb      	strb	r3, [r7, #14]
 8002ecc:	e05a      	b.n	8002f84 <_Z7hsv2rgb5HSV_t+0x192>
    if (H < third_hue) return rgb(falling, high, low);
 8002ece:	7d7b      	ldrb	r3, [r7, #21]
 8002ed0:	2b1f      	cmp	r3, #31
 8002ed2:	d80f      	bhi.n	8002ef4 <_Z7hsv2rgb5HSV_t+0x102>
 8002ed4:	7cba      	ldrb	r2, [r7, #18]
 8002ed6:	7d39      	ldrb	r1, [r7, #20]
 8002ed8:	7dbb      	ldrb	r3, [r7, #22]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff6b 	bl	8002db6 <_Z3rgbhhh>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	733a      	strb	r2, [r7, #12]
 8002ee6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002eea:	737a      	strb	r2, [r7, #13]
 8002eec:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002ef0:	73bb      	strb	r3, [r7, #14]
 8002ef2:	e047      	b.n	8002f84 <_Z7hsv2rgb5HSV_t+0x192>
    if (H < half_hue) return rgb(low, high, rising);
 8002ef4:	7d7b      	ldrb	r3, [r7, #21]
 8002ef6:	2b2f      	cmp	r3, #47	; 0x2f
 8002ef8:	d80f      	bhi.n	8002f1a <_Z7hsv2rgb5HSV_t+0x128>
 8002efa:	7dfa      	ldrb	r2, [r7, #23]
 8002efc:	7d39      	ldrb	r1, [r7, #20]
 8002efe:	7cbb      	ldrb	r3, [r7, #18]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff58 	bl	8002db6 <_Z3rgbhhh>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	733a      	strb	r2, [r7, #12]
 8002f0c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002f10:	737a      	strb	r2, [r7, #13]
 8002f12:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002f16:	73bb      	strb	r3, [r7, #14]
 8002f18:	e034      	b.n	8002f84 <_Z7hsv2rgb5HSV_t+0x192>
    if (H < two_thirds_hue) return rgb(low, falling, high);
 8002f1a:	7d7b      	ldrb	r3, [r7, #21]
 8002f1c:	2b3f      	cmp	r3, #63	; 0x3f
 8002f1e:	d80f      	bhi.n	8002f40 <_Z7hsv2rgb5HSV_t+0x14e>
 8002f20:	7d3a      	ldrb	r2, [r7, #20]
 8002f22:	7db9      	ldrb	r1, [r7, #22]
 8002f24:	7cbb      	ldrb	r3, [r7, #18]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff45 	bl	8002db6 <_Z3rgbhhh>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	733a      	strb	r2, [r7, #12]
 8002f32:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002f36:	737a      	strb	r2, [r7, #13]
 8002f38:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002f3c:	73bb      	strb	r3, [r7, #14]
 8002f3e:	e021      	b.n	8002f84 <_Z7hsv2rgb5HSV_t+0x192>
    if (H < five_sixths_hue) return rgb(rising, low, high);
 8002f40:	7d7b      	ldrb	r3, [r7, #21]
 8002f42:	2b4f      	cmp	r3, #79	; 0x4f
 8002f44:	d80f      	bhi.n	8002f66 <_Z7hsv2rgb5HSV_t+0x174>
 8002f46:	7d3a      	ldrb	r2, [r7, #20]
 8002f48:	7cb9      	ldrb	r1, [r7, #18]
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff32 	bl	8002db6 <_Z3rgbhhh>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	733a      	strb	r2, [r7, #12]
 8002f58:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002f5c:	737a      	strb	r2, [r7, #13]
 8002f5e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002f62:	73bb      	strb	r3, [r7, #14]
 8002f64:	e00e      	b.n	8002f84 <_Z7hsv2rgb5HSV_t+0x192>
    return rgb(high, low, falling);
 8002f66:	7dba      	ldrb	r2, [r7, #22]
 8002f68:	7cb9      	ldrb	r1, [r7, #18]
 8002f6a:	7d3b      	ldrb	r3, [r7, #20]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff22 	bl	8002db6 <_Z3rgbhhh>
 8002f72:	4603      	mov	r3, r0
 8002f74:	461a      	mov	r2, r3
 8002f76:	733a      	strb	r2, [r7, #12]
 8002f78:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002f7c:	737a      	strb	r2, [r7, #13]
 8002f7e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002f82:	73bb      	strb	r3, [r7, #14]
 8002f84:	2300      	movs	r3, #0
 8002f86:	7b3a      	ldrb	r2, [r7, #12]
 8002f88:	f362 0307 	bfi	r3, r2, #0, #8
 8002f8c:	7b7a      	ldrb	r2, [r7, #13]
 8002f8e:	f362 230f 	bfi	r3, r2, #8, #8
 8002f92:	7bba      	ldrb	r2, [r7, #14]
 8002f94:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <_ZL6scale8hh>:

// LED write buffer
uint8_t wr_buf[WR_BUF_LEN] = { 0 };
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	460a      	mov	r2, r1
 8002faa:	71fb      	strb	r3, [r7, #7]
 8002fac:	4613      	mov	r3, r2
 8002fae:	71bb      	strb	r3, [r7, #6]
	return ((uint16_t) x * scale) >> 8;
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	79ba      	ldrb	r2, [r7, #6]
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	121b      	asrs	r3, r3, #8
 8002fba:	b2db      	uxtb	r3, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
	...

08002fc8 <_Z11led_set_RGBh5RGB_t>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, RGB_t input) {
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  rgb_arr[4 * index] = scale8(input.g, 0xB0); // g;
  rgb_arr[4 * index + 1] = input.r;
  rgb_arr[4 * index + 2] = scale8(input.b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
	rgb_arr[3 * index] = scale8(input.g, 0xB0); // g;
 8002fd4:	7878      	ldrb	r0, [r7, #1]
 8002fd6:	79fa      	ldrb	r2, [r7, #7]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	189c      	adds	r4, r3, r2
 8002fde:	21b0      	movs	r1, #176	; 0xb0
 8002fe0:	f7ff ffde 	bl	8002fa0 <_ZL6scale8hh>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <_Z11led_set_RGBh5RGB_t+0x58>)
 8002fea:	551a      	strb	r2, [r3, r4]
	rgb_arr[3 * index + 1] = input.r;
 8002fec:	79fa      	ldrb	r2, [r7, #7]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	7839      	ldrb	r1, [r7, #0]
 8002ff8:	4a09      	ldr	r2, [pc, #36]	; (8003020 <_Z11led_set_RGBh5RGB_t+0x58>)
 8002ffa:	54d1      	strb	r1, [r2, r3]
	rgb_arr[3 * index + 2] = scale8(input.b, 0xF0); // b;
 8002ffc:	78b8      	ldrb	r0, [r7, #2]
 8002ffe:	79fa      	ldrb	r2, [r7, #7]
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	1c9c      	adds	r4, r3, #2
 8003008:	21f0      	movs	r1, #240	; 0xf0
 800300a:	f7ff ffc9 	bl	8002fa0 <_ZL6scale8hh>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	4b03      	ldr	r3, [pc, #12]	; (8003020 <_Z11led_set_RGBh5RGB_t+0x58>)
 8003014:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bd90      	pop	{r4, r7, pc}
 800301e:	bf00      	nop
 8003020:	200001d8 	.word	0x200001d8

08003024 <_Z15led_set_all_RGB5RGB_t>:
  rgb_arr[4 * index + 3] = w;
#endif // End SK6812 WS2812B case differentiation
}

// Set all colors to RGB
void led_set_all_RGB(RGB_t input) {
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i)
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b3b      	cmp	r3, #59	; 0x3b
 8003034:	d809      	bhi.n	800304a <_Z15led_set_all_RGB5RGB_t+0x26>
		led_set_RGB(i, input);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ffc3 	bl	8002fc8 <_Z11led_set_RGBh5RGB_t>
	for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3301      	adds	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e7f2      	b.n	8003030 <_Z15led_set_all_RGB5RGB_t+0xc>
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <_Z10led_renderv>:
	for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i)
		led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
	if (wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 800305a:	4b4d      	ldr	r3, [pc, #308]	; (8003190 <_Z10led_renderv+0x13c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <_Z10led_renderv+0x18>
 8003062:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <_Z10led_renderv+0x140>)
 8003064:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003068:	2b01      	cmp	r3, #1
 800306a:	d014      	beq.n	8003096 <_Z10led_renderv+0x42>
		// Ongoing transfer, cancel!
		for (uint8_t i = 0; i < WR_BUF_LEN; ++i)
 800306c:	2300      	movs	r3, #0
 800306e:	71fb      	strb	r3, [r7, #7]
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	2b2f      	cmp	r3, #47	; 0x2f
 8003074:	d807      	bhi.n	8003086 <_Z10led_renderv+0x32>
			wr_buf[i] = 0;
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	4a47      	ldr	r2, [pc, #284]	; (8003198 <_Z10led_renderv+0x144>)
 800307a:	2100      	movs	r1, #0
 800307c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < WR_BUF_LEN; ++i)
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	3301      	adds	r3, #1
 8003082:	71fb      	strb	r3, [r7, #7]
 8003084:	e7f4      	b.n	8003070 <_Z10led_renderv+0x1c>
		wr_buf_p = 0;
 8003086:	4b42      	ldr	r3, [pc, #264]	; (8003190 <_Z10led_renderv+0x13c>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800308c:	2100      	movs	r1, #0
 800308e:	4843      	ldr	r0, [pc, #268]	; (800319c <_Z10led_renderv+0x148>)
 8003090:	f003 f856 	bl	8006140 <HAL_TIM_PWM_Stop_DMA>
		return;
 8003094:	e078      	b.n	8003188 <_Z10led_renderv+0x134>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
	for (uint_fast8_t i = 0; i < 8; ++i) {
 8003096:	2300      	movs	r3, #0
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b07      	cmp	r3, #7
 800309e:	d86a      	bhi.n	8003176 <_Z10led_renderv+0x122>
		wr_buf[i] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 80030a0:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <_Z10led_renderv+0x14c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	dd01      	ble.n	80030b8 <_Z10led_renderv+0x64>
 80030b4:	2126      	movs	r1, #38	; 0x26
 80030b6:	e000      	b.n	80030ba <_Z10led_renderv+0x66>
 80030b8:	2113      	movs	r1, #19
 80030ba:	4a37      	ldr	r2, [pc, #220]	; (8003198 <_Z10led_renderv+0x144>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	460a      	mov	r2, r1
 80030c2:	701a      	strb	r2, [r3, #0]
		wr_buf[i + 8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 80030c4:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <_Z10led_renderv+0x14c>)
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	461a      	mov	r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	dd01      	ble.n	80030dc <_Z10led_renderv+0x88>
 80030d8:	2126      	movs	r1, #38	; 0x26
 80030da:	e000      	b.n	80030de <_Z10led_renderv+0x8a>
 80030dc:	2113      	movs	r1, #19
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	3308      	adds	r3, #8
 80030e2:	4a2d      	ldr	r2, [pc, #180]	; (8003198 <_Z10led_renderv+0x144>)
 80030e4:	54d1      	strb	r1, [r2, r3]
		wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <_Z10led_renderv+0x14c>)
 80030e8:	789b      	ldrb	r3, [r3, #2]
 80030ea:	461a      	mov	r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	dd01      	ble.n	80030fe <_Z10led_renderv+0xaa>
 80030fa:	2126      	movs	r1, #38	; 0x26
 80030fc:	e000      	b.n	8003100 <_Z10led_renderv+0xac>
 80030fe:	2113      	movs	r1, #19
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	3310      	adds	r3, #16
 8003104:	4a24      	ldr	r2, [pc, #144]	; (8003198 <_Z10led_renderv+0x144>)
 8003106:	54d1      	strb	r1, [r2, r3]
		wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <_Z10led_renderv+0x14c>)
 800310a:	78db      	ldrb	r3, [r3, #3]
 800310c:	461a      	mov	r2, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b00      	cmp	r3, #0
 800311a:	dd01      	ble.n	8003120 <_Z10led_renderv+0xcc>
 800311c:	2126      	movs	r1, #38	; 0x26
 800311e:	e000      	b.n	8003122 <_Z10led_renderv+0xce>
 8003120:	2113      	movs	r1, #19
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	3318      	adds	r3, #24
 8003126:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <_Z10led_renderv+0x144>)
 8003128:	54d1      	strb	r1, [r2, r3]
		wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <_Z10led_renderv+0x14c>)
 800312c:	791b      	ldrb	r3, [r3, #4]
 800312e:	461a      	mov	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b00      	cmp	r3, #0
 800313c:	dd01      	ble.n	8003142 <_Z10led_renderv+0xee>
 800313e:	2126      	movs	r1, #38	; 0x26
 8003140:	e000      	b.n	8003144 <_Z10led_renderv+0xf0>
 8003142:	2113      	movs	r1, #19
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	3320      	adds	r3, #32
 8003148:	4a13      	ldr	r2, [pc, #76]	; (8003198 <_Z10led_renderv+0x144>)
 800314a:	54d1      	strb	r1, [r2, r3]
		wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <_Z10led_renderv+0x14c>)
 800314e:	795b      	ldrb	r3, [r3, #5]
 8003150:	461a      	mov	r2, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	dd01      	ble.n	8003164 <_Z10led_renderv+0x110>
 8003160:	2126      	movs	r1, #38	; 0x26
 8003162:	e000      	b.n	8003166 <_Z10led_renderv+0x112>
 8003164:	2113      	movs	r1, #19
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	3328      	adds	r3, #40	; 0x28
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <_Z10led_renderv+0x144>)
 800316c:	54d1      	strb	r1, [r2, r3]
	for (uint_fast8_t i = 0; i < 8; ++i) {
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	3301      	adds	r3, #1
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	e791      	b.n	800309a <_Z10led_renderv+0x46>
	}
#endif // End SK6812 WS2812B case differentiation

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) wr_buf,
 8003176:	2330      	movs	r3, #48	; 0x30
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <_Z10led_renderv+0x144>)
 800317a:	2100      	movs	r1, #0
 800317c:	4807      	ldr	r0, [pc, #28]	; (800319c <_Z10led_renderv+0x148>)
 800317e:	f002 fe45 	bl	8005e0c <HAL_TIM_PWM_Start_DMA>
			WR_BUF_LEN);
	wr_buf_p = 2; // Since we're ready for the next buffer
 8003182:	4b03      	ldr	r3, [pc, #12]	; (8003190 <_Z10led_renderv+0x13c>)
 8003184:	2202      	movs	r2, #2
 8003186:	601a      	str	r2, [r3, #0]
}
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200002bc 	.word	0x200002bc
 8003194:	20000150 	.word	0x20000150
 8003198:	2000028c 	.word	0x2000028c
 800319c:	20000078 	.word	0x20000078
 80031a0:	200001d8 	.word	0x200001d8

080031a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	// DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
	if (wr_buf_p < NUM_PIXELS) {
 80031ac:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b3b      	cmp	r3, #59	; 0x3b
 80031b2:	d853      	bhi.n	800325c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
		for (uint_fast8_t i = 0; i < 8; ++i) {
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b07      	cmp	r3, #7
 80031bc:	d848      	bhi.n	8003250 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xac>
			wr_buf[i] = PWM_LO << (((rgb_arr[3 * wr_buf_p] << i) & 0x80) > 0);
 80031be:	4b35      	ldr	r3, [pc, #212]	; (8003294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	4a33      	ldr	r2, [pc, #204]	; (8003298 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80031ca:	5cd3      	ldrb	r3, [r2, r3]
 80031cc:	461a      	mov	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	2b00      	cmp	r3, #0
 80031da:	dd01      	ble.n	80031e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3c>
 80031dc:	2126      	movs	r1, #38	; 0x26
 80031de:	e000      	b.n	80031e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3e>
 80031e0:	2113      	movs	r1, #19
 80031e2:	4a2e      	ldr	r2, [pc, #184]	; (800329c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	460a      	mov	r2, r1
 80031ea:	701a      	strb	r2, [r3, #0]
			wr_buf[i + 8] = PWM_LO
					<< (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80031ec:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	3301      	adds	r3, #1
 80031f8:	4a27      	ldr	r2, [pc, #156]	; (8003298 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	f003 0380 	and.w	r3, r3, #128	; 0x80
			wr_buf[i + 8] = PWM_LO
 8003208:	2b00      	cmp	r3, #0
 800320a:	dd01      	ble.n	8003210 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6c>
 800320c:	2126      	movs	r1, #38	; 0x26
 800320e:	e000      	b.n	8003212 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6e>
 8003210:	2113      	movs	r1, #19
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3308      	adds	r3, #8
 8003216:	4a21      	ldr	r2, [pc, #132]	; (800329c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8003218:	54d1      	strb	r1, [r2, r3]
			wr_buf[i + 16] = PWM_LO
					<< (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	3302      	adds	r3, #2
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8003228:	5cd3      	ldrb	r3, [r2, r3]
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	f003 0380 	and.w	r3, r3, #128	; 0x80
			wr_buf[i + 16] = PWM_LO
 8003236:	2b00      	cmp	r3, #0
 8003238:	dd01      	ble.n	800323e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x9a>
 800323a:	2126      	movs	r1, #38	; 0x26
 800323c:	e000      	b.n	8003240 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x9c>
 800323e:	2113      	movs	r1, #19
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3310      	adds	r3, #16
 8003244:	4a15      	ldr	r2, [pc, #84]	; (800329c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8003246:	54d1      	strb	r1, [r2, r3]
		for (uint_fast8_t i = 0; i < 8; ++i) {
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3301      	adds	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	e7b3      	b.n	80031b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x14>
		}
#endif // End SK6812 WS2812B case differentiation
		wr_buf_p++;
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8003258:	6013      	str	r3, [r2, #0]
		// First half reset zero fill
		for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
			wr_buf[i] = 0;
		wr_buf_p++;
	}
}
 800325a:	e015      	b.n	8003288 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
	} else if (wr_buf_p < NUM_PIXELS + 2) {
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b3d      	cmp	r3, #61	; 0x3d
 8003262:	d811      	bhi.n	8003288 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
		for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 8003264:	2300      	movs	r3, #0
 8003266:	72fb      	strb	r3, [r7, #11]
 8003268:	7afb      	ldrb	r3, [r7, #11]
 800326a:	2b17      	cmp	r3, #23
 800326c:	d807      	bhi.n	800327e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xda>
			wr_buf[i] = 0;
 800326e:	7afb      	ldrb	r3, [r7, #11]
 8003270:	4a0a      	ldr	r2, [pc, #40]	; (800329c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8003272:	2100      	movs	r1, #0
 8003274:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	3301      	adds	r3, #1
 800327a:	72fb      	strb	r3, [r7, #11]
 800327c:	e7f4      	b.n	8003268 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc4>
		wr_buf_p++;
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3301      	adds	r3, #1
 8003284:	4a03      	ldr	r2, [pc, #12]	; (8003294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8003286:	6013      	str	r3, [r2, #0]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	200002bc 	.word	0x200002bc
 8003298:	200001d8 	.word	0x200001d8
 800329c:	2000028c 	.word	0x2000028c

080032a0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	// DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
	if (wr_buf_p < NUM_PIXELS) {
 80032a8:	4b3c      	ldr	r3, [pc, #240]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b3b      	cmp	r3, #59	; 0x3b
 80032ae:	d852      	bhi.n	8003356 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
		for (uint_fast8_t i = 0; i < 8; ++i) {
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b07      	cmp	r3, #7
 80032b8:	d847      	bhi.n	800334a <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
			wr_buf[i + 24] = PWM_LO
					<< (((rgb_arr[3 * wr_buf_p] << i) & 0x80) > 0);
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	4a36      	ldr	r2, [pc, #216]	; (80033a0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	461a      	mov	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			wr_buf[i + 24] = PWM_LO
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	dd01      	ble.n	80032dc <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
 80032d8:	2126      	movs	r1, #38	; 0x26
 80032da:	e000      	b.n	80032de <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 80032dc:	2113      	movs	r1, #19
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3318      	adds	r3, #24
 80032e2:	4a30      	ldr	r2, [pc, #192]	; (80033a4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80032e4:	54d1      	strb	r1, [r2, r3]
			wr_buf[i + 32] = PWM_LO
					<< (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80032e6:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
			wr_buf[i + 32] = PWM_LO
 8003302:	2b00      	cmp	r3, #0
 8003304:	dd01      	ble.n	800330a <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8003306:	2126      	movs	r1, #38	; 0x26
 8003308:	e000      	b.n	800330c <HAL_TIM_PWM_PulseFinishedCallback+0x6c>
 800330a:	2113      	movs	r1, #19
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3320      	adds	r3, #32
 8003310:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8003312:	54d1      	strb	r1, [r2, r3]
			wr_buf[i + 40] = PWM_LO
					<< (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8003314:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	3302      	adds	r3, #2
 8003320:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	461a      	mov	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			wr_buf[i + 40] = PWM_LO
 8003330:	2b00      	cmp	r3, #0
 8003332:	dd01      	ble.n	8003338 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8003334:	2126      	movs	r1, #38	; 0x26
 8003336:	e000      	b.n	800333a <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8003338:	2113      	movs	r1, #19
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3328      	adds	r3, #40	; 0x28
 800333e:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8003340:	54d1      	strb	r1, [r2, r3]
		for (uint_fast8_t i = 0; i < 8; ++i) {
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3301      	adds	r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	e7b4      	b.n	80032b4 <HAL_TIM_PWM_PulseFinishedCallback+0x14>
		}
#endif // End SK6812 WS2812B case differentiation
		wr_buf_p++;
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3301      	adds	r3, #1
 8003350:	4a12      	ldr	r2, [pc, #72]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8003352:	6013      	str	r3, [r2, #0]
	} else {
		// We're done. Lean back and until next time!
		wr_buf_p = 0;
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	}
}
 8003354:	e01d      	b.n	8003392 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
	} else if (wr_buf_p < NUM_PIXELS + 2) {
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b3d      	cmp	r3, #61	; 0x3d
 800335c:	d812      	bhi.n	8003384 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
		for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 800335e:	2318      	movs	r3, #24
 8003360:	72fb      	strb	r3, [r7, #11]
 8003362:	7afb      	ldrb	r3, [r7, #11]
 8003364:	2b2f      	cmp	r3, #47	; 0x2f
 8003366:	d807      	bhi.n	8003378 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>
			wr_buf[i] = 0;
 8003368:	7afb      	ldrb	r3, [r7, #11]
 800336a:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800336c:	2100      	movs	r1, #0
 800336e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 8003370:	7afb      	ldrb	r3, [r7, #11]
 8003372:	3301      	adds	r3, #1
 8003374:	72fb      	strb	r3, [r7, #11]
 8003376:	e7f4      	b.n	8003362 <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
		++wr_buf_p;
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	4a07      	ldr	r2, [pc, #28]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8003380:	6013      	str	r3, [r2, #0]
}
 8003382:	e006      	b.n	8003392 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
		wr_buf_p = 0;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800338a:	2100      	movs	r1, #0
 800338c:	4806      	ldr	r0, [pc, #24]	; (80033a8 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800338e:	f002 fed7 	bl	8006140 <HAL_TIM_PWM_Stop_DMA>
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200002bc 	.word	0x200002bc
 80033a0:	200001d8 	.word	0x200001d8
 80033a4:	2000028c 	.word	0x2000028c
 80033a8:	20000078 	.word	0x20000078

080033ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033b2:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_MspInit+0x5c>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	4a14      	ldr	r2, [pc, #80]	; (8003408 <HAL_MspInit+0x5c>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6193      	str	r3, [r2, #24]
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_MspInit+0x5c>)
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <HAL_MspInit+0x5c>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	4a0e      	ldr	r2, [pc, #56]	; (8003408 <HAL_MspInit+0x5c>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d4:	61d3      	str	r3, [r2, #28]
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_MspInit+0x5c>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_MspInit+0x60>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_MspInit+0x60>)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	40021000 	.word	0x40021000
 800340c:	40010000 	.word	0x40010000

08003410 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_CRC_MspInit+0x34>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10b      	bne.n	800343a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_CRC_MspInit+0x38>)
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <HAL_CRC_MspInit+0x38>)
 8003428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342c:	6153      	str	r3, [r2, #20]
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_CRC_MspInit+0x38>)
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	40023000 	.word	0x40023000
 8003448:	40021000 	.word	0x40021000

0800344c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0b      	ldr	r2, [pc, #44]	; (8003488 <HAL_RTC_MspInit+0x3c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d110      	bne.n	8003480 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800345e:	f001 f9a3 	bl	80047a8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HAL_RTC_MspInit+0x40>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <HAL_RTC_MspInit+0x40>)
 8003468:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800346c:	61d3      	str	r3, [r2, #28]
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <HAL_RTC_MspInit+0x40>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RTC_MspInit+0x44>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40002800 	.word	0x40002800
 800348c:	40021000 	.word	0x40021000
 8003490:	4242043c 	.word	0x4242043c

08003494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a26      	ldr	r2, [pc, #152]	; (800353c <HAL_TIM_Base_MspInit+0xa8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d134      	bne.n	8003510 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <HAL_TIM_Base_MspInit+0xac>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	4a25      	ldr	r2, [pc, #148]	; (8003540 <HAL_TIM_Base_MspInit+0xac>)
 80034ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034b0:	6193      	str	r3, [r2, #24]
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_TIM_Base_MspInit+0xac>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80034be:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 80034c0:	4a21      	ldr	r2, [pc, #132]	; (8003548 <HAL_TIM_Base_MspInit+0xb4>)
 80034c2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034c4:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 80034c6:	2210      	movs	r2, #16
 80034c8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 80034d2:	2280      	movs	r2, #128	; 0x80
 80034d4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034d6:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 80034d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034dc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034de:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80034e4:	4b17      	ldr	r3, [pc, #92]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 80034e6:	2220      	movs	r2, #32
 80034e8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 80034ec:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80034f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80034f2:	4814      	ldr	r0, [pc, #80]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 80034f4:	f000 fb06 	bl	8003b04 <HAL_DMA_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80034fe:	f7ff fc55 	bl	8002dac <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 8003506:	625a      	str	r2, [r3, #36]	; 0x24
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <HAL_TIM_Base_MspInit+0xb0>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800350e:	e010      	b.n	8003532 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a0d      	ldr	r2, [pc, #52]	; (800354c <HAL_TIM_Base_MspInit+0xb8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10b      	bne.n	8003532 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_TIM_Base_MspInit+0xac>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_TIM_Base_MspInit+0xac>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	61d3      	str	r3, [r2, #28]
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_TIM_Base_MspInit+0xac>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40021000 	.word	0x40021000
 8003544:	20000150 	.word	0x20000150
 8003548:	4002001c 	.word	0x4002001c
 800354c:	40000800 	.word	0x40000800

08003550 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003560:	d10b      	bne.n	800357a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <HAL_TIM_PWM_MspInit+0x34>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4a07      	ldr	r2, [pc, #28]	; (8003584 <HAL_TIM_PWM_MspInit+0x34>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	61d3      	str	r3, [r2, #28]
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_TIM_PWM_MspInit+0x34>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	40021000 	.word	0x40021000

08003588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 0310 	add.w	r3, r7, #16
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <HAL_TIM_MspPostInit+0x98>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d119      	bne.n	80035dc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_TIM_MspPostInit+0x9c>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_TIM_MspPostInit+0x9c>)
 80035ae:	f043 0304 	orr.w	r3, r3, #4
 80035b2:	6193      	str	r3, [r2, #24]
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_TIM_MspPostInit+0x9c>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ca:	2302      	movs	r3, #2
 80035cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ce:	f107 0310 	add.w	r3, r7, #16
 80035d2:	4619      	mov	r1, r3
 80035d4:	4814      	ldr	r0, [pc, #80]	; (8003628 <HAL_TIM_MspPostInit+0xa0>)
 80035d6:	f000 ff33 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035da:	e01c      	b.n	8003616 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e4:	d117      	bne.n	8003616 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_TIM_MspPostInit+0x9c>)
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	4a0e      	ldr	r2, [pc, #56]	; (8003624 <HAL_TIM_MspPostInit+0x9c>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	6193      	str	r3, [r2, #24]
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_TIM_MspPostInit+0x9c>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035fe:	2301      	movs	r3, #1
 8003600:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	2302      	movs	r3, #2
 8003608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360a:	f107 0310 	add.w	r3, r7, #16
 800360e:	4619      	mov	r1, r3
 8003610:	4805      	ldr	r0, [pc, #20]	; (8003628 <HAL_TIM_MspPostInit+0xa0>)
 8003612:	f000 ff15 	bl	8004440 <HAL_GPIO_Init>
}
 8003616:	bf00      	nop
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40021000 	.word	0x40021000
 8003628:	40010800 	.word	0x40010800

0800362c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a20      	ldr	r2, [pc, #128]	; (80036c8 <HAL_UART_MspInit+0x9c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d139      	bne.n	80036c0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <HAL_UART_MspInit+0xa0>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <HAL_UART_MspInit+0xa0>)
 8003652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003656:	6193      	str	r3, [r2, #24]
 8003658:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_UART_MspInit+0xa0>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_UART_MspInit+0xa0>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	4a18      	ldr	r2, [pc, #96]	; (80036cc <HAL_UART_MspInit+0xa0>)
 800366a:	f043 0304 	orr.w	r3, r3, #4
 800366e:	6193      	str	r3, [r2, #24]
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_UART_MspInit+0xa0>)
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800367c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003680:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003686:	2303      	movs	r3, #3
 8003688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	4619      	mov	r1, r3
 8003690:	480f      	ldr	r0, [pc, #60]	; (80036d0 <HAL_UART_MspInit+0xa4>)
 8003692:	f000 fed5 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800369a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	4619      	mov	r1, r3
 80036aa:	4809      	ldr	r0, [pc, #36]	; (80036d0 <HAL_UART_MspInit+0xa4>)
 80036ac:	f000 fec8 	bl	8004440 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036b0:	2200      	movs	r2, #0
 80036b2:	2100      	movs	r1, #0
 80036b4:	2025      	movs	r0, #37	; 0x25
 80036b6:	f000 f9d2 	bl	8003a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036ba:	2025      	movs	r0, #37	; 0x25
 80036bc:	f000 f9eb 	bl	8003a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036c0:	bf00      	nop
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40013800 	.word	0x40013800
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40010800 	.word	0x40010800

080036d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036d8:	e7fe      	b.n	80036d8 <NMI_Handler+0x4>

080036da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036de:	e7fe      	b.n	80036de <HardFault_Handler+0x4>

080036e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036e4:	e7fe      	b.n	80036e4 <MemManage_Handler+0x4>

080036e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ea:	e7fe      	b.n	80036ea <BusFault_Handler+0x4>

080036ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036f0:	e7fe      	b.n	80036f0 <UsageFault_Handler+0x4>

080036f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800371a:	f000 f889 	bl	8003830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003728:	4802      	ldr	r0, [pc, #8]	; (8003734 <DMA1_Channel2_IRQHandler+0x10>)
 800372a:	f000 fb55 	bl	8003dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000150 	.word	0x20000150

08003738 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800373c:	4802      	ldr	r0, [pc, #8]	; (8003748 <USART1_IRQHandler+0x10>)
 800373e:	f003 fc4b 	bl	8006fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000194 	.word	0x20000194

0800374c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003758:	480c      	ldr	r0, [pc, #48]	; (800378c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800375a:	490d      	ldr	r1, [pc, #52]	; (8003790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800375c:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800375e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003760:	e002      	b.n	8003768 <LoopCopyDataInit>

08003762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003766:	3304      	adds	r3, #4

08003768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800376a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800376c:	d3f9      	bcc.n	8003762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800376e:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003770:	4c0a      	ldr	r4, [pc, #40]	; (800379c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003774:	e001      	b.n	800377a <LoopFillZerobss>

08003776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003778:	3204      	adds	r2, #4

0800377a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800377a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800377c:	d3fb      	bcc.n	8003776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800377e:	f7ff ffe5 	bl	800374c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003782:	f004 f821 	bl	80077c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003786:	f7fd fccd 	bl	8001124 <main>
  bx lr
 800378a:	4770      	bx	lr
  ldr r0, =_sdata
 800378c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003790:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003794:	08007890 	.word	0x08007890
  ldr r2, =_sbss
 8003798:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800379c:	200002e8 	.word	0x200002e8

080037a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037a0:	e7fe      	b.n	80037a0 <ADC1_2_IRQHandler>
	...

080037a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_Init+0x28>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a07      	ldr	r2, [pc, #28]	; (80037cc <HAL_Init+0x28>)
 80037ae:	f043 0310 	orr.w	r3, r3, #16
 80037b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b4:	2003      	movs	r0, #3
 80037b6:	f000 f947 	bl	8003a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ba:	200f      	movs	r0, #15
 80037bc:	f000 f808 	bl	80037d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037c0:	f7ff fdf4 	bl	80033ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40022000 	.word	0x40022000

080037d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_InitTick+0x54>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_InitTick+0x58>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	4619      	mov	r1, r3
 80037e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f95f 	bl	8003ab2 <HAL_SYSTICK_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00e      	b.n	800381c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b0f      	cmp	r3, #15
 8003802:	d80a      	bhi.n	800381a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003804:	2200      	movs	r2, #0
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	f000 f927 	bl	8003a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003810:	4a06      	ldr	r2, [pc, #24]	; (800382c <HAL_InitTick+0x5c>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	e000      	b.n	800381c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000000 	.word	0x20000000
 8003828:	20000008 	.word	0x20000008
 800382c:	20000004 	.word	0x20000004

08003830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_IncTick+0x1c>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_IncTick+0x20>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4413      	add	r3, r2
 8003840:	4a03      	ldr	r2, [pc, #12]	; (8003850 <HAL_IncTick+0x20>)
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	20000008 	.word	0x20000008
 8003850:	200002c0 	.word	0x200002c0

08003854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return uwTick;
 8003858:	4b02      	ldr	r3, [pc, #8]	; (8003864 <HAL_GetTick+0x10>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	200002c0 	.word	0x200002c0

08003868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff fff0 	bl	8003854 <HAL_GetTick>
 8003874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d005      	beq.n	800388e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <HAL_Delay+0x44>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800388e:	bf00      	nop
 8003890:	f7ff ffe0 	bl	8003854 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	429a      	cmp	r2, r3
 800389e:	d8f7      	bhi.n	8003890 <HAL_Delay+0x28>
  {
  }
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000008 	.word	0x20000008

080038b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <__NVIC_SetPriorityGrouping+0x44>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038cc:	4013      	ands	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e2:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <__NVIC_SetPriorityGrouping+0x44>)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	60d3      	str	r3, [r2, #12]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <__NVIC_GetPriorityGrouping+0x18>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	0a1b      	lsrs	r3, r3, #8
 8003902:	f003 0307 	and.w	r3, r3, #7
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	2b00      	cmp	r3, #0
 8003924:	db0b      	blt.n	800393e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	4906      	ldr	r1, [pc, #24]	; (8003948 <__NVIC_EnableIRQ+0x34>)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2001      	movs	r0, #1
 8003936:	fa00 f202 	lsl.w	r2, r0, r2
 800393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	e000e100 	.word	0xe000e100

0800394c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	6039      	str	r1, [r7, #0]
 8003956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	2b00      	cmp	r3, #0
 800395e:	db0a      	blt.n	8003976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	490c      	ldr	r1, [pc, #48]	; (8003998 <__NVIC_SetPriority+0x4c>)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	440b      	add	r3, r1
 8003970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003974:	e00a      	b.n	800398c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4908      	ldr	r1, [pc, #32]	; (800399c <__NVIC_SetPriority+0x50>)
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	3b04      	subs	r3, #4
 8003984:	0112      	lsls	r2, r2, #4
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	440b      	add	r3, r1
 800398a:	761a      	strb	r2, [r3, #24]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	; 0x24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f1c3 0307 	rsb	r3, r3, #7
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	bf28      	it	cs
 80039be:	2304      	movcs	r3, #4
 80039c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d902      	bls.n	80039d0 <NVIC_EncodePriority+0x30>
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3b03      	subs	r3, #3
 80039ce:	e000      	b.n	80039d2 <NVIC_EncodePriority+0x32>
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43da      	mvns	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	401a      	ands	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43d9      	mvns	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	4313      	orrs	r3, r2
         );
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3724      	adds	r7, #36	; 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a14:	d301      	bcc.n	8003a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a16:	2301      	movs	r3, #1
 8003a18:	e00f      	b.n	8003a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <SysTick_Config+0x40>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a22:	210f      	movs	r1, #15
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f7ff ff90 	bl	800394c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <SysTick_Config+0x40>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <SysTick_Config+0x40>)
 8003a34:	2207      	movs	r2, #7
 8003a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	e000e010 	.word	0xe000e010

08003a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff2d 	bl	80038b0 <__NVIC_SetPriorityGrouping>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b086      	sub	sp, #24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a70:	f7ff ff42 	bl	80038f8 <__NVIC_GetPriorityGrouping>
 8003a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	6978      	ldr	r0, [r7, #20]
 8003a7c:	f7ff ff90 	bl	80039a0 <NVIC_EncodePriority>
 8003a80:	4602      	mov	r2, r0
 8003a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ff5f 	bl	800394c <__NVIC_SetPriority>
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff35 	bl	8003914 <__NVIC_EnableIRQ>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff ffa2 	bl	8003a04 <SysTick_Config>
 8003ac0:	4603      	mov	r3, r0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e00e      	b.n	8003afa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	795b      	ldrb	r3, [r3, #5]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d105      	bne.n	8003af2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fc8f 	bl	8003410 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e043      	b.n	8003ba2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_DMA_Init+0xa8>)
 8003b22:	4413      	add	r3, r2
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_DMA_Init+0xac>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	009a      	lsls	r2, r3, #2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_DMA_Init+0xb0>)
 8003b36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	bffdfff8 	.word	0xbffdfff8
 8003bb0:	cccccccd 	.word	0xcccccccd
 8003bb4:	40020000 	.word	0x40020000

08003bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_DMA_Start_IT+0x20>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e04a      	b.n	8003c6e <HAL_DMA_Start_IT+0xb6>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d13a      	bne.n	8003c60 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2202      	movs	r2, #2
 8003bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f9e8 	bl	8003fe4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 020e 	orr.w	r2, r2, #14
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e00f      	b.n	8003c4e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0204 	bic.w	r2, r2, #4
 8003c3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 020a 	orr.w	r2, r2, #10
 8003c4c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	e005      	b.n	8003c6c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d008      	beq.n	8003c9e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e020      	b.n	8003ce0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 020e 	bic.w	r2, r2, #14
 8003cac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ccc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d005      	beq.n	8003d0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2204      	movs	r2, #4
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e051      	b.n	8003db2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 020e 	bic.w	r2, r2, #14
 8003d1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <HAL_DMA_Abort_IT+0xd0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d029      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xa0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <HAL_DMA_Abort_IT+0xd4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d022      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x9c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_DMA_Abort_IT+0xd8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d01a      	beq.n	8003d82 <HAL_DMA_Abort_IT+0x96>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_DMA_Abort_IT+0xdc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d012      	beq.n	8003d7c <HAL_DMA_Abort_IT+0x90>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_DMA_Abort_IT+0xe0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00a      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x8a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1a      	ldr	r2, [pc, #104]	; (8003dd0 <HAL_DMA_Abort_IT+0xe4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d102      	bne.n	8003d70 <HAL_DMA_Abort_IT+0x84>
 8003d6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d6e:	e00e      	b.n	8003d8e <HAL_DMA_Abort_IT+0xa2>
 8003d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d74:	e00b      	b.n	8003d8e <HAL_DMA_Abort_IT+0xa2>
 8003d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d7a:	e008      	b.n	8003d8e <HAL_DMA_Abort_IT+0xa2>
 8003d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d80:	e005      	b.n	8003d8e <HAL_DMA_Abort_IT+0xa2>
 8003d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d86:	e002      	b.n	8003d8e <HAL_DMA_Abort_IT+0xa2>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	e000      	b.n	8003d8e <HAL_DMA_Abort_IT+0xa2>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HAL_DMA_Abort_IT+0xe8>)
 8003d90:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
    } 
  }
  return status;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40020008 	.word	0x40020008
 8003dc0:	4002001c 	.word	0x4002001c
 8003dc4:	40020030 	.word	0x40020030
 8003dc8:	40020044 	.word	0x40020044
 8003dcc:	40020058 	.word	0x40020058
 8003dd0:	4002006c 	.word	0x4002006c
 8003dd4:	40020000 	.word	0x40020000

08003dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2204      	movs	r2, #4
 8003df6:	409a      	lsls	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d04f      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0xc8>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d04a      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d107      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0204 	bic.w	r2, r2, #4
 8003e26:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a66      	ldr	r2, [pc, #408]	; (8003fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d029      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xae>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a65      	ldr	r2, [pc, #404]	; (8003fcc <HAL_DMA_IRQHandler+0x1f4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xaa>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a63      	ldr	r2, [pc, #396]	; (8003fd0 <HAL_DMA_IRQHandler+0x1f8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01a      	beq.n	8003e7c <HAL_DMA_IRQHandler+0xa4>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a62      	ldr	r2, [pc, #392]	; (8003fd4 <HAL_DMA_IRQHandler+0x1fc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d012      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x9e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a60      	ldr	r2, [pc, #384]	; (8003fd8 <HAL_DMA_IRQHandler+0x200>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00a      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x98>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a5f      	ldr	r2, [pc, #380]	; (8003fdc <HAL_DMA_IRQHandler+0x204>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d102      	bne.n	8003e6a <HAL_DMA_IRQHandler+0x92>
 8003e64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e68:	e00e      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e6e:	e00b      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e74:	e008      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e7a:	e005      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e80:	e002      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	e000      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e86:	2304      	movs	r3, #4
 8003e88:	4a55      	ldr	r2, [pc, #340]	; (8003fe0 <HAL_DMA_IRQHandler+0x208>)
 8003e8a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8094 	beq.w	8003fbe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003e9e:	e08e      	b.n	8003fbe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d056      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x186>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d051      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 020a 	bic.w	r2, r2, #10
 8003ed6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a38      	ldr	r2, [pc, #224]	; (8003fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d029      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x166>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a37      	ldr	r2, [pc, #220]	; (8003fcc <HAL_DMA_IRQHandler+0x1f4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x162>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a35      	ldr	r2, [pc, #212]	; (8003fd0 <HAL_DMA_IRQHandler+0x1f8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01a      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x15c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <HAL_DMA_IRQHandler+0x1fc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d012      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x156>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a32      	ldr	r2, [pc, #200]	; (8003fd8 <HAL_DMA_IRQHandler+0x200>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00a      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x150>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a31      	ldr	r2, [pc, #196]	; (8003fdc <HAL_DMA_IRQHandler+0x204>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d102      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x14a>
 8003f1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f20:	e00e      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f26:	e00b      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f2c:	e008      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f32:	e005      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f38:	e002      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	e000      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	4a27      	ldr	r2, [pc, #156]	; (8003fe0 <HAL_DMA_IRQHandler+0x208>)
 8003f42:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d034      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f5c:	e02f      	b.n	8003fbe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2208      	movs	r2, #8
 8003f64:	409a      	lsls	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d028      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x1e8>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d023      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020e 	bic.w	r2, r2, #14
 8003f86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	2101      	movs	r1, #1
 8003f92:	fa01 f202 	lsl.w	r2, r1, r2
 8003f96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
    }
  }
  return;
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
}
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40020008 	.word	0x40020008
 8003fcc:	4002001c 	.word	0x4002001c
 8003fd0:	40020030 	.word	0x40020030
 8003fd4:	40020044 	.word	0x40020044
 8003fd8:	40020058 	.word	0x40020058
 8003fdc:	4002006c 	.word	0x4002006c
 8003fe0:	40020000 	.word	0x40020000

08003fe4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8004000:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b10      	cmp	r3, #16
 8004010:	d108      	bne.n	8004024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004022:	e007      	b.n	8004034 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
	...

08004040 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <HAL_FLASH_Program+0xd8>)
 800405c:	7e1b      	ldrb	r3, [r3, #24]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_FLASH_Program+0x26>
 8004062:	2302      	movs	r3, #2
 8004064:	e054      	b.n	8004110 <HAL_FLASH_Program+0xd0>
 8004066:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_FLASH_Program+0xd8>)
 8004068:	2201      	movs	r2, #1
 800406a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800406c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004070:	f000 f8a8 	bl	80041c4 <FLASH_WaitForLastOperation>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d144      	bne.n	8004108 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d102      	bne.n	800408a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004084:	2301      	movs	r3, #1
 8004086:	757b      	strb	r3, [r7, #21]
 8004088:	e007      	b.n	800409a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d102      	bne.n	8004096 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004090:	2302      	movs	r3, #2
 8004092:	757b      	strb	r3, [r7, #21]
 8004094:	e001      	b.n	800409a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004096:	2304      	movs	r3, #4
 8004098:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800409a:	2300      	movs	r3, #0
 800409c:	75bb      	strb	r3, [r7, #22]
 800409e:	e02d      	b.n	80040fc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80040a0:	7dbb      	ldrb	r3, [r7, #22]
 80040a2:	005a      	lsls	r2, r3, #1
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	eb02 0c03 	add.w	ip, r2, r3
 80040aa:	7dbb      	ldrb	r3, [r7, #22]
 80040ac:	0119      	lsls	r1, r3, #4
 80040ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040b2:	f1c1 0620 	rsb	r6, r1, #32
 80040b6:	f1a1 0020 	sub.w	r0, r1, #32
 80040ba:	fa22 f401 	lsr.w	r4, r2, r1
 80040be:	fa03 f606 	lsl.w	r6, r3, r6
 80040c2:	4334      	orrs	r4, r6
 80040c4:	fa23 f000 	lsr.w	r0, r3, r0
 80040c8:	4304      	orrs	r4, r0
 80040ca:	fa23 f501 	lsr.w	r5, r3, r1
 80040ce:	b2a3      	uxth	r3, r4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4660      	mov	r0, ip
 80040d4:	f000 f85a 	bl	800418c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040dc:	f000 f872 	bl	80041c4 <FLASH_WaitForLastOperation>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80040e4:	4b0d      	ldr	r3, [pc, #52]	; (800411c <HAL_FLASH_Program+0xdc>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	4a0c      	ldr	r2, [pc, #48]	; (800411c <HAL_FLASH_Program+0xdc>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80040f6:	7dbb      	ldrb	r3, [r7, #22]
 80040f8:	3301      	adds	r3, #1
 80040fa:	75bb      	strb	r3, [r7, #22]
 80040fc:	7dba      	ldrb	r2, [r7, #22]
 80040fe:	7d7b      	ldrb	r3, [r7, #21]
 8004100:	429a      	cmp	r2, r3
 8004102:	d3cd      	bcc.n	80040a0 <HAL_FLASH_Program+0x60>
 8004104:	e000      	b.n	8004108 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004106:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_FLASH_Program+0xd8>)
 800410a:	2200      	movs	r2, #0
 800410c:	761a      	strb	r2, [r3, #24]

  return status;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004118:	200002c8 	.word	0x200002c8
 800411c:	40022000 	.word	0x40022000

08004120 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <HAL_FLASH_Unlock+0x40>)
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <HAL_FLASH_Unlock+0x40>)
 8004138:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_FLASH_Unlock+0x44>)
 800413a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <HAL_FLASH_Unlock+0x40>)
 800413e:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <HAL_FLASH_Unlock+0x48>)
 8004140:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <HAL_FLASH_Unlock+0x40>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004152:	79fb      	ldrb	r3, [r7, #7]
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000
 8004164:	45670123 	.word	0x45670123
 8004168:	cdef89ab 	.word	0xcdef89ab

0800416c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_FLASH_Lock+0x1c>)
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_FLASH_Lock+0x1c>)
 8004176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40022000 	.word	0x40022000

0800418c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <FLASH_Program_HalfWord+0x30>)
 800419a:	2200      	movs	r2, #0
 800419c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <FLASH_Program_HalfWord+0x34>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <FLASH_Program_HalfWord+0x34>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	887a      	ldrh	r2, [r7, #2]
 80041ae:	801a      	strh	r2, [r3, #0]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	200002c8 	.word	0x200002c8
 80041c0:	40022000 	.word	0x40022000

080041c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7ff fb42 	bl	8003854 <HAL_GetTick>
 80041d0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041d2:	e010      	b.n	80041f6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d00c      	beq.n	80041f6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <FLASH_WaitForLastOperation+0x2e>
 80041e2:	f7ff fb37 	bl	8003854 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d201      	bcs.n	80041f6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e025      	b.n	8004242 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e8      	bne.n	80041d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 8004210:	2220      	movs	r2, #32
 8004212:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004238:	f000 f80a 	bl	8004250 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40022000 	.word	0x40022000

08004250 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800425a:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004266:	4b21      	ldr	r3, [pc, #132]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 8004270:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f043 0310 	orr.w	r3, r3, #16
 8004278:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800427a:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004286:	4b19      	ldr	r3, [pc, #100]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	4a17      	ldr	r2, [pc, #92]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 8004290:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f043 0304 	orr.w	r3, r3, #4
 8004298:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f043 0304 	orr.w	r3, r3, #4
 80042ae:	4a0f      	ldr	r2, [pc, #60]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 80042b0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f240 1201 	movw	r2, #257	; 0x101
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d106      	bne.n	80042d6 <FLASH_SetErrorCode+0x86>
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	4a06      	ldr	r2, [pc, #24]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	61d3      	str	r3, [r2, #28]
}  
 80042d4:	e002      	b.n	80042dc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042d6:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60d3      	str	r3, [r2, #12]
}  
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40022000 	.word	0x40022000
 80042ec:	200002c8 	.word	0x200002c8

080042f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004302:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_FLASHEx_Erase+0xd0>)
 8004304:	7e1b      	ldrb	r3, [r3, #24]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_FLASHEx_Erase+0x1e>
 800430a:	2302      	movs	r3, #2
 800430c:	e053      	b.n	80043b6 <HAL_FLASHEx_Erase+0xc6>
 800430e:	4b2c      	ldr	r3, [pc, #176]	; (80043c0 <HAL_FLASHEx_Erase+0xd0>)
 8004310:	2201      	movs	r2, #1
 8004312:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d116      	bne.n	800434a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800431c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004320:	f7ff ff50 	bl	80041c4 <FLASH_WaitForLastOperation>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d141      	bne.n	80043ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800432a:	2001      	movs	r0, #1
 800432c:	f000 f84c 	bl	80043c8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004330:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004334:	f7ff ff46 	bl	80041c4 <FLASH_WaitForLastOperation>
 8004338:	4603      	mov	r3, r0
 800433a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800433c:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <HAL_FLASHEx_Erase+0xd4>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <HAL_FLASHEx_Erase+0xd4>)
 8004342:	f023 0304 	bic.w	r3, r3, #4
 8004346:	6113      	str	r3, [r2, #16]
 8004348:	e031      	b.n	80043ae <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800434a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800434e:	f7ff ff39 	bl	80041c4 <FLASH_WaitForLastOperation>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d12a      	bne.n	80043ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f04f 32ff 	mov.w	r2, #4294967295
 800435e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	e019      	b.n	800439c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004368:	68b8      	ldr	r0, [r7, #8]
 800436a:	f000 f849 	bl	8004400 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800436e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004372:	f7ff ff27 	bl	80041c4 <FLASH_WaitForLastOperation>
 8004376:	4603      	mov	r3, r0
 8004378:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_FLASHEx_Erase+0xd4>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <HAL_FLASHEx_Erase+0xd4>)
 8004380:	f023 0302 	bic.w	r3, r3, #2
 8004384:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	601a      	str	r2, [r3, #0]
            break;
 8004392:	e00c      	b.n	80043ae <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800439a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	029a      	lsls	r2, r3, #10
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d3dc      	bcc.n	8004368 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80043ae:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <HAL_FLASHEx_Erase+0xd0>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	761a      	strb	r2, [r3, #24]

  return status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200002c8 	.word	0x200002c8
 80043c4:	40022000 	.word	0x40022000

080043c8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <FLASH_MassErase+0x30>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <FLASH_MassErase+0x34>)
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <FLASH_MassErase+0x34>)
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <FLASH_MassErase+0x34>)
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	4a05      	ldr	r2, [pc, #20]	; (80043fc <FLASH_MassErase+0x34>)
 80043e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr
 80043f8:	200002c8 	.word	0x200002c8
 80043fc:	40022000 	.word	0x40022000

08004400 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <FLASH_PageErase+0x38>)
 800440a:	2200      	movs	r2, #0
 800440c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <FLASH_PageErase+0x3c>)
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <FLASH_PageErase+0x3c>)
 8004414:	f043 0302 	orr.w	r3, r3, #2
 8004418:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <FLASH_PageErase+0x3c>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004420:	4b06      	ldr	r3, [pc, #24]	; (800443c <FLASH_PageErase+0x3c>)
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	4a05      	ldr	r2, [pc, #20]	; (800443c <FLASH_PageErase+0x3c>)
 8004426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800442a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	200002c8 	.word	0x200002c8
 800443c:	40022000 	.word	0x40022000

08004440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004440:	b480      	push	{r7}
 8004442:	b08b      	sub	sp, #44	; 0x2c
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800444e:	2300      	movs	r3, #0
 8004450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004452:	e169      	b.n	8004728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004454:	2201      	movs	r2, #1
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	429a      	cmp	r2, r3
 800446e:	f040 8158 	bne.w	8004722 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4a9a      	ldr	r2, [pc, #616]	; (80046e0 <HAL_GPIO_Init+0x2a0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d05e      	beq.n	800453a <HAL_GPIO_Init+0xfa>
 800447c:	4a98      	ldr	r2, [pc, #608]	; (80046e0 <HAL_GPIO_Init+0x2a0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d875      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 8004482:	4a98      	ldr	r2, [pc, #608]	; (80046e4 <HAL_GPIO_Init+0x2a4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d058      	beq.n	800453a <HAL_GPIO_Init+0xfa>
 8004488:	4a96      	ldr	r2, [pc, #600]	; (80046e4 <HAL_GPIO_Init+0x2a4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d86f      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 800448e:	4a96      	ldr	r2, [pc, #600]	; (80046e8 <HAL_GPIO_Init+0x2a8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d052      	beq.n	800453a <HAL_GPIO_Init+0xfa>
 8004494:	4a94      	ldr	r2, [pc, #592]	; (80046e8 <HAL_GPIO_Init+0x2a8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d869      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 800449a:	4a94      	ldr	r2, [pc, #592]	; (80046ec <HAL_GPIO_Init+0x2ac>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d04c      	beq.n	800453a <HAL_GPIO_Init+0xfa>
 80044a0:	4a92      	ldr	r2, [pc, #584]	; (80046ec <HAL_GPIO_Init+0x2ac>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d863      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 80044a6:	4a92      	ldr	r2, [pc, #584]	; (80046f0 <HAL_GPIO_Init+0x2b0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d046      	beq.n	800453a <HAL_GPIO_Init+0xfa>
 80044ac:	4a90      	ldr	r2, [pc, #576]	; (80046f0 <HAL_GPIO_Init+0x2b0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d85d      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 80044b2:	2b12      	cmp	r3, #18
 80044b4:	d82a      	bhi.n	800450c <HAL_GPIO_Init+0xcc>
 80044b6:	2b12      	cmp	r3, #18
 80044b8:	d859      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <HAL_GPIO_Init+0x80>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	0800453b 	.word	0x0800453b
 80044c4:	08004515 	.word	0x08004515
 80044c8:	08004527 	.word	0x08004527
 80044cc:	08004569 	.word	0x08004569
 80044d0:	0800456f 	.word	0x0800456f
 80044d4:	0800456f 	.word	0x0800456f
 80044d8:	0800456f 	.word	0x0800456f
 80044dc:	0800456f 	.word	0x0800456f
 80044e0:	0800456f 	.word	0x0800456f
 80044e4:	0800456f 	.word	0x0800456f
 80044e8:	0800456f 	.word	0x0800456f
 80044ec:	0800456f 	.word	0x0800456f
 80044f0:	0800456f 	.word	0x0800456f
 80044f4:	0800456f 	.word	0x0800456f
 80044f8:	0800456f 	.word	0x0800456f
 80044fc:	0800456f 	.word	0x0800456f
 8004500:	0800456f 	.word	0x0800456f
 8004504:	0800451d 	.word	0x0800451d
 8004508:	08004531 	.word	0x08004531
 800450c:	4a79      	ldr	r2, [pc, #484]	; (80046f4 <HAL_GPIO_Init+0x2b4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004512:	e02c      	b.n	800456e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	623b      	str	r3, [r7, #32]
          break;
 800451a:	e029      	b.n	8004570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	3304      	adds	r3, #4
 8004522:	623b      	str	r3, [r7, #32]
          break;
 8004524:	e024      	b.n	8004570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	3308      	adds	r3, #8
 800452c:	623b      	str	r3, [r7, #32]
          break;
 800452e:	e01f      	b.n	8004570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	330c      	adds	r3, #12
 8004536:	623b      	str	r3, [r7, #32]
          break;
 8004538:	e01a      	b.n	8004570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004542:	2304      	movs	r3, #4
 8004544:	623b      	str	r3, [r7, #32]
          break;
 8004546:	e013      	b.n	8004570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d105      	bne.n	800455c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004550:	2308      	movs	r3, #8
 8004552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	611a      	str	r2, [r3, #16]
          break;
 800455a:	e009      	b.n	8004570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800455c:	2308      	movs	r3, #8
 800455e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	615a      	str	r2, [r3, #20]
          break;
 8004566:	e003      	b.n	8004570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004568:	2300      	movs	r3, #0
 800456a:	623b      	str	r3, [r7, #32]
          break;
 800456c:	e000      	b.n	8004570 <HAL_GPIO_Init+0x130>
          break;
 800456e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2bff      	cmp	r3, #255	; 0xff
 8004574:	d801      	bhi.n	800457a <HAL_GPIO_Init+0x13a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	e001      	b.n	800457e <HAL_GPIO_Init+0x13e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2bff      	cmp	r3, #255	; 0xff
 8004584:	d802      	bhi.n	800458c <HAL_GPIO_Init+0x14c>
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	e002      	b.n	8004592 <HAL_GPIO_Init+0x152>
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	3b08      	subs	r3, #8
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	210f      	movs	r1, #15
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	401a      	ands	r2, r3
 80045a4:	6a39      	ldr	r1, [r7, #32]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ac:	431a      	orrs	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80b1 	beq.w	8004722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045c0:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <HAL_GPIO_Init+0x2b8>)
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	4a4c      	ldr	r2, [pc, #304]	; (80046f8 <HAL_GPIO_Init+0x2b8>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6193      	str	r3, [r2, #24]
 80045cc:	4b4a      	ldr	r3, [pc, #296]	; (80046f8 <HAL_GPIO_Init+0x2b8>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045d8:	4a48      	ldr	r2, [pc, #288]	; (80046fc <HAL_GPIO_Init+0x2bc>)
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	3302      	adds	r3, #2
 80045e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	220f      	movs	r2, #15
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4013      	ands	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a40      	ldr	r2, [pc, #256]	; (8004700 <HAL_GPIO_Init+0x2c0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_GPIO_Init+0x1ec>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a3f      	ldr	r2, [pc, #252]	; (8004704 <HAL_GPIO_Init+0x2c4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00d      	beq.n	8004628 <HAL_GPIO_Init+0x1e8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a3e      	ldr	r2, [pc, #248]	; (8004708 <HAL_GPIO_Init+0x2c8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <HAL_GPIO_Init+0x1e4>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a3d      	ldr	r2, [pc, #244]	; (800470c <HAL_GPIO_Init+0x2cc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_GPIO_Init+0x1e0>
 800461c:	2303      	movs	r3, #3
 800461e:	e006      	b.n	800462e <HAL_GPIO_Init+0x1ee>
 8004620:	2304      	movs	r3, #4
 8004622:	e004      	b.n	800462e <HAL_GPIO_Init+0x1ee>
 8004624:	2302      	movs	r3, #2
 8004626:	e002      	b.n	800462e <HAL_GPIO_Init+0x1ee>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <HAL_GPIO_Init+0x1ee>
 800462c:	2300      	movs	r3, #0
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	f002 0203 	and.w	r2, r2, #3
 8004634:	0092      	lsls	r2, r2, #2
 8004636:	4093      	lsls	r3, r2
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800463e:	492f      	ldr	r1, [pc, #188]	; (80046fc <HAL_GPIO_Init+0x2bc>)
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	3302      	adds	r3, #2
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004658:	4b2d      	ldr	r3, [pc, #180]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	492c      	ldr	r1, [pc, #176]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
 8004664:	e006      	b.n	8004674 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004666:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	43db      	mvns	r3, r3
 800466e:	4928      	ldr	r1, [pc, #160]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004670:	4013      	ands	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d006      	beq.n	800468e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004680:	4b23      	ldr	r3, [pc, #140]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	4922      	ldr	r1, [pc, #136]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	43db      	mvns	r3, r3
 8004696:	491e      	ldr	r1, [pc, #120]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004698:	4013      	ands	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d006      	beq.n	80046b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046a8:	4b19      	ldr	r3, [pc, #100]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	4918      	ldr	r1, [pc, #96]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]
 80046b4:	e006      	b.n	80046c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046b6:	4b16      	ldr	r3, [pc, #88]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	43db      	mvns	r3, r3
 80046be:	4914      	ldr	r1, [pc, #80]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d021      	beq.n	8004714 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	490e      	ldr	r1, [pc, #56]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60cb      	str	r3, [r1, #12]
 80046dc:	e021      	b.n	8004722 <HAL_GPIO_Init+0x2e2>
 80046de:	bf00      	nop
 80046e0:	10320000 	.word	0x10320000
 80046e4:	10310000 	.word	0x10310000
 80046e8:	10220000 	.word	0x10220000
 80046ec:	10210000 	.word	0x10210000
 80046f0:	10120000 	.word	0x10120000
 80046f4:	10110000 	.word	0x10110000
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40010000 	.word	0x40010000
 8004700:	40010800 	.word	0x40010800
 8004704:	40010c00 	.word	0x40010c00
 8004708:	40011000 	.word	0x40011000
 800470c:	40011400 	.word	0x40011400
 8004710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_GPIO_Init+0x304>)
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	43db      	mvns	r3, r3
 800471c:	4909      	ldr	r1, [pc, #36]	; (8004744 <HAL_GPIO_Init+0x304>)
 800471e:	4013      	ands	r3, r2
 8004720:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	3301      	adds	r3, #1
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	f47f ae8e 	bne.w	8004454 <HAL_GPIO_Init+0x14>
  }
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	372c      	adds	r7, #44	; 0x2c
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	40010400 	.word	0x40010400

08004748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	887b      	ldrh	r3, [r7, #2]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
 8004764:	e001      	b.n	800476a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	807b      	strh	r3, [r7, #2]
 8004782:	4613      	mov	r3, r2
 8004784:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004786:	787b      	ldrb	r3, [r7, #1]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800478c:	887a      	ldrh	r2, [r7, #2]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004792:	e003      	b.n	800479c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004794:	887b      	ldrh	r3, [r7, #2]
 8004796:	041a      	lsls	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	611a      	str	r2, [r3, #16]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <HAL_PWR_EnableBkUpAccess+0x14>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	420e0020 	.word	0x420e0020

080047c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e26c      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8087 	beq.w	80048ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047e0:	4b92      	ldr	r3, [pc, #584]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d00c      	beq.n	8004806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047ec:	4b8f      	ldr	r3, [pc, #572]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d112      	bne.n	800481e <HAL_RCC_OscConfig+0x5e>
 80047f8:	4b8c      	ldr	r3, [pc, #560]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004804:	d10b      	bne.n	800481e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004806:	4b89      	ldr	r3, [pc, #548]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d06c      	beq.n	80048ec <HAL_RCC_OscConfig+0x12c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d168      	bne.n	80048ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e246      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d106      	bne.n	8004836 <HAL_RCC_OscConfig+0x76>
 8004828:	4b80      	ldr	r3, [pc, #512]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a7f      	ldr	r2, [pc, #508]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 800482e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e02e      	b.n	8004894 <HAL_RCC_OscConfig+0xd4>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0x98>
 800483e:	4b7b      	ldr	r3, [pc, #492]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a7a      	ldr	r2, [pc, #488]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	4b78      	ldr	r3, [pc, #480]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a77      	ldr	r2, [pc, #476]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e01d      	b.n	8004894 <HAL_RCC_OscConfig+0xd4>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004860:	d10c      	bne.n	800487c <HAL_RCC_OscConfig+0xbc>
 8004862:	4b72      	ldr	r3, [pc, #456]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a71      	ldr	r2, [pc, #452]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	4b6f      	ldr	r3, [pc, #444]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a6e      	ldr	r2, [pc, #440]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e00b      	b.n	8004894 <HAL_RCC_OscConfig+0xd4>
 800487c:	4b6b      	ldr	r3, [pc, #428]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a6a      	ldr	r2, [pc, #424]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	4b68      	ldr	r3, [pc, #416]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a67      	ldr	r2, [pc, #412]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 800488e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fe ffda 	bl	8003854 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fe ffd6 	bl	8003854 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	; 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e1fa      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0xe4>
 80048c2:	e014      	b.n	80048ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fe ffc6 	bl	8003854 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fe ffc2 	bl	8003854 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	; 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e1e6      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048de:	4b53      	ldr	r3, [pc, #332]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x10c>
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d063      	beq.n	80049c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048fa:	4b4c      	ldr	r3, [pc, #304]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004906:	4b49      	ldr	r3, [pc, #292]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b08      	cmp	r3, #8
 8004910:	d11c      	bne.n	800494c <HAL_RCC_OscConfig+0x18c>
 8004912:	4b46      	ldr	r3, [pc, #280]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d116      	bne.n	800494c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491e:	4b43      	ldr	r3, [pc, #268]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_RCC_OscConfig+0x176>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d001      	beq.n	8004936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e1ba      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004936:	4b3d      	ldr	r3, [pc, #244]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4939      	ldr	r1, [pc, #228]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494a:	e03a      	b.n	80049c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004954:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004956:	2201      	movs	r2, #1
 8004958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495a:	f7fe ff7b 	bl	8003854 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004962:	f7fe ff77 	bl	8003854 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e19b      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004974:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004980:	4b2a      	ldr	r3, [pc, #168]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4927      	ldr	r1, [pc, #156]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]
 8004994:	e015      	b.n	80049c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004996:	4b26      	ldr	r3, [pc, #152]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fe ff5a 	bl	8003854 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a4:	f7fe ff56 	bl	8003854 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e17a      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b6:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d03a      	beq.n	8004a44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d019      	beq.n	8004a0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d6:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049dc:	f7fe ff3a 	bl	8003854 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e4:	f7fe ff36 	bl	8003854 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e15a      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <HAL_RCC_OscConfig+0x26c>)
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a02:	2001      	movs	r0, #1
 8004a04:	f000 fad8 	bl	8004fb8 <RCC_Delay>
 8004a08:	e01c      	b.n	8004a44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a10:	f7fe ff20 	bl	8003854 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a16:	e00f      	b.n	8004a38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a18:	f7fe ff1c 	bl	8003854 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d908      	bls.n	8004a38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e140      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	42420000 	.word	0x42420000
 8004a34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a38:	4b9e      	ldr	r3, [pc, #632]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e9      	bne.n	8004a18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80a6 	beq.w	8004b9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a52:	2300      	movs	r3, #0
 8004a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a56:	4b97      	ldr	r3, [pc, #604]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10d      	bne.n	8004a7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a62:	4b94      	ldr	r3, [pc, #592]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	4a93      	ldr	r2, [pc, #588]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	61d3      	str	r3, [r2, #28]
 8004a6e:	4b91      	ldr	r3, [pc, #580]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7e:	4b8e      	ldr	r3, [pc, #568]	; (8004cb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d118      	bne.n	8004abc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a8a:	4b8b      	ldr	r3, [pc, #556]	; (8004cb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a8a      	ldr	r2, [pc, #552]	; (8004cb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a96:	f7fe fedd 	bl	8003854 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9e:	f7fe fed9 	bl	8003854 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b64      	cmp	r3, #100	; 0x64
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e0fd      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab0:	4b81      	ldr	r3, [pc, #516]	; (8004cb8 <HAL_RCC_OscConfig+0x4f8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x312>
 8004ac4:	4b7b      	ldr	r3, [pc, #492]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	4a7a      	ldr	r2, [pc, #488]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	6213      	str	r3, [r2, #32]
 8004ad0:	e02d      	b.n	8004b2e <HAL_RCC_OscConfig+0x36e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x334>
 8004ada:	4b76      	ldr	r3, [pc, #472]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	4a75      	ldr	r2, [pc, #468]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	6213      	str	r3, [r2, #32]
 8004ae6:	4b73      	ldr	r3, [pc, #460]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	4a72      	ldr	r2, [pc, #456]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004aec:	f023 0304 	bic.w	r3, r3, #4
 8004af0:	6213      	str	r3, [r2, #32]
 8004af2:	e01c      	b.n	8004b2e <HAL_RCC_OscConfig+0x36e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b05      	cmp	r3, #5
 8004afa:	d10c      	bne.n	8004b16 <HAL_RCC_OscConfig+0x356>
 8004afc:	4b6d      	ldr	r3, [pc, #436]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4a6c      	ldr	r2, [pc, #432]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b02:	f043 0304 	orr.w	r3, r3, #4
 8004b06:	6213      	str	r3, [r2, #32]
 8004b08:	4b6a      	ldr	r3, [pc, #424]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	4a69      	ldr	r2, [pc, #420]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	6213      	str	r3, [r2, #32]
 8004b14:	e00b      	b.n	8004b2e <HAL_RCC_OscConfig+0x36e>
 8004b16:	4b67      	ldr	r3, [pc, #412]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	4a66      	ldr	r2, [pc, #408]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	6213      	str	r3, [r2, #32]
 8004b22:	4b64      	ldr	r3, [pc, #400]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	4a63      	ldr	r2, [pc, #396]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b28:	f023 0304 	bic.w	r3, r3, #4
 8004b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d015      	beq.n	8004b62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b36:	f7fe fe8d 	bl	8003854 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3e:	f7fe fe89 	bl	8003854 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e0ab      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b54:	4b57      	ldr	r3, [pc, #348]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0ee      	beq.n	8004b3e <HAL_RCC_OscConfig+0x37e>
 8004b60:	e014      	b.n	8004b8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b62:	f7fe fe77 	bl	8003854 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fe fe73 	bl	8003854 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e095      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b80:	4b4c      	ldr	r3, [pc, #304]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ee      	bne.n	8004b6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b92:	4b48      	ldr	r3, [pc, #288]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4a47      	ldr	r2, [pc, #284]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 8081 	beq.w	8004caa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ba8:	4b42      	ldr	r3, [pc, #264]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d061      	beq.n	8004c78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d146      	bne.n	8004c4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbc:	4b3f      	ldr	r3, [pc, #252]	; (8004cbc <HAL_RCC_OscConfig+0x4fc>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fe fe47 	bl	8003854 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fe fe43 	bl	8003854 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e067      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d108      	bne.n	8004c04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004bf2:	4b30      	ldr	r3, [pc, #192]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	492d      	ldr	r1, [pc, #180]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c04:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a19      	ldr	r1, [r3, #32]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	430b      	orrs	r3, r1
 8004c16:	4927      	ldr	r1, [pc, #156]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c1c:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <HAL_RCC_OscConfig+0x4fc>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fe fe17 	bl	8003854 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2a:	f7fe fe13 	bl	8003854 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e037      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x46a>
 8004c48:	e02f      	b.n	8004caa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4a:	4b1c      	ldr	r3, [pc, #112]	; (8004cbc <HAL_RCC_OscConfig+0x4fc>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fe fe00 	bl	8003854 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fe fdfc 	bl	8003854 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e020      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x498>
 8004c76:	e018      	b.n	8004caa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e013      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCC_OscConfig+0x4f4>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d106      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40007000 	.word	0x40007000
 8004cbc:	42420060 	.word	0x42420060

08004cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0d0      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b6a      	ldr	r3, [pc, #424]	; (8004e80 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d910      	bls.n	8004d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b67      	ldr	r3, [pc, #412]	; (8004e80 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 0207 	bic.w	r2, r3, #7
 8004cea:	4965      	ldr	r1, [pc, #404]	; (8004e80 <HAL_RCC_ClockConfig+0x1c0>)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b63      	ldr	r3, [pc, #396]	; (8004e80 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0b8      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d020      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d1c:	4b59      	ldr	r3, [pc, #356]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a58      	ldr	r2, [pc, #352]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d34:	4b53      	ldr	r3, [pc, #332]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a52      	ldr	r2, [pc, #328]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d40:	4b50      	ldr	r3, [pc, #320]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	494d      	ldr	r1, [pc, #308]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d040      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d107      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d115      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e07f      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d107      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7e:	4b41      	ldr	r3, [pc, #260]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e073      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8e:	4b3d      	ldr	r3, [pc, #244]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e06b      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d9e:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f023 0203 	bic.w	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4936      	ldr	r1, [pc, #216]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004db0:	f7fe fd50 	bl	8003854 <HAL_GetTick>
 8004db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db6:	e00a      	b.n	8004dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db8:	f7fe fd4c 	bl	8003854 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e053      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dce:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f003 020c 	and.w	r2, r3, #12
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d1eb      	bne.n	8004db8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004de0:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <HAL_RCC_ClockConfig+0x1c0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d210      	bcs.n	8004e10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dee:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <HAL_RCC_ClockConfig+0x1c0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 0207 	bic.w	r2, r3, #7
 8004df6:	4922      	ldr	r1, [pc, #136]	; (8004e80 <HAL_RCC_ClockConfig+0x1c0>)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfe:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e032      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e1c:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4916      	ldr	r1, [pc, #88]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e3a:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	490e      	ldr	r1, [pc, #56]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e4e:	f000 f821 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8004e52:	4602      	mov	r2, r0
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	091b      	lsrs	r3, r3, #4
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	490a      	ldr	r1, [pc, #40]	; (8004e88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e60:	5ccb      	ldrb	r3, [r1, r3]
 8004e62:	fa22 f303 	lsr.w	r3, r2, r3
 8004e66:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <HAL_RCC_ClockConfig+0x1cc>)
 8004e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_ClockConfig+0x1d0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe fcae 	bl	80037d0 <HAL_InitTick>

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40022000 	.word	0x40022000
 8004e84:	40021000 	.word	0x40021000
 8004e88:	08007870 	.word	0x08007870
 8004e8c:	20000000 	.word	0x20000000
 8004e90:	20000004 	.word	0x20000004

08004e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e94:	b490      	push	{r4, r7}
 8004e96:	b08a      	sub	sp, #40	; 0x28
 8004e98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e9a:	4b2a      	ldr	r3, [pc, #168]	; (8004f44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e9c:	1d3c      	adds	r4, r7, #4
 8004e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ea4:	f240 2301 	movw	r3, #513	; 0x201
 8004ea8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ebe:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d002      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d003      	beq.n	8004eda <HAL_RCC_GetSysClockFreq+0x46>
 8004ed2:	e02d      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ed4:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed6:	623b      	str	r3, [r7, #32]
      break;
 8004ed8:	e02d      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	0c9b      	lsrs	r3, r3, #18
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004eec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d013      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0c5b      	lsrs	r3, r3, #17
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f06:	4413      	add	r3, r2
 8004f08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	4a0e      	ldr	r2, [pc, #56]	; (8004f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f12:	fb02 f203 	mul.w	r2, r2, r3
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1e:	e004      	b.n	8004f2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	623b      	str	r3, [r7, #32]
      break;
 8004f2e:	e002      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f30:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f32:	623b      	str	r3, [r7, #32]
      break;
 8004f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f36:	6a3b      	ldr	r3, [r7, #32]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3728      	adds	r7, #40	; 0x28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc90      	pop	{r4, r7}
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	08007844 	.word	0x08007844
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	007a1200 	.word	0x007a1200
 8004f50:	003d0900 	.word	0x003d0900

08004f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f58:	4b02      	ldr	r3, [pc, #8]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr
 8004f64:	20000000 	.word	0x20000000

08004f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f6c:	f7ff fff2 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4903      	ldr	r1, [pc, #12]	; (8004f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	08007880 	.word	0x08007880

08004f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f94:	f7ff ffde 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	0adb      	lsrs	r3, r3, #11
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	4903      	ldr	r1, [pc, #12]	; (8004fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa6:	5ccb      	ldrb	r3, [r1, r3]
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	08007880 	.word	0x08007880

08004fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <RCC_Delay+0x34>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <RCC_Delay+0x38>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	0a5b      	lsrs	r3, r3, #9
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004fd4:	bf00      	nop
  }
  while (Delay --);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1e5a      	subs	r2, r3, #1
 8004fda:	60fa      	str	r2, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1f9      	bne.n	8004fd4 <RCC_Delay+0x1c>
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr
 8004fec:	20000000 	.word	0x20000000
 8004ff0:	10624dd3 	.word	0x10624dd3

08004ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d07d      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005010:	2300      	movs	r3, #0
 8005012:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005014:	4b4f      	ldr	r3, [pc, #316]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10d      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005020:	4b4c      	ldr	r3, [pc, #304]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	4a4b      	ldr	r2, [pc, #300]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502a:	61d3      	str	r3, [r2, #28]
 800502c:	4b49      	ldr	r3, [pc, #292]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005038:	2301      	movs	r3, #1
 800503a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	4b46      	ldr	r3, [pc, #280]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d118      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005048:	4b43      	ldr	r3, [pc, #268]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a42      	ldr	r2, [pc, #264]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800504e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005052:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005054:	f7fe fbfe 	bl	8003854 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505a:	e008      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505c:	f7fe fbfa 	bl	8003854 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	; 0x64
 8005068:	d901      	bls.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e06d      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506e:	4b3a      	ldr	r3, [pc, #232]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005082:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d02e      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	429a      	cmp	r2, r3
 8005096:	d027      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005098:	4b2e      	ldr	r3, [pc, #184]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050a2:	4b2e      	ldr	r3, [pc, #184]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050a8:	4b2c      	ldr	r3, [pc, #176]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050ae:	4a29      	ldr	r2, [pc, #164]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d014      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050be:	f7fe fbc9 	bl	8003854 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c4:	e00a      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c6:	f7fe fbc5 	bl	8003854 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e036      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050dc:	4b1d      	ldr	r3, [pc, #116]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ee      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4917      	ldr	r1, [pc, #92]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d105      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005100:	4b14      	ldr	r3, [pc, #80]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	4a13      	ldr	r2, [pc, #76]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005118:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	490b      	ldr	r1, [pc, #44]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005126:	4313      	orrs	r3, r2
 8005128:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005136:	4b07      	ldr	r3, [pc, #28]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	4904      	ldr	r1, [pc, #16]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005144:	4313      	orrs	r3, r2
 8005146:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000
 8005158:	40007000 	.word	0x40007000
 800515c:	42420440 	.word	0x42420440

08005160 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b08d      	sub	sp, #52	; 0x34
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005168:	4b5a      	ldr	r3, [pc, #360]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800516a:	f107 040c 	add.w	r4, r7, #12
 800516e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005174:	f240 2301 	movw	r3, #513	; 0x201
 8005178:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	2300      	movs	r3, #0
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005182:	2300      	movs	r3, #0
 8005184:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	2300      	movs	r3, #0
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b10      	cmp	r3, #16
 8005192:	d00a      	beq.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b10      	cmp	r3, #16
 8005198:	f200 8091 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d04c      	beq.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d07c      	beq.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80051a8:	e089      	b.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80051aa:	4b4b      	ldr	r3, [pc, #300]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80051b0:	4b49      	ldr	r3, [pc, #292]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8082 	beq.w	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	0c9b      	lsrs	r3, r3, #18
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80051ca:	4413      	add	r3, r2
 80051cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80051d0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d018      	beq.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051dc:	4b3e      	ldr	r3, [pc, #248]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0c5b      	lsrs	r3, r3, #17
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80051ea:	4413      	add	r3, r2
 80051ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80051fc:	4a37      	ldr	r2, [pc, #220]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	fbb2 f2f3 	udiv	r2, r2, r3
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520c:	e004      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	4a33      	ldr	r2, [pc, #204]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005218:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005224:	d102      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800522a:	e04a      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	4a2c      	ldr	r2, [pc, #176]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800523a:	e042      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800523c:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524c:	d108      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8005258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
 800525e:	e01f      	b.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800526a:	d109      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800526c:	4b1a      	ldr	r3, [pc, #104]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8005278:	f649 4340 	movw	r3, #40000	; 0x9c40
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
 800527e:	e00f      	b.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800528a:	d11c      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800528c:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d016      	beq.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8005298:	f24f 4324 	movw	r3, #62500	; 0xf424
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800529e:	e012      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80052a0:	e011      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80052a2:	f7ff fe75 	bl	8004f90 <HAL_RCC_GetPCLK2Freq>
 80052a6:	4602      	mov	r2, r0
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	0b9b      	lsrs	r3, r3, #14
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	3301      	adds	r3, #1
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80052bc:	e004      	b.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80052be:	bf00      	nop
 80052c0:	e002      	b.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80052c2:	bf00      	nop
 80052c4:	e000      	b.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80052c6:	bf00      	nop
    }
  }
  return (frequency);
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3734      	adds	r7, #52	; 0x34
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd90      	pop	{r4, r7, pc}
 80052d2:	bf00      	nop
 80052d4:	08007854 	.word	0x08007854
 80052d8:	40021000 	.word	0x40021000
 80052dc:	007a1200 	.word	0x007a1200
 80052e0:	003d0900 	.word	0x003d0900
 80052e4:	aaaaaaab 	.word	0xaaaaaaab

080052e8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e084      	b.n	8005408 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	7c5b      	ldrb	r3, [r3, #17]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fe f89c 	bl	800344c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f9ea 	bl	80056f4 <HAL_RTC_WaitForSynchro>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2204      	movs	r2, #4
 800532a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e06b      	b.n	8005408 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 faa3 	bl	800587c <RTC_EnterInitMode>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d004      	beq.n	8005346 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2204      	movs	r2, #4
 8005340:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e060      	b.n	8005408 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0207 	bic.w	r2, r2, #7
 8005354:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800535e:	4b2c      	ldr	r3, [pc, #176]	; (8005410 <HAL_RTC_Init+0x128>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	4a2b      	ldr	r2, [pc, #172]	; (8005410 <HAL_RTC_Init+0x128>)
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800536a:	4b29      	ldr	r3, [pc, #164]	; (8005410 <HAL_RTC_Init+0x128>)
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	4926      	ldr	r1, [pc, #152]	; (8005410 <HAL_RTC_Init+0x128>)
 8005378:	4313      	orrs	r3, r2
 800537a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d003      	beq.n	800538e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	e00e      	b.n	80053ac <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800538e:	2001      	movs	r0, #1
 8005390:	f7ff fee6 	bl	8005160 <HAL_RCCEx_GetPeriphCLKFreq>
 8005394:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2204      	movs	r2, #4
 80053a0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e030      	b.n	8005408 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f023 010f 	bic.w	r1, r3, #15
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	0c1a      	lsrs	r2, r3, #16
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0c1b      	lsrs	r3, r3, #16
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	b291      	uxth	r1, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	430b      	orrs	r3, r1
 80053d6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fa77 	bl	80058cc <RTC_ExitInitMode>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d004      	beq.n	80053ee <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2204      	movs	r2, #4
 80053e8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e00c      	b.n	8005408 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005406:	2300      	movs	r3, #0
  }
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40006c00 	.word	0x40006c00

08005414 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_RTC_SetTime+0x20>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e080      	b.n	800553a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	7c1b      	ldrb	r3, [r3, #16]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_RTC_SetTime+0x30>
 8005440:	2302      	movs	r3, #2
 8005442:	e07a      	b.n	800553a <HAL_RTC_SetTime+0x126>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2202      	movs	r2, #2
 800544e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d113      	bne.n	800547e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005460:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	4619      	mov	r1, r3
 800546a:	460b      	mov	r3, r1
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	1a5b      	subs	r3, r3, r1
 8005470:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005472:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005478:	4413      	add	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e01e      	b.n	80054bc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fa67 	bl	8005956 <RTC_Bcd2ToByte>
 8005488:	4603      	mov	r3, r0
 800548a:	461a      	mov	r2, r3
 800548c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005490:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fa5c 	bl	8005956 <RTC_Bcd2ToByte>
 800549e:	4603      	mov	r3, r0
 80054a0:	461a      	mov	r2, r3
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80054aa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	789b      	ldrb	r3, [r3, #2]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fa50 	bl	8005956 <RTC_Bcd2ToByte>
 80054b6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80054b8:	4423      	add	r3, r4
 80054ba:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80054bc:	6979      	ldr	r1, [r7, #20]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 f975 	bl	80057ae <RTC_WriteTimeCounter>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2204      	movs	r2, #4
 80054ce:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e02f      	b.n	800553a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0205 	bic.w	r2, r2, #5
 80054e8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f986 	bl	80057fc <RTC_ReadAlarmCounter>
 80054f0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d018      	beq.n	800552c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d214      	bcs.n	800552c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005508:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800550c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800550e:	6939      	ldr	r1, [r7, #16]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f98c 	bl	800582e <RTC_WriteAlarmCounter>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2204      	movs	r2, #4
 8005520:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e006      	b.n	800553a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005538:	2300      	movs	r3, #0
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd90      	pop	{r4, r7, pc}
	...

08005544 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	2300      	movs	r3, #0
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	2300      	movs	r3, #0
 800555e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_RTC_GetTime+0x28>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0b5      	b.n	80056dc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e0ac      	b.n	80056dc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f8e3 	bl	800574e <RTC_ReadTimeCounter>
 8005588:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	4a55      	ldr	r2, [pc, #340]	; (80056e4 <HAL_RTC_GetTime+0x1a0>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0adb      	lsrs	r3, r3, #11
 8005594:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4b52      	ldr	r3, [pc, #328]	; (80056e4 <HAL_RTC_GetTime+0x1a0>)
 800559a:	fba3 1302 	umull	r1, r3, r3, r2
 800559e:	0adb      	lsrs	r3, r3, #11
 80055a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	4a4f      	ldr	r2, [pc, #316]	; (80056e8 <HAL_RTC_GetTime+0x1a4>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	4a4a      	ldr	r2, [pc, #296]	; (80056e4 <HAL_RTC_GetTime+0x1a0>)
 80055bc:	fba2 1203 	umull	r1, r2, r2, r3
 80055c0:	0ad2      	lsrs	r2, r2, #11
 80055c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80055c6:	fb01 f202 	mul.w	r2, r1, r2
 80055ca:	1a9a      	subs	r2, r3, r2
 80055cc:	4b46      	ldr	r3, [pc, #280]	; (80056e8 <HAL_RTC_GetTime+0x1a4>)
 80055ce:	fba3 1302 	umull	r1, r3, r3, r2
 80055d2:	0959      	lsrs	r1, r3, #5
 80055d4:	460b      	mov	r3, r1
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	1a5b      	subs	r3, r3, r1
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	1ad1      	subs	r1, r2, r3
 80055de:	b2ca      	uxtb	r2, r1
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b17      	cmp	r3, #23
 80055e8:	d955      	bls.n	8005696 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4a3f      	ldr	r2, [pc, #252]	; (80056ec <HAL_RTC_GetTime+0x1a8>)
 80055ee:	fba2 2303 	umull	r2, r3, r2, r3
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80055f6:	6939      	ldr	r1, [r7, #16]
 80055f8:	4b3c      	ldr	r3, [pc, #240]	; (80056ec <HAL_RTC_GetTime+0x1a8>)
 80055fa:	fba3 2301 	umull	r2, r3, r3, r1
 80055fe:	091a      	lsrs	r2, r3, #4
 8005600:	4613      	mov	r3, r2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	4413      	add	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	1aca      	subs	r2, r1, r3
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f8f3 	bl	80057fc <RTC_ReadAlarmCounter>
 8005616:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d008      	beq.n	8005632 <HAL_RTC_GetTime+0xee>
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	429a      	cmp	r2, r3
 8005626:	d904      	bls.n	8005632 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	e002      	b.n	8005638 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295
 8005636:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4a2d      	ldr	r2, [pc, #180]	; (80056f0 <HAL_RTC_GetTime+0x1ac>)
 800563c:	fb02 f303 	mul.w	r3, r2, r3
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005646:	69b9      	ldr	r1, [r7, #24]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f8b0 	bl	80057ae <RTC_WriteTimeCounter>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e041      	b.n	80056dc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565e:	d00c      	beq.n	800567a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	4413      	add	r3, r2
 8005666:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005668:	69f9      	ldr	r1, [r7, #28]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f8df 	bl	800582e <RTC_WriteAlarmCounter>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e030      	b.n	80056dc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800567a:	69f9      	ldr	r1, [r7, #28]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f8d6 	bl	800582e <RTC_WriteAlarmCounter>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e027      	b.n	80056dc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800568c:	6979      	ldr	r1, [r7, #20]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f97e 	bl	8005990 <RTC_DateUpdate>
 8005694:	e003      	b.n	800569e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01a      	beq.n	80056da <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 f937 	bl	800591c <RTC_ByteToBcd2>
 80056ae:	4603      	mov	r3, r0
 80056b0:	461a      	mov	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f92e 	bl	800591c <RTC_ByteToBcd2>
 80056c0:	4603      	mov	r3, r0
 80056c2:	461a      	mov	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	789b      	ldrb	r3, [r3, #2]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f925 	bl	800591c <RTC_ByteToBcd2>
 80056d2:	4603      	mov	r3, r0
 80056d4:	461a      	mov	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	91a2b3c5 	.word	0x91a2b3c5
 80056e8:	88888889 	.word	0x88888889
 80056ec:	aaaaaaab 	.word	0xaaaaaaab
 80056f0:	00015180 	.word	0x00015180

080056f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e01d      	b.n	8005746 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0208 	bic.w	r2, r2, #8
 8005718:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800571a:	f7fe f89b 	bl	8003854 <HAL_GetTick>
 800571e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005720:	e009      	b.n	8005736 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005722:	f7fe f897 	bl	8003854 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005730:	d901      	bls.n	8005736 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e007      	b.n	8005746 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0ee      	beq.n	8005722 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	827b      	strh	r3, [r7, #18]
 800575a:	2300      	movs	r3, #0
 800575c:	823b      	strh	r3, [r7, #16]
 800575e:	2300      	movs	r3, #0
 8005760:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800577e:	8a7a      	ldrh	r2, [r7, #18]
 8005780:	8a3b      	ldrh	r3, [r7, #16]
 8005782:	429a      	cmp	r2, r3
 8005784:	d008      	beq.n	8005798 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005786:	8a3b      	ldrh	r3, [r7, #16]
 8005788:	041a      	lsls	r2, r3, #16
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	b29b      	uxth	r3, r3
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e004      	b.n	80057a2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005798:	8a7b      	ldrh	r3, [r7, #18]
 800579a:	041a      	lsls	r2, r3, #16
 800579c:	89fb      	ldrh	r3, [r7, #14]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80057a2:	697b      	ldr	r3, [r7, #20]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr

080057ae <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f85d 	bl	800587c <RTC_EnterInitMode>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	e011      	b.n	80057f2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	0c12      	lsrs	r2, r2, #16
 80057d6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	b292      	uxth	r2, r2
 80057e0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f872 	bl	80058cc <RTC_ExitInitMode>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	81fb      	strh	r3, [r7, #14]
 8005808:	2300      	movs	r3, #0
 800580a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800581c:	89fb      	ldrh	r3, [r7, #14]
 800581e:	041a      	lsls	r2, r3, #16
 8005820:	89bb      	ldrh	r3, [r7, #12]
 8005822:	4313      	orrs	r3, r2
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f81d 	bl	800587c <RTC_EnterInitMode>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	e011      	b.n	8005872 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	0c12      	lsrs	r2, r2, #16
 8005856:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	b292      	uxth	r2, r2
 8005860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f832 	bl	80058cc <RTC_ExitInitMode>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005888:	f7fd ffe4 	bl	8003854 <HAL_GetTick>
 800588c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800588e:	e009      	b.n	80058a4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005890:	f7fd ffe0 	bl	8003854 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800589e:	d901      	bls.n	80058a4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e00f      	b.n	80058c4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0ee      	beq.n	8005890 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0210 	orr.w	r2, r2, #16
 80058c0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0210 	bic.w	r2, r2, #16
 80058e6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80058e8:	f7fd ffb4 	bl	8003854 <HAL_GetTick>
 80058ec:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80058ee:	e009      	b.n	8005904 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80058f0:	f7fd ffb0 	bl	8003854 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058fe:	d901      	bls.n	8005904 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e007      	b.n	8005914 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0ee      	beq.n	80058f0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800592a:	e005      	b.n	8005938 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	3b0a      	subs	r3, #10
 8005936:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	2b09      	cmp	r3, #9
 800593c:	d8f6      	bhi.n	800592c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	b2da      	uxtb	r2, r3
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	4313      	orrs	r3, r2
 800594a:	b2db      	uxtb	r3, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	4603      	mov	r3, r0
 800595e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	091b      	lsrs	r3, r3, #4
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	b2da      	uxtb	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	4413      	add	r3, r2
 8005984:	b2db      	uxtb	r3, r3
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	7bdb      	ldrb	r3, [r3, #15]
 80059ae:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	7b5b      	ldrb	r3, [r3, #13]
 80059b4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7b9b      	ldrb	r3, [r3, #14]
 80059ba:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80059bc:	2300      	movs	r3, #0
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	e06f      	b.n	8005aa2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d011      	beq.n	80059ec <RTC_DateUpdate+0x5c>
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d00e      	beq.n	80059ec <RTC_DateUpdate+0x5c>
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b05      	cmp	r3, #5
 80059d2:	d00b      	beq.n	80059ec <RTC_DateUpdate+0x5c>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b07      	cmp	r3, #7
 80059d8:	d008      	beq.n	80059ec <RTC_DateUpdate+0x5c>
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d005      	beq.n	80059ec <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2b0a      	cmp	r3, #10
 80059e4:	d002      	beq.n	80059ec <RTC_DateUpdate+0x5c>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b0c      	cmp	r3, #12
 80059ea:	d117      	bne.n	8005a1c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b1e      	cmp	r3, #30
 80059f0:	d803      	bhi.n	80059fa <RTC_DateUpdate+0x6a>
      {
        day++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80059f8:	e050      	b.n	8005a9c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	d005      	beq.n	8005a0c <RTC_DateUpdate+0x7c>
        {
          month++;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	3301      	adds	r3, #1
 8005a04:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005a06:	2301      	movs	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005a0a:	e047      	b.n	8005a9c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005a10:	2301      	movs	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]
          year++;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	3301      	adds	r3, #1
 8005a18:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005a1a:	e03f      	b.n	8005a9c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d008      	beq.n	8005a34 <RTC_DateUpdate+0xa4>
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b06      	cmp	r3, #6
 8005a26:	d005      	beq.n	8005a34 <RTC_DateUpdate+0xa4>
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b09      	cmp	r3, #9
 8005a2c:	d002      	beq.n	8005a34 <RTC_DateUpdate+0xa4>
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b0b      	cmp	r3, #11
 8005a32:	d10c      	bne.n	8005a4e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b1d      	cmp	r3, #29
 8005a38:	d803      	bhi.n	8005a42 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005a40:	e02c      	b.n	8005a9c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3301      	adds	r3, #1
 8005a46:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005a4c:	e026      	b.n	8005a9c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d123      	bne.n	8005a9c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b1b      	cmp	r3, #27
 8005a58:	d803      	bhi.n	8005a62 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	e01c      	b.n	8005a9c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b1c      	cmp	r3, #28
 8005a66:	d111      	bne.n	8005a8c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 f839 	bl	8005ae4 <RTC_IsLeapYear>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e00d      	b.n	8005a9c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	3301      	adds	r3, #1
 8005a84:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005a86:	2301      	movs	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e007      	b.n	8005a9c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b1d      	cmp	r3, #29
 8005a90:	d104      	bne.n	8005a9c <RTC_DateUpdate+0x10c>
      {
        month++;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	3301      	adds	r3, #1
 8005a96:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d38b      	bcc.n	80059c2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	4619      	mov	r1, r3
 8005acc:	6978      	ldr	r0, [r7, #20]
 8005ace:	f000 f83b 	bl	8005b48 <RTC_WeekDayNum>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	731a      	strb	r2, [r3, #12]
}
 8005ada:	bf00      	nop
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	f003 0303 	and.w	r3, r3, #3
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e01d      	b.n	8005b3a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	4a10      	ldr	r2, [pc, #64]	; (8005b44 <RTC_IsLeapYear+0x60>)
 8005b02:	fba2 1203 	umull	r1, r2, r2, r3
 8005b06:	0952      	lsrs	r2, r2, #5
 8005b08:	2164      	movs	r1, #100	; 0x64
 8005b0a:	fb01 f202 	mul.w	r2, r1, r2
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e00f      	b.n	8005b3a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <RTC_IsLeapYear+0x60>)
 8005b1e:	fba2 1203 	umull	r1, r2, r2, r3
 8005b22:	09d2      	lsrs	r2, r2, #7
 8005b24:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005b28:	fb01 f202 	mul.w	r2, r1, r2
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005b38:	2300      	movs	r3, #0
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	51eb851f 	.word	0x51eb851f

08005b48 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
 8005b54:	4613      	mov	r3, r2
 8005b56:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60bb      	str	r3, [r7, #8]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005b66:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d82d      	bhi.n	8005bca <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005b6e:	78fa      	ldrb	r2, [r7, #3]
 8005b70:	4613      	mov	r3, r2
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	4413      	add	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <RTC_WeekDayNum+0xe4>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	085a      	lsrs	r2, r3, #1
 8005b82:	78bb      	ldrb	r3, [r7, #2]
 8005b84:	441a      	add	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	441a      	add	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	441a      	add	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	4926      	ldr	r1, [pc, #152]	; (8005c30 <RTC_WeekDayNum+0xe8>)
 8005b98:	fba1 1303 	umull	r1, r3, r1, r3
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	1ad2      	subs	r2, r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	4922      	ldr	r1, [pc, #136]	; (8005c30 <RTC_WeekDayNum+0xe8>)
 8005ba6:	fba1 1303 	umull	r1, r3, r1, r3
 8005baa:	09db      	lsrs	r3, r3, #7
 8005bac:	4413      	add	r3, r2
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <RTC_WeekDayNum+0xec>)
 8005bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb6:	1ad1      	subs	r1, r2, r3
 8005bb8:	0849      	lsrs	r1, r1, #1
 8005bba:	440b      	add	r3, r1
 8005bbc:	0899      	lsrs	r1, r3, #2
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	1a5b      	subs	r3, r3, r1
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e029      	b.n	8005c1e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005bca:	78fa      	ldrb	r2, [r7, #3]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	4413      	add	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	4a15      	ldr	r2, [pc, #84]	; (8005c2c <RTC_WeekDayNum+0xe4>)
 8005bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bdc:	085a      	lsrs	r2, r3, #1
 8005bde:	78bb      	ldrb	r3, [r7, #2]
 8005be0:	441a      	add	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	441a      	add	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	089b      	lsrs	r3, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4910      	ldr	r1, [pc, #64]	; (8005c30 <RTC_WeekDayNum+0xe8>)
 8005bf0:	fba1 1303 	umull	r1, r3, r1, r3
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	1ad2      	subs	r2, r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	490d      	ldr	r1, [pc, #52]	; (8005c30 <RTC_WeekDayNum+0xe8>)
 8005bfc:	fba1 1303 	umull	r1, r3, r1, r3
 8005c00:	09db      	lsrs	r3, r3, #7
 8005c02:	4413      	add	r3, r2
 8005c04:	1c9a      	adds	r2, r3, #2
 8005c06:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <RTC_WeekDayNum+0xec>)
 8005c08:	fba3 1302 	umull	r1, r3, r3, r2
 8005c0c:	1ad1      	subs	r1, r2, r3
 8005c0e:	0849      	lsrs	r1, r1, #1
 8005c10:	440b      	add	r3, r1
 8005c12:	0899      	lsrs	r1, r3, #2
 8005c14:	460b      	mov	r3, r1
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	1a5b      	subs	r3, r3, r1
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	b2db      	uxtb	r3, r3
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr
 8005c2c:	38e38e39 	.word	0x38e38e39
 8005c30:	51eb851f 	.word	0x51eb851f
 8005c34:	24924925 	.word	0x24924925

08005c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e041      	b.n	8005cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fd fc18 	bl	8003494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4619      	mov	r1, r3
 8005c76:	4610      	mov	r0, r2
 8005c78:	f000 fd7c 	bl	8006774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d001      	beq.n	8005cf0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e032      	b.n	8005d56 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <HAL_TIM_Base_Start+0x88>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00e      	beq.n	8005d20 <HAL_TIM_Base_Start+0x48>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0a:	d009      	beq.n	8005d20 <HAL_TIM_Base_Start+0x48>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a14      	ldr	r2, [pc, #80]	; (8005d64 <HAL_TIM_Base_Start+0x8c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d004      	beq.n	8005d20 <HAL_TIM_Base_Start+0x48>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a13      	ldr	r2, [pc, #76]	; (8005d68 <HAL_TIM_Base_Start+0x90>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d111      	bne.n	8005d44 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b06      	cmp	r3, #6
 8005d30:	d010      	beq.n	8005d54 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0201 	orr.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d42:	e007      	b.n	8005d54 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800

08005d6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e041      	b.n	8005e02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fd fbdc 	bl	8003550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f000 fce2 	bl	8006774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <HAL_TIM_PWM_Start_DMA+0x28>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	bf0c      	ite	eq
 8005e2c:	2301      	moveq	r3, #1
 8005e2e:	2300      	movne	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	e022      	b.n	8005e7a <HAL_TIM_PWM_Start_DMA+0x6e>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d109      	bne.n	8005e4e <HAL_TIM_PWM_Start_DMA+0x42>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	e015      	b.n	8005e7a <HAL_TIM_PWM_Start_DMA+0x6e>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d109      	bne.n	8005e68 <HAL_TIM_PWM_Start_DMA+0x5c>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	bf0c      	ite	eq
 8005e60:	2301      	moveq	r3, #1
 8005e62:	2300      	movne	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e008      	b.n	8005e7a <HAL_TIM_PWM_Start_DMA+0x6e>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	bf0c      	ite	eq
 8005e74:	2301      	moveq	r3, #1
 8005e76:	2300      	movne	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e14e      	b.n	8006120 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <HAL_TIM_PWM_Start_DMA+0x90>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e022      	b.n	8005ee2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d109      	bne.n	8005eb6 <HAL_TIM_PWM_Start_DMA+0xaa>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	e015      	b.n	8005ee2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d109      	bne.n	8005ed0 <HAL_TIM_PWM_Start_DMA+0xc4>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	e008      	b.n	8005ee2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	bf0c      	ite	eq
 8005edc:	2301      	moveq	r3, #1
 8005ede:	2300      	movne	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d024      	beq.n	8005f30 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <HAL_TIM_PWM_Start_DMA+0xea>
 8005eec:	887b      	ldrh	r3, [r7, #2]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e114      	b.n	8006120 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <HAL_TIM_PWM_Start_DMA+0xfa>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f04:	e016      	b.n	8005f34 <HAL_TIM_PWM_Start_DMA+0x128>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d104      	bne.n	8005f16 <HAL_TIM_PWM_Start_DMA+0x10a>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f14:	e00e      	b.n	8005f34 <HAL_TIM_PWM_Start_DMA+0x128>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d104      	bne.n	8005f26 <HAL_TIM_PWM_Start_DMA+0x11a>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f24:	e006      	b.n	8005f34 <HAL_TIM_PWM_Start_DMA+0x128>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f2e:	e001      	b.n	8005f34 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0f5      	b.n	8006120 <HAL_TIM_PWM_Start_DMA+0x314>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b0c      	cmp	r3, #12
 8005f38:	f200 80ae 	bhi.w	8006098 <HAL_TIM_PWM_Start_DMA+0x28c>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <HAL_TIM_PWM_Start_DMA+0x138>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f79 	.word	0x08005f79
 8005f48:	08006099 	.word	0x08006099
 8005f4c:	08006099 	.word	0x08006099
 8005f50:	08006099 	.word	0x08006099
 8005f54:	08005fc1 	.word	0x08005fc1
 8005f58:	08006099 	.word	0x08006099
 8005f5c:	08006099 	.word	0x08006099
 8005f60:	08006099 	.word	0x08006099
 8005f64:	08006009 	.word	0x08006009
 8005f68:	08006099 	.word	0x08006099
 8005f6c:	08006099 	.word	0x08006099
 8005f70:	08006099 	.word	0x08006099
 8005f74:	08006051 	.word	0x08006051
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	4a6a      	ldr	r2, [pc, #424]	; (8006128 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8005f7e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	4a69      	ldr	r2, [pc, #420]	; (800612c <HAL_TIM_PWM_Start_DMA+0x320>)
 8005f86:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	4a68      	ldr	r2, [pc, #416]	; (8006130 <HAL_TIM_PWM_Start_DMA+0x324>)
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3334      	adds	r3, #52	; 0x34
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	887b      	ldrh	r3, [r7, #2]
 8005fa0:	f7fd fe0a 	bl	8003bb8 <HAL_DMA_Start_IT>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e0b8      	b.n	8006120 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fbc:	60da      	str	r2, [r3, #12]
      break;
 8005fbe:	e06c      	b.n	800609a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc4:	4a58      	ldr	r2, [pc, #352]	; (8006128 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8005fc6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	4a57      	ldr	r2, [pc, #348]	; (800612c <HAL_TIM_PWM_Start_DMA+0x320>)
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	4a56      	ldr	r2, [pc, #344]	; (8006130 <HAL_TIM_PWM_Start_DMA+0x324>)
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3338      	adds	r3, #56	; 0x38
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	887b      	ldrh	r3, [r7, #2]
 8005fe8:	f7fd fde6 	bl	8003bb8 <HAL_DMA_Start_IT>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e094      	b.n	8006120 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006004:	60da      	str	r2, [r3, #12]
      break;
 8006006:	e048      	b.n	800609a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	4a46      	ldr	r2, [pc, #280]	; (8006128 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	4a45      	ldr	r2, [pc, #276]	; (800612c <HAL_TIM_PWM_Start_DMA+0x320>)
 8006016:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	4a44      	ldr	r2, [pc, #272]	; (8006130 <HAL_TIM_PWM_Start_DMA+0x324>)
 800601e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	333c      	adds	r3, #60	; 0x3c
 800602c:	461a      	mov	r2, r3
 800602e:	887b      	ldrh	r3, [r7, #2]
 8006030:	f7fd fdc2 	bl	8003bb8 <HAL_DMA_Start_IT>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e070      	b.n	8006120 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800604c:	60da      	str	r2, [r3, #12]
      break;
 800604e:	e024      	b.n	800609a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	4a34      	ldr	r2, [pc, #208]	; (8006128 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8006056:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	4a33      	ldr	r2, [pc, #204]	; (800612c <HAL_TIM_PWM_Start_DMA+0x320>)
 800605e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	4a32      	ldr	r2, [pc, #200]	; (8006130 <HAL_TIM_PWM_Start_DMA+0x324>)
 8006066:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3340      	adds	r3, #64	; 0x40
 8006074:	461a      	mov	r2, r3
 8006076:	887b      	ldrh	r3, [r7, #2]
 8006078:	f7fd fd9e 	bl	8003bb8 <HAL_DMA_Start_IT>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e04c      	b.n	8006120 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006094:	60da      	str	r2, [r3, #12]
      break;
 8006096:	e000      	b.n	800609a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8006098:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2201      	movs	r2, #1
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fde6 	bl	8006c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a21      	ldr	r2, [pc, #132]	; (8006134 <HAL_TIM_PWM_Start_DMA+0x328>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d107      	bne.n	80060c2 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1b      	ldr	r2, [pc, #108]	; (8006134 <HAL_TIM_PWM_Start_DMA+0x328>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_TIM_PWM_Start_DMA+0x2de>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d4:	d009      	beq.n	80060ea <HAL_TIM_PWM_Start_DMA+0x2de>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a17      	ldr	r2, [pc, #92]	; (8006138 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_TIM_PWM_Start_DMA+0x2de>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a15      	ldr	r2, [pc, #84]	; (800613c <HAL_TIM_PWM_Start_DMA+0x330>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d111      	bne.n	800610e <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b06      	cmp	r3, #6
 80060fa:	d010      	beq.n	800611e <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610c:	e007      	b.n	800611e <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0201 	orr.w	r2, r2, #1
 800611c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	08006665 	.word	0x08006665
 800612c:	0800670d 	.word	0x0800670d
 8006130:	080065d3 	.word	0x080065d3
 8006134:	40012c00 	.word	0x40012c00
 8006138:	40000400 	.word	0x40000400
 800613c:	40000800 	.word	0x40000800

08006140 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b0c      	cmp	r3, #12
 800614e:	d855      	bhi.n	80061fc <HAL_TIM_PWM_Stop_DMA+0xbc>
 8006150:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8006152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006156:	bf00      	nop
 8006158:	0800618d 	.word	0x0800618d
 800615c:	080061fd 	.word	0x080061fd
 8006160:	080061fd 	.word	0x080061fd
 8006164:	080061fd 	.word	0x080061fd
 8006168:	080061a9 	.word	0x080061a9
 800616c:	080061fd 	.word	0x080061fd
 8006170:	080061fd 	.word	0x080061fd
 8006174:	080061fd 	.word	0x080061fd
 8006178:	080061c5 	.word	0x080061c5
 800617c:	080061fd 	.word	0x080061fd
 8006180:	080061fd 	.word	0x080061fd
 8006184:	080061fd 	.word	0x080061fd
 8006188:	080061e1 	.word	0x080061e1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800619a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fd fda3 	bl	8003cec <HAL_DMA_Abort_IT>
      break;
 80061a6:	e02a      	b.n	80061fe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fd fd95 	bl	8003cec <HAL_DMA_Abort_IT>
      break;
 80061c2:	e01c      	b.n	80061fe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fd fd87 	bl	8003cec <HAL_DMA_Abort_IT>
      break;
 80061de:	e00e      	b.n	80061fe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fd fd79 	bl	8003cec <HAL_DMA_Abort_IT>
      break;
 80061fa:	e000      	b.n	80061fe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80061fc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fd34 	bl	8006c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a29      	ldr	r2, [pc, #164]	; (80062b8 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d117      	bne.n	8006246 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006220:	4013      	ands	r3, r2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10f      	bne.n	8006246 <HAL_TIM_PWM_Stop_DMA+0x106>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6a1a      	ldr	r2, [r3, #32]
 800622c:	f240 4344 	movw	r3, #1092	; 0x444
 8006230:	4013      	ands	r3, r2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <HAL_TIM_PWM_Stop_DMA+0x106>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006244:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6a1a      	ldr	r2, [r3, #32]
 800624c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006250:	4013      	ands	r3, r2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10f      	bne.n	8006276 <HAL_TIM_PWM_Stop_DMA+0x136>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	f240 4344 	movw	r3, #1092	; 0x444
 8006260:	4013      	ands	r3, r2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d107      	bne.n	8006276 <HAL_TIM_PWM_Stop_DMA+0x136>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d104      	bne.n	8006286 <HAL_TIM_PWM_Stop_DMA+0x146>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006284:	e013      	b.n	80062ae <HAL_TIM_PWM_Stop_DMA+0x16e>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b04      	cmp	r3, #4
 800628a:	d104      	bne.n	8006296 <HAL_TIM_PWM_Stop_DMA+0x156>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006294:	e00b      	b.n	80062ae <HAL_TIM_PWM_Stop_DMA+0x16e>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b08      	cmp	r3, #8
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_PWM_Stop_DMA+0x166>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a4:	e003      	b.n	80062ae <HAL_TIM_PWM_Stop_DMA+0x16e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40012c00 	.word	0x40012c00

080062bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062d2:	2302      	movs	r3, #2
 80062d4:	e0ac      	b.n	8006430 <HAL_TIM_PWM_ConfigChannel+0x174>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b0c      	cmp	r3, #12
 80062e2:	f200 809f 	bhi.w	8006424 <HAL_TIM_PWM_ConfigChannel+0x168>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	08006321 	.word	0x08006321
 80062f0:	08006425 	.word	0x08006425
 80062f4:	08006425 	.word	0x08006425
 80062f8:	08006425 	.word	0x08006425
 80062fc:	08006361 	.word	0x08006361
 8006300:	08006425 	.word	0x08006425
 8006304:	08006425 	.word	0x08006425
 8006308:	08006425 	.word	0x08006425
 800630c:	080063a3 	.word	0x080063a3
 8006310:	08006425 	.word	0x08006425
 8006314:	08006425 	.word	0x08006425
 8006318:	08006425 	.word	0x08006425
 800631c:	080063e3 	.word	0x080063e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fa86 	bl	8006838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0208 	orr.w	r2, r2, #8
 800633a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0204 	bic.w	r2, r2, #4
 800634a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6999      	ldr	r1, [r3, #24]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	619a      	str	r2, [r3, #24]
      break;
 800635e:	e062      	b.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 facc 	bl	8006904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800637a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6999      	ldr	r1, [r3, #24]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	021a      	lsls	r2, r3, #8
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	619a      	str	r2, [r3, #24]
      break;
 80063a0:	e041      	b.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fb15 	bl	80069d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0208 	orr.w	r2, r2, #8
 80063bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0204 	bic.w	r2, r2, #4
 80063cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69d9      	ldr	r1, [r3, #28]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	61da      	str	r2, [r3, #28]
      break;
 80063e0:	e021      	b.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fb5f 	bl	8006aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69da      	ldr	r2, [r3, #28]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69d9      	ldr	r1, [r3, #28]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	021a      	lsls	r2, r3, #8
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	61da      	str	r2, [r3, #28]
      break;
 8006422:	e000      	b.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006424:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_TIM_ConfigClockSource+0x18>
 800644c:	2302      	movs	r3, #2
 800644e:	e0b3      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x180>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800646e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006476:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006488:	d03e      	beq.n	8006508 <HAL_TIM_ConfigClockSource+0xd0>
 800648a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648e:	f200 8087 	bhi.w	80065a0 <HAL_TIM_ConfigClockSource+0x168>
 8006492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006496:	f000 8085 	beq.w	80065a4 <HAL_TIM_ConfigClockSource+0x16c>
 800649a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649e:	d87f      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x168>
 80064a0:	2b70      	cmp	r3, #112	; 0x70
 80064a2:	d01a      	beq.n	80064da <HAL_TIM_ConfigClockSource+0xa2>
 80064a4:	2b70      	cmp	r3, #112	; 0x70
 80064a6:	d87b      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x168>
 80064a8:	2b60      	cmp	r3, #96	; 0x60
 80064aa:	d050      	beq.n	800654e <HAL_TIM_ConfigClockSource+0x116>
 80064ac:	2b60      	cmp	r3, #96	; 0x60
 80064ae:	d877      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x168>
 80064b0:	2b50      	cmp	r3, #80	; 0x50
 80064b2:	d03c      	beq.n	800652e <HAL_TIM_ConfigClockSource+0xf6>
 80064b4:	2b50      	cmp	r3, #80	; 0x50
 80064b6:	d873      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x168>
 80064b8:	2b40      	cmp	r3, #64	; 0x40
 80064ba:	d058      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x136>
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d86f      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x168>
 80064c0:	2b30      	cmp	r3, #48	; 0x30
 80064c2:	d064      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x156>
 80064c4:	2b30      	cmp	r3, #48	; 0x30
 80064c6:	d86b      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x168>
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d060      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x156>
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d867      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x168>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d05c      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x156>
 80064d4:	2b10      	cmp	r3, #16
 80064d6:	d05a      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80064d8:	e062      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6899      	ldr	r1, [r3, #8]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f000 fba4 	bl	8006c36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	609a      	str	r2, [r3, #8]
      break;
 8006506:	e04e      	b.n	80065a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	6899      	ldr	r1, [r3, #8]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f000 fb8d 	bl	8006c36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800652a:	609a      	str	r2, [r3, #8]
      break;
 800652c:	e03b      	b.n	80065a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6859      	ldr	r1, [r3, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	461a      	mov	r2, r3
 800653c:	f000 fb04 	bl	8006b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2150      	movs	r1, #80	; 0x50
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fb5b 	bl	8006c02 <TIM_ITRx_SetConfig>
      break;
 800654c:	e02b      	b.n	80065a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	461a      	mov	r2, r3
 800655c:	f000 fb22 	bl	8006ba4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2160      	movs	r1, #96	; 0x60
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fb4b 	bl	8006c02 <TIM_ITRx_SetConfig>
      break;
 800656c:	e01b      	b.n	80065a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6859      	ldr	r1, [r3, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	461a      	mov	r2, r3
 800657c:	f000 fae4 	bl	8006b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2140      	movs	r1, #64	; 0x40
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fb3b 	bl	8006c02 <TIM_ITRx_SetConfig>
      break;
 800658c:	e00b      	b.n	80065a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f000 fb32 	bl	8006c02 <TIM_ITRx_SetConfig>
        break;
 800659e:	e002      	b.n	80065a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065a0:	bf00      	nop
 80065a2:	e000      	b.n	80065a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr

080065d2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b084      	sub	sp, #16
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d107      	bne.n	80065fa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f8:	e02a      	b.n	8006650 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	429a      	cmp	r2, r3
 8006602:	d107      	bne.n	8006614 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2202      	movs	r2, #2
 8006608:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006612:	e01d      	b.n	8006650 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	429a      	cmp	r2, r3
 800661c:	d107      	bne.n	800662e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2204      	movs	r2, #4
 8006622:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800662c:	e010      	b.n	8006650 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	429a      	cmp	r2, r3
 8006636:	d107      	bne.n	8006648 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2208      	movs	r2, #8
 800663c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006646:	e003      	b.n	8006650 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f7ff ffb5 	bl	80065c0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
}
 800665c:	bf00      	nop
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	429a      	cmp	r2, r3
 800667a:	d10b      	bne.n	8006694 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d136      	bne.n	80066f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006692:	e031      	b.n	80066f8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	429a      	cmp	r2, r3
 800669c:	d10b      	bne.n	80066b6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2202      	movs	r2, #2
 80066a2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d125      	bne.n	80066f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b4:	e020      	b.n	80066f8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d10b      	bne.n	80066d8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2204      	movs	r2, #4
 80066c4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d114      	bne.n	80066f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066d6:	e00f      	b.n	80066f8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d10a      	bne.n	80066f8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2208      	movs	r2, #8
 80066e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d103      	bne.n	80066f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7fc fdd1 	bl	80032a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	771a      	strb	r2, [r3, #28]
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d103      	bne.n	800672c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	771a      	strb	r2, [r3, #28]
 800672a:	e019      	b.n	8006760 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	429a      	cmp	r2, r3
 8006734:	d103      	bne.n	800673e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2202      	movs	r2, #2
 800673a:	771a      	strb	r2, [r3, #28]
 800673c:	e010      	b.n	8006760 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	429a      	cmp	r2, r3
 8006746:	d103      	bne.n	8006750 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2204      	movs	r2, #4
 800674c:	771a      	strb	r2, [r3, #28]
 800674e:	e007      	b.n	8006760 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d102      	bne.n	8006760 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2208      	movs	r2, #8
 800675e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7fc fd1f 	bl	80031a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	771a      	strb	r2, [r3, #28]
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a29      	ldr	r2, [pc, #164]	; (800682c <TIM_Base_SetConfig+0xb8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00b      	beq.n	80067a4 <TIM_Base_SetConfig+0x30>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d007      	beq.n	80067a4 <TIM_Base_SetConfig+0x30>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a26      	ldr	r2, [pc, #152]	; (8006830 <TIM_Base_SetConfig+0xbc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d003      	beq.n	80067a4 <TIM_Base_SetConfig+0x30>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a25      	ldr	r2, [pc, #148]	; (8006834 <TIM_Base_SetConfig+0xc0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d108      	bne.n	80067b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a1c      	ldr	r2, [pc, #112]	; (800682c <TIM_Base_SetConfig+0xb8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00b      	beq.n	80067d6 <TIM_Base_SetConfig+0x62>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c4:	d007      	beq.n	80067d6 <TIM_Base_SetConfig+0x62>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a19      	ldr	r2, [pc, #100]	; (8006830 <TIM_Base_SetConfig+0xbc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d003      	beq.n	80067d6 <TIM_Base_SetConfig+0x62>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a18      	ldr	r2, [pc, #96]	; (8006834 <TIM_Base_SetConfig+0xc0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d108      	bne.n	80067e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a07      	ldr	r2, [pc, #28]	; (800682c <TIM_Base_SetConfig+0xb8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d103      	bne.n	800681c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	615a      	str	r2, [r3, #20]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40000400 	.word	0x40000400
 8006834:	40000800 	.word	0x40000800

08006838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f023 0201 	bic.w	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f023 0302 	bic.w	r3, r3, #2
 8006880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a1c      	ldr	r2, [pc, #112]	; (8006900 <TIM_OC1_SetConfig+0xc8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d10c      	bne.n	80068ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f023 0308 	bic.w	r3, r3, #8
 800689a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 0304 	bic.w	r3, r3, #4
 80068ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a13      	ldr	r2, [pc, #76]	; (8006900 <TIM_OC1_SetConfig+0xc8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d111      	bne.n	80068da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	621a      	str	r2, [r3, #32]
}
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00

08006904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 0210 	bic.w	r2, r3, #16
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	021b      	lsls	r3, r3, #8
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4313      	orrs	r3, r2
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f023 0320 	bic.w	r3, r3, #32
 800694e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <TIM_OC2_SetConfig+0xd0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d10d      	bne.n	8006980 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800696a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	4313      	orrs	r3, r2
 8006976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800697e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a14      	ldr	r2, [pc, #80]	; (80069d4 <TIM_OC2_SetConfig+0xd0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d113      	bne.n	80069b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800698e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr
 80069d4:	40012c00 	.word	0x40012c00

080069d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a1d      	ldr	r2, [pc, #116]	; (8006aa8 <TIM_OC3_SetConfig+0xd0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d10d      	bne.n	8006a52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a14      	ldr	r2, [pc, #80]	; (8006aa8 <TIM_OC3_SetConfig+0xd0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d113      	bne.n	8006a82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	621a      	str	r2, [r3, #32]
}
 8006a9c:	bf00      	nop
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40012c00 	.word	0x40012c00

08006aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	031b      	lsls	r3, r3, #12
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a0f      	ldr	r2, [pc, #60]	; (8006b44 <TIM_OC4_SetConfig+0x98>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d109      	bne.n	8006b20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	019b      	lsls	r3, r3, #6
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr
 8006b44:	40012c00 	.word	0x40012c00

08006b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f023 0201 	bic.w	r2, r3, #1
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f023 030a 	bic.w	r3, r3, #10
 8006b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr

08006ba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	f023 0210 	bic.w	r2, r3, #16
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	031b      	lsls	r3, r3, #12
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006be0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	621a      	str	r2, [r3, #32]
}
 8006bf8:	bf00      	nop
 8006bfa:	371c      	adds	r7, #28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc80      	pop	{r7}
 8006c00:	4770      	bx	lr

08006c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f043 0307 	orr.w	r3, r3, #7
 8006c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	609a      	str	r2, [r3, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr

08006c36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b087      	sub	sp, #28
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	021a      	lsls	r2, r3, #8
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	609a      	str	r2, [r3, #8]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr

08006c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	2201      	movs	r2, #1
 8006c88:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1a      	ldr	r2, [r3, #32]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	43db      	mvns	r3, r3
 8006c96:	401a      	ands	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a1a      	ldr	r2, [r3, #32]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cac:	431a      	orrs	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr

08006cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e046      	b.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a16      	ldr	r2, [pc, #88]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00e      	beq.n	8006d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d20:	d009      	beq.n	8006d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a12      	ldr	r2, [pc, #72]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d004      	beq.n	8006d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a10      	ldr	r2, [pc, #64]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d10c      	bne.n	8006d50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40000800 	.word	0x40000800

08006d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e03d      	b.n	8006e10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bc80      	pop	{r7}
 8006e18:	4770      	bx	lr

08006e1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e03f      	b.n	8006eac <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d106      	bne.n	8006e46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7fc fbf3 	bl	800362c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2224      	movs	r2, #36	; 0x24
 8006e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fc24 	bl	80076ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	; 0x28
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d17c      	bne.n	8006fce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_UART_Transmit+0x2c>
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e075      	b.n	8006fd0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_Transmit+0x3e>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e06e      	b.n	8006fd0 <HAL_UART_Transmit+0x11c>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2221      	movs	r2, #33	; 0x21
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f08:	f7fc fca4 	bl	8003854 <HAL_GetTick>
 8006f0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	88fa      	ldrh	r2, [r7, #6]
 8006f12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	88fa      	ldrh	r2, [r7, #6]
 8006f18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	d108      	bne.n	8006f36 <HAL_UART_Transmit+0x82>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d104      	bne.n	8006f36 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	e003      	b.n	8006f3e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f46:	e02a      	b.n	8006f9e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2180      	movs	r1, #128	; 0x80
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fa10 	bl	8007378 <UART_WaitOnFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e036      	b.n	8006fd0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f76:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	3302      	adds	r3, #2
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e007      	b.n	8006f90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	781a      	ldrb	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1cf      	bne.n	8006f48 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2140      	movs	r1, #64	; 0x40
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 f9e0 	bl	8007378 <UART_WaitOnFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e006      	b.n	8006fd0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e000      	b.n	8006fd0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006fce:	2302      	movs	r3, #2
  }
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10d      	bne.n	800702a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b00      	cmp	r3, #0
 8007016:	d008      	beq.n	800702a <HAL_UART_IRQHandler+0x52>
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa99 	bl	800755a <UART_Receive_IT>
      return;
 8007028:	e17b      	b.n	8007322 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 80b1 	beq.w	8007194 <HAL_UART_IRQHandler+0x1bc>
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d105      	bne.n	8007048 <HAL_UART_IRQHandler+0x70>
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80a6 	beq.w	8007194 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <HAL_UART_IRQHandler+0x90>
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	f043 0201 	orr.w	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <HAL_UART_IRQHandler+0xb0>
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007080:	f043 0202 	orr.w	r2, r3, #2
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <HAL_UART_IRQHandler+0xd0>
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	f043 0204 	orr.w	r2, r3, #4
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00f      	beq.n	80070d2 <HAL_UART_IRQHandler+0xfa>
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <HAL_UART_IRQHandler+0xee>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f043 0208 	orr.w	r2, r3, #8
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 811e 	beq.w	8007318 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <HAL_UART_IRQHandler+0x11e>
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fa32 	bl	800755a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	bf14      	ite	ne
 8007104:	2301      	movne	r3, #1
 8007106:	2300      	moveq	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <HAL_UART_IRQHandler+0x146>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d031      	beq.n	8007182 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f974 	bl	800740c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d023      	beq.n	800717a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695a      	ldr	r2, [r3, #20]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007140:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	2b00      	cmp	r3, #0
 8007148:	d013      	beq.n	8007172 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	4a76      	ldr	r2, [pc, #472]	; (8007328 <HAL_UART_IRQHandler+0x350>)
 8007150:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	4618      	mov	r0, r3
 8007158:	f7fc fdc8 	bl	8003cec <HAL_DMA_Abort_IT>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d016      	beq.n	8007190 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007170:	e00e      	b.n	8007190 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f8ec 	bl	8007350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007178:	e00a      	b.n	8007190 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f8e8 	bl	8007350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007180:	e006      	b.n	8007190 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f8e4 	bl	8007350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800718e:	e0c3      	b.n	8007318 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007190:	bf00      	nop
    return;
 8007192:	e0c1      	b.n	8007318 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007198:	2b01      	cmp	r3, #1
 800719a:	f040 80a1 	bne.w	80072e0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 809b 	beq.w	80072e0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8095 	beq.w	80072e0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d04e      	beq.n	8007278 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80071e4:	8a3b      	ldrh	r3, [r7, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 8098 	beq.w	800731c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071f0:	8a3a      	ldrh	r2, [r7, #16]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	f080 8092 	bcs.w	800731c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	8a3a      	ldrh	r2, [r7, #16]
 80071fc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	2b20      	cmp	r3, #32
 8007206:	d02b      	beq.n	8007260 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007216:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695a      	ldr	r2, [r3, #20]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0201 	bic.w	r2, r2, #1
 8007226:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695a      	ldr	r2, [r3, #20]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007236:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0210 	bic.w	r2, r2, #16
 8007254:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	4618      	mov	r0, r3
 800725c:	f7fc fd0b 	bl	8003c76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007268:	b29b      	uxth	r3, r3
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	b29b      	uxth	r3, r3
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f876 	bl	8007362 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007276:	e051      	b.n	800731c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007280:	b29b      	uxth	r3, r3
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800728a:	b29b      	uxth	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d047      	beq.n	8007320 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007290:	8a7b      	ldrh	r3, [r7, #18]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d044      	beq.n	8007320 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072a4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695a      	ldr	r2, [r3, #20]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0201 	bic.w	r2, r2, #1
 80072b4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0210 	bic.w	r2, r2, #16
 80072d2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072d4:	8a7b      	ldrh	r3, [r7, #18]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f842 	bl	8007362 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80072de:	e01f      	b.n	8007320 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <HAL_UART_IRQHandler+0x324>
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f8c9 	bl	800748c <UART_Transmit_IT>
    return;
 80072fa:	e012      	b.n	8007322 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00d      	beq.n	8007322 <HAL_UART_IRQHandler+0x34a>
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d008      	beq.n	8007322 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f90a 	bl	800752a <UART_EndTransmit_IT>
    return;
 8007316:	e004      	b.n	8007322 <HAL_UART_IRQHandler+0x34a>
    return;
 8007318:	bf00      	nop
 800731a:	e002      	b.n	8007322 <HAL_UART_IRQHandler+0x34a>
      return;
 800731c:	bf00      	nop
 800731e:	e000      	b.n	8007322 <HAL_UART_IRQHandler+0x34a>
      return;
 8007320:	bf00      	nop
  }
}
 8007322:	3728      	adds	r7, #40	; 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	08007465 	.word	0x08007465

0800732c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr

0800733e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr

08007350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr

08007362 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	460b      	mov	r3, r1
 800736c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	4613      	mov	r3, r2
 8007386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007388:	e02c      	b.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007390:	d028      	beq.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d007      	beq.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007398:	f7fc fa5c 	bl	8003854 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d21d      	bcs.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695a      	ldr	r2, [r3, #20]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0201 	bic.w	r2, r2, #1
 80073c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2220      	movs	r2, #32
 80073d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e00f      	b.n	8007404 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	4013      	ands	r3, r2
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	bf0c      	ite	eq
 80073f4:	2301      	moveq	r3, #1
 80073f6:	2300      	movne	r3, #0
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d0c3      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007422:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695a      	ldr	r2, [r3, #20]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0201 	bic.w	r2, r2, #1
 8007432:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007438:	2b01      	cmp	r3, #1
 800743a:	d107      	bne.n	800744c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0210 	bic.w	r2, r2, #16
 800744a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	631a      	str	r2, [r3, #48]	; 0x30
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr

08007464 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f7ff ff66 	bl	8007350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b21      	cmp	r3, #33	; 0x21
 800749e:	d13e      	bne.n	800751e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a8:	d114      	bne.n	80074d4 <UART_Transmit_IT+0x48>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d110      	bne.n	80074d4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	1c9a      	adds	r2, r3, #2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	621a      	str	r2, [r3, #32]
 80074d2:	e008      	b.n	80074e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	1c59      	adds	r1, r3, #1
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6211      	str	r1, [r2, #32]
 80074de:	781a      	ldrb	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	4619      	mov	r1, r3
 80074f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10f      	bne.n	800751a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007508:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007518:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	e000      	b.n	8007520 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800751e:	2302      	movs	r3, #2
  }
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	bc80      	pop	{r7}
 8007528:	4770      	bx	lr

0800752a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007540:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff feee 	bl	800732c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b22      	cmp	r3, #34	; 0x22
 800756c:	f040 8099 	bne.w	80076a2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007578:	d117      	bne.n	80075aa <UART_Receive_IT+0x50>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d113      	bne.n	80075aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	b29b      	uxth	r3, r3
 8007594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007598:	b29a      	uxth	r2, r3
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	1c9a      	adds	r2, r3, #2
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	629a      	str	r2, [r3, #40]	; 0x28
 80075a8:	e026      	b.n	80075f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075bc:	d007      	beq.n	80075ce <UART_Receive_IT+0x74>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10a      	bne.n	80075dc <UART_Receive_IT+0x82>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	e008      	b.n	80075ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29b      	uxth	r3, r3
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	4619      	mov	r1, r3
 8007606:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007608:	2b00      	cmp	r3, #0
 800760a:	d148      	bne.n	800769e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0220 	bic.w	r2, r2, #32
 800761a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800762a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0201 	bic.w	r2, r2, #1
 800763a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2220      	movs	r2, #32
 8007640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007648:	2b01      	cmp	r3, #1
 800764a:	d123      	bne.n	8007694 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0210 	bic.w	r2, r2, #16
 8007660:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0310 	and.w	r3, r3, #16
 800766c:	2b10      	cmp	r3, #16
 800766e:	d10a      	bne.n	8007686 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff fe68 	bl	8007362 <HAL_UARTEx_RxEventCallback>
 8007692:	e002      	b.n	800769a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff fe52 	bl	800733e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	e002      	b.n	80076a4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e000      	b.n	80076a4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80076a2:	2302      	movs	r3, #2
  }
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80076e6:	f023 030c 	bic.w	r3, r3, #12
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	430b      	orrs	r3, r1
 80076f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a2c      	ldr	r2, [pc, #176]	; (80077c0 <UART_SetConfig+0x114>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d103      	bne.n	800771c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007714:	f7fd fc3c 	bl	8004f90 <HAL_RCC_GetPCLK2Freq>
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	e002      	b.n	8007722 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800771c:	f7fd fc24 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8007720:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009a      	lsls	r2, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	fbb2 f3f3 	udiv	r3, r2, r3
 8007738:	4a22      	ldr	r2, [pc, #136]	; (80077c4 <UART_SetConfig+0x118>)
 800773a:	fba2 2303 	umull	r2, r3, r2, r3
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	0119      	lsls	r1, r3, #4
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009a      	lsls	r2, r3, #2
 800774c:	441a      	add	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	fbb2 f2f3 	udiv	r2, r2, r3
 8007758:	4b1a      	ldr	r3, [pc, #104]	; (80077c4 <UART_SetConfig+0x118>)
 800775a:	fba3 0302 	umull	r0, r3, r3, r2
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	2064      	movs	r0, #100	; 0x64
 8007762:	fb00 f303 	mul.w	r3, r0, r3
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	3332      	adds	r3, #50	; 0x32
 800776c:	4a15      	ldr	r2, [pc, #84]	; (80077c4 <UART_SetConfig+0x118>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007778:	4419      	add	r1, r3
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009a      	lsls	r2, r3, #2
 8007784:	441a      	add	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007790:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <UART_SetConfig+0x118>)
 8007792:	fba3 0302 	umull	r0, r3, r3, r2
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	2064      	movs	r0, #100	; 0x64
 800779a:	fb00 f303 	mul.w	r3, r0, r3
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	011b      	lsls	r3, r3, #4
 80077a2:	3332      	adds	r3, #50	; 0x32
 80077a4:	4a07      	ldr	r2, [pc, #28]	; (80077c4 <UART_SetConfig+0x118>)
 80077a6:	fba2 2303 	umull	r2, r3, r2, r3
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	f003 020f 	and.w	r2, r3, #15
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	440a      	add	r2, r1
 80077b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	40013800 	.word	0x40013800
 80077c4:	51eb851f 	.word	0x51eb851f

080077c8 <__libc_init_array>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	2600      	movs	r6, #0
 80077cc:	4d0c      	ldr	r5, [pc, #48]	; (8007800 <__libc_init_array+0x38>)
 80077ce:	4c0d      	ldr	r4, [pc, #52]	; (8007804 <__libc_init_array+0x3c>)
 80077d0:	1b64      	subs	r4, r4, r5
 80077d2:	10a4      	asrs	r4, r4, #2
 80077d4:	42a6      	cmp	r6, r4
 80077d6:	d109      	bne.n	80077ec <__libc_init_array+0x24>
 80077d8:	f000 f822 	bl	8007820 <_init>
 80077dc:	2600      	movs	r6, #0
 80077de:	4d0a      	ldr	r5, [pc, #40]	; (8007808 <__libc_init_array+0x40>)
 80077e0:	4c0a      	ldr	r4, [pc, #40]	; (800780c <__libc_init_array+0x44>)
 80077e2:	1b64      	subs	r4, r4, r5
 80077e4:	10a4      	asrs	r4, r4, #2
 80077e6:	42a6      	cmp	r6, r4
 80077e8:	d105      	bne.n	80077f6 <__libc_init_array+0x2e>
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f0:	4798      	blx	r3
 80077f2:	3601      	adds	r6, #1
 80077f4:	e7ee      	b.n	80077d4 <__libc_init_array+0xc>
 80077f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fa:	4798      	blx	r3
 80077fc:	3601      	adds	r6, #1
 80077fe:	e7f2      	b.n	80077e6 <__libc_init_array+0x1e>
 8007800:	08007888 	.word	0x08007888
 8007804:	08007888 	.word	0x08007888
 8007808:	08007888 	.word	0x08007888
 800780c:	0800788c 	.word	0x0800788c

08007810 <memset>:
 8007810:	4603      	mov	r3, r0
 8007812:	4402      	add	r2, r0
 8007814:	4293      	cmp	r3, r2
 8007816:	d100      	bne.n	800781a <memset+0xa>
 8007818:	4770      	bx	lr
 800781a:	f803 1b01 	strb.w	r1, [r3], #1
 800781e:	e7f9      	b.n	8007814 <memset+0x4>

08007820 <_init>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr

0800782c <_fini>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr
